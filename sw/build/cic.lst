

HI-TECH Software PIC PRO Macro Assembler V9.70 build 5239 
                                                                                               Fri Nov 15 12:42:02 2024

HI-TECH Software Omniscient Code Generator (PRO mode) build 5239
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=2,delta=2
     5                           	psect	config,global,class=CONFIG,delta=2
     6                           	psect	idloc,global,class=IDLOC,delta=2
     7                           	psect	idataBANK0,global,class=CODE,delta=2
     8                           	psect	idataBANK3,global,class=CODE,delta=2
     9                           	psect	strings,global,reloc=256,class=CODE,delta=2
    10                           	psect	stringtext1,global,class=CODE,delta=2
    11                           	psect	stringtext2,global,class=CODE,delta=2
    12                           	psect	stringtext3,global,class=CODE,delta=2
    13                           	psect	stringtext4,global,class=CODE,delta=2
    14                           	psect	stringtext5,global,class=CODE,delta=2
    15                           	psect	stringtext6,global,class=CODE,delta=2
    16                           	psect	stringtext7,global,class=CODE,delta=2
    17                           	psect	stringtext8,global,class=CODE,delta=2
    18                           	psect	stringtext9,global,class=CODE,delta=2
    19                           	psect	stringtext10,global,class=CODE,delta=2
    20                           	psect	stringtext11,global,class=CODE,delta=2
    21                           	psect	stringtext12,global,class=CODE,delta=2
    22                           	psect	stringtext13,global,class=CODE,delta=2
    23                           	psect	stringtext14,global,class=CODE,delta=2
    24                           	psect	stringtext15,global,class=CODE,delta=2
    25                           	psect	stringtext16,global,class=CODE,delta=2
    26                           	psect	stringtext17,global,class=CODE,delta=2
    27                           	psect	stringtext18,global,class=CODE,delta=2
    28                           	psect	stringtext19,global,class=CODE,delta=2
    29                           	psect	stringtext20,global,class=CODE,delta=2
    30                           	psect	stringtext21,global,class=CODE,delta=2
    31                           	psect	stringtext22,global,class=CODE,delta=2
    32                           	psect	stringtext23,global,class=CODE,delta=2
    33                           	psect	stringtext24,global,class=CODE,delta=2
    34                           	psect	stringtext25,global,class=CODE,delta=2
    35                           	psect	stringtext26,global,class=CODE,delta=2
    36                           	psect	stringtext27,global,class=CODE,delta=2
    37                           	psect	stringtext28,global,class=CODE,delta=2
    38                           	psect	stringtext29,global,class=CODE,delta=2
    39                           	psect	stringtext30,global,class=CODE,delta=2
    40                           	psect	cinit,global,class=CODE,delta=2
    41                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    42                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    43                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    44                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    45                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    46                           	psect	clrtext,global,class=CODE,delta=2
    47                           	psect	inittext,global,class=CODE,delta=2
    48                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    49                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    50                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    51                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    52                           	psect	maintext,local,class=CODE,delta=2
    53                           	psect	text1203,local,class=CODE,delta=2
    54                           	psect	text1206,local,class=CODE,delta=2
    55                           	psect	text1210,local,class=CODE,delta=2
    56                           	psect	text1213,local,class=CODE,delta=2
    57                           	psect	text1214,local,class=CODE,delta=2
    58                           	psect	text1218,local,class=CODE,delta=2
    59                           	psect	text1219,local,class=CODE,delta=2
    60                           	psect	text1220,local,class=CODE,delta=2
    61                           	psect	text1223,local,class=CODE,delta=2
    62                           	psect	text1224,local,class=CODE,delta=2
    63                           	psect	text1225,local,class=CODE,delta=2
    64                           	psect	text1226,local,class=CODE,delta=2
    65                           	psect	text1229,local,class=CODE,delta=2
    66                           	psect	text1230,local,class=CODE,delta=2
    67                           	psect	text1231,local,class=CODE,delta=2
    68                           	psect	text1232,local,class=CODE,delta=2
    69                           	psect	text1233,local,class=CODE,delta=2
    70                           	psect	text1248,local,class=CODE,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text1251,local,class=CODE,delta=2
    73                           	psect	text1253,local,class=CODE,delta=2
    74                           	psect	text1254,local,class=CODE,delta=2
    75                           	psect	functab,global,reloc=256,class=CODE,delta=2
    76                           	dabs	1,0x7E,2
    77  000A                     	;#
    78                           
    79                           	psect	eeprom_data
    80  0000  0000 0000 0002     	db	0,0,2,0,1,0,0,0	;#
      +       0000 0001 0000     
      +       0000 0000          
    81  0008  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    82  0010  0000 0000 0020     	db	0,0,32,0,0,40,0,0	;#
      +       0000 0000 0028     
      +       0000 0000          
    83  0018  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    84  0020  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    85  0028  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    86  0030  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    87  0038  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    88  0040  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    89  0048  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    90  0050  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    91  0058  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    92  0060  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    93  0068  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    94  0070  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    95  0078  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    96  0080  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    97  0088  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    98  0090  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
    99  0098  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   100  00A0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   101  00A8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   102  00B0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   103  00B8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   104  00C0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   105  00C8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   106  00D0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   107  00D8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   108  00E0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   109  00E8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   110  00F0  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   111  00F8  0000 0000 0000     	db	0,0,0,0,0,0,0,0	;#
      +       0000 0000 0000     
      +       0000 0000          
   112                           
   113                           	psect	config
   114  2007  2F04               	dw	12036	;#
   115  2008  3EFF               	dw	16127	;#
   116                           
   117                           	psect	idloc
   118  2000                     idloc_word:
   119                           ;#
   120  2000  0020               	dw	32	;#
   121  2001  0011               	dw	17	;#
   122  2002  0002               	dw	2	;#
   123  2003  0022               	dw	34	;#
   124                           
   125                           	psect	idataBANK0
   126  121E                     __pidataBANK0:	;BANK1:	_main->_fsmGetEvent
   127                           ;BANK0:	_main->_a_showTime
   128                           ;BANK0:	_a_showTime->___atdiv
   129                           ;COMMON:	___atdiv->___atmod
   130                           ;BANK0:	___atdiv->___atmod
   131                           ;COMMON:	_a_showTime->___lbdiv
   132                           ;COMMON:	_main->_a_m0_tOnOff_save
   133                           ;COMMON:	_a_m0_tOnOff_save->_a_m0_tOnOff_showString
   134                           ;COMMON:	_a_m0_tOnOff_showString->___lbmod
   135                           ;BANK0:	_a_m0_tOnOff_showString->___awdiv
   136                           ;BANK0:	_a_m0_tOnOff_save->_a_m0_tOnOff_showString
   137                           ;COMMON:	_a_m0_tOnOff_showString->___lbmod
   138                           ;BANK0:	_a_m0_tOnOff_showString->___awdiv
   139                           ;initializer for _disp
   140  121E  34BB               	retlw	low _d7sm_buffer
   141  121F  3481               	retlw	(high _d7sm_buffer)| (0+128)
   142  1220  3404               	retlw	4
   143  1221  3404               	retlw	4
   144  1222  3400               	retlw	0
   145  1223  34F0               	retlw	240
   146                           ;initializer for _tmp_11
   147  1224  3400               	retlw	0
   148  1225  3400               	retlw	0
   149  1226  3400               	retlw	0
   150  1227  3400               	retlw	0
   151  1228  3400               	retlw	0
   152  1229  3400               	retlw	0
   153  122A  3400               	retlw	0
   154  122B  3400               	retlw	0
   155  122C  3400               	retlw	0
   156  122D  3410               	retlw	16
   157  122E  3400               	retlw	0
   158  122F  3400               	retlw	0
   159  1230  3400               	retlw	0
   160  1231  3400               	retlw	0
   161                           
   162                           	psect	idataBANK3
   163  1232                     __pidataBANK3:
   164                           ;initializer for _kPin
   165  1232  3403               	retlw	3
   166  1233  3400               	retlw	0
   167  1234  3403               	retlw	3
   168  1235  3400               	retlw	0
   169  1236  3403               	retlw	3
   170  1237  3400               	retlw	0
   171  1238  3403               	retlw	3
   172  1239  3400               	retlw	0
   173  123A  3403               	retlw	3
   174  123B  3400               	retlw	0
   175                           ;initializer for _menu_text_main
   176  123C  34CB               	retlw	low STR_4
   177  123D  3410               	retlw	high STR_4
   178  123E  34E9               	retlw	low STR_24
   179  123F  3411               	retlw	high STR_24
   180  1240  340D               	retlw	low STR_28
   181  1241  3412               	retlw	high STR_28
   182                           ;initializer for _d7sm_buffer
   183  1242  3438               	retlw	56
   184  1243  3438               	retlw	56
   185  1244  3438               	retlw	56
   186  1245  3438               	retlw	56
   187  1246  3400               	retlw	0
   188  1247  3400               	retlw	0
   189  1248  3400               	retlw	0
   190  1249  3400               	retlw	0
   191                           
   192                           	psect	strings
   193  1000                     __pstrings:
   194  1000                     stringtab:
   195                           ;	String table - string pointers are 2 bytes each
   196  1000  00FE               	movwf	btemp& (0+127)
   197  1001  1FFE               	btfss	btemp& (0+127),7
   198  1002  2808               	goto	stringcode
   199  1003  1383               	bcf	3,7
   200  1004  187E               	btfsc	btemp& (0+127),0
   201  1005  1783               	bsf	3,7
   202  1006  0800               	movf	0,w
   203  1007  0008               	return
   204  1008                     stringcode:
   205  1008  008A               	movwf	10
   206  1009  0804               	movf	4,w
   207  100A                     stringdir:
   208  100A  0082               	movwf	2
   209  100B                     __stringbase:
   210                           
   211                           	psect	stringtext1
   212  0867                     __pstringtext1:
   213  0867                     _fsmStateTable:
   214  0867  340A               	retlw	low _s_testDisplaySetup
   215  0868  3412               	retlw	high _s_testDisplaySetup
   216  0869  34C5               	retlw	low _s_testDisplay
   217  086A  3410               	retlw	high _s_testDisplay
   218  086B  3416               	retlw	low _s_idle
   219  086C  3400               	retlw	high _s_idle
   220  086D  34BF               	retlw	low _s_rst
   221  086E  3410               	retlw	high _s_rst
   222  086F  3411               	retlw	low _s_m0_first
   223  0870  3411               	retlw	high _s_m0_first
   224  0871  349E               	retlw	low _s_m0_first_set
   225  0872  3411               	retlw	high _s_m0_first_set
   226  0873  34F9               	retlw	low _s_m0_input
   227  0874  3410               	retlw	high _s_m0_input
   228  0875  34AD               	retlw	low _s_m0_input_set
   229  0876  3411               	retlw	high _s_m0_input_set
   230  0877  3405               	retlw	low _s_m0_nMem
   231  0878  3411               	retlw	high _s_m0_nMem
   232  0879  34CB               	retlw	low _s_m0_nMem_set
   233  087A  3411               	retlw	high _s_m0_nMem_set
   234  087B  34BC               	retlw	low _s_m0_tonToff
   235  087C  3411               	retlw	high _s_m0_tonToff
   236  087D  3453               	retlw	low _s_m0_tonToff_setHoras0
   237  087E  3411               	retlw	high _s_m0_tonToff_setHoras0
   238  087F  3471               	retlw	low _s_m0_tonToff_setHoras1
   239  0880  3411               	retlw	high _s_m0_tonToff_setHoras1
   240  0881  34DA               	retlw	low _s_m0_tonToff_setMinutos0
   241  0882  3411               	retlw	high _s_m0_tonToff_setMinutos0
   242  0883  3462               	retlw	low _s_m0_tonToff_setMinutos1
   243  0884  3411               	retlw	high _s_m0_tonToff_setMinutos1
   244  0885  348F               	retlw	low _s_m0_tonToff_setSegundos0
   245  0886  3411               	retlw	high _s_m0_tonToff_setSegundos0
   246  0887  3480               	retlw	low _s_m0_tonToff_setSegundos1
   247  0888  3411               	retlw	high _s_m0_tonToff_setSegundos1
   248                           
   249                           	psect	stringtext2
   250  10B0                     __pstringtext2:
   251  10B0                     _t0DelayConstant:
   252  10B0  3408               	retlw	8
   253  10B1  3428               	retlw	40
   254  10B2  3410               	retlw	16
   255  10B3  3408               	retlw	8
   256  10B4  3401               	retlw	1
   257                           
   258                           	psect	stringtext3
   259  0016                     __pstringtext3:
   260  0016                     _s_idle:
   261  0016  3403               	retlw	3
   262  0017  3458               	retlw	(fp__a_m0_first-fpbase)& (0+255)
   263  0018  3404               	retlw	4
   264  0019  3405               	retlw	5
   265  001A  3452               	retlw	(fp__a_showHyphensOff-fpbase)& (0+255)
   266  001B  3402               	retlw	2
   267  001C  3404               	retlw	4
   268  001D  344F               	retlw	(fp__a_showHyphensOn-fpbase)& (0+255)
   269  001E  3402               	retlw	2
   270  001F  3401               	retlw	1
   271  0020  345E               	retlw	(fp__a_temporizar-fpbase)& (0+255)
   272  0021  3402               	retlw	2
   273  0022  3409               	retlw	9
   274  0023  3440               	retlw	(fp__a_showTimerIdOff-fpbase)& (0+255)
   275  0024  3402               	retlw	2
   276  0025  340A               	retlw	10
   277  0026  3443               	retlw	(fp__a_showTimerIdOn-fpbase)& (0+255)
   278  0027  3402               	retlw	2
   279  0028  340B               	retlw	11
   280  0029  3449               	retlw	(fp__a_inputActionFp-fpbase)& (0+255)
   281  002A  3402               	retlw	2
   282  002B  340C               	retlw	12
   283  002C  343A               	retlw	(fp__a_inputActionFn-fpbase)& (0+255)
   284  002D  3402               	retlw	2
   285  002E  340E               	retlw	14
   286  002F  343D               	retlw	(fp__a_input2ActionFn-fpbase)& (0+255)
   287  0030  3403               	retlw	3
   288  0031  340F               	retlw	15
   289  0032  3446               	retlw	(fp__a_showTime-fpbase)& (0+255)
   290  0033  3402               	retlw	2
   291                           
   292                           	psect	stringtext4
   293  119E                     __pstringtext4:
   294  119E                     _s_m0_first_set:
   295  119E  3407               	retlw	7
   296  119F  342B               	retlw	(fp__a_m0_first_inc-fpbase)& (0+255)
   297  11A0  3405               	retlw	5
   298  11A1  3403               	retlw	3
   299  11A2  342B               	retlw	(fp__a_m0_first_inc-fpbase)& (0+255)
   300  11A3  3405               	retlw	5
   301  11A4  3408               	retlw	8
   302  11A5  3428               	retlw	(fp__a_m0_first_save-fpbase)& (0+255)
   303  11A6  3404               	retlw	4
   304  11A7  3402               	retlw	2
   305  11A8  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   306  11A9  3402               	retlw	2
   307  11AA  340F               	retlw	15
   308  11AB  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   309  11AC  3405               	retlw	5
   310                           
   311                           	psect	stringtext5
   312  11AD                     __pstringtext5:
   313  11AD                     _s_m0_input_set:
   314  11AD  3407               	retlw	7
   315  11AE  3410               	retlw	(fp__a_m0_input_inc-fpbase)& (0+255)
   316  11AF  3407               	retlw	7
   317  11B0  3403               	retlw	3
   318  11B1  3410               	retlw	(fp__a_m0_input_inc-fpbase)& (0+255)
   319  11B2  3407               	retlw	7
   320  11B3  3408               	retlw	8
   321  11B4  3416               	retlw	(fp__a_m0_input_save-fpbase)& (0+255)
   322  11B5  3406               	retlw	6
   323  11B6  3402               	retlw	2
   324  11B7  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   325  11B8  3402               	retlw	2
   326  11B9  340F               	retlw	15
   327  11BA  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   328  11BB  3407               	retlw	7
   329                           
   330                           	psect	stringtext6
   331  11CB                     __pstringtext6:
   332  11CB                     _s_m0_nMem_set:
   333  11CB  3407               	retlw	7
   334  11CC  341F               	retlw	(fp__a_m0_nMem_inc-fpbase)& (0+255)
   335  11CD  3409               	retlw	9
   336  11CE  3403               	retlw	3
   337  11CF  341C               	retlw	(fp__a_m0_nMem_dec-fpbase)& (0+255)
   338  11D0  3409               	retlw	9
   339  11D1  3408               	retlw	8
   340  11D2  3419               	retlw	(fp__a_m0_nMem_save-fpbase)& (0+255)
   341  11D3  3408               	retlw	8
   342  11D4  3402               	retlw	2
   343  11D5  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   344  11D6  3402               	retlw	2
   345  11D7  340F               	retlw	15
   346  11D8  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   347  11D9  3409               	retlw	9
   348                           
   349                           	psect	stringtext7
   350  11BC                     __pstringtext7:
   351  11BC                     _s_m0_tonToff:
   352  11BC  3403               	retlw	3
   353  11BD  3401               	retlw	(fp__a_m0_tOnOff_showString_next-fpbase)& (0+255)
   354  11BE  340A               	retlw	10
   355  11BF  3406               	retlw	6
   356  11C0  3458               	retlw	(fp__a_m0_first-fpbase)& (0+255)
   357  11C1  3404               	retlw	4
   358  11C2  3408               	retlw	8
   359  11C3  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   360  11C4  340B               	retlw	11
   361  11C5  3402               	retlw	2
   362  11C6  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   363  11C7  3402               	retlw	2
   364  11C8  340F               	retlw	15
   365  11C9  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   366  11CA  340A               	retlw	10
   367                           
   368                           	psect	stringtext8
   369  1153                     __pstringtext8:
   370  1153                     _s_m0_tonToff_setHoras0:
   371  1153  3403               	retlw	3
   372  1154  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   373  1155  340C               	retlw	12
   374  1156  3407               	retlw	7
   375  1157  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   376  1158  340B               	retlw	11
   377  1159  3408               	retlw	8
   378  115A  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   379  115B  340A               	retlw	10
   380  115C  3402               	retlw	2
   381  115D  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   382  115E  3402               	retlw	2
   383  115F  340F               	retlw	15
   384  1160  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   385  1161  340B               	retlw	11
   386                           
   387                           	psect	stringtext9
   388  1171                     __pstringtext9:
   389  1171                     _s_m0_tonToff_setHoras1:
   390  1171  3403               	retlw	3
   391  1172  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   392  1173  340D               	retlw	13
   393  1174  3407               	retlw	7
   394  1175  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   395  1176  340C               	retlw	12
   396  1177  3408               	retlw	8
   397  1178  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   398  1179  340A               	retlw	10
   399  117A  3402               	retlw	2
   400  117B  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   401  117C  3402               	retlw	2
   402  117D  340F               	retlw	15
   403  117E  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   404  117F  340C               	retlw	12
   405                           
   406                           	psect	stringtext10
   407  11DA                     __pstringtext10:
   408  11DA                     _s_m0_tonToff_setMinutos0:
   409  11DA  3403               	retlw	3
   410  11DB  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   411  11DC  340E               	retlw	14
   412  11DD  3407               	retlw	7
   413  11DE  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   414  11DF  340D               	retlw	13
   415  11E0  3408               	retlw	8
   416  11E1  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   417  11E2  340A               	retlw	10
   418  11E3  3402               	retlw	2
   419  11E4  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   420  11E5  3402               	retlw	2
   421  11E6  340F               	retlw	15
   422  11E7  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   423  11E8  340D               	retlw	13
   424                           
   425                           	psect	stringtext11
   426  1162                     __pstringtext11:
   427  1162                     _s_m0_tonToff_setMinutos1:
   428  1162  3403               	retlw	3
   429  1163  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   430  1164  340F               	retlw	15
   431  1165  3407               	retlw	7
   432  1166  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   433  1167  340E               	retlw	14
   434  1168  3408               	retlw	8
   435  1169  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   436  116A  340A               	retlw	10
   437  116B  3402               	retlw	2
   438  116C  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   439  116D  3402               	retlw	2
   440  116E  340F               	retlw	15
   441  116F  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   442  1170  340E               	retlw	14
   443                           
   444                           	psect	stringtext12
   445  118F                     __pstringtext12:
   446  118F                     _s_m0_tonToff_setSegundos0:
   447  118F  3403               	retlw	3
   448  1190  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   449  1191  3410               	retlw	16
   450  1192  3407               	retlw	7
   451  1193  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   452  1194  340F               	retlw	15
   453  1195  3408               	retlw	8
   454  1196  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   455  1197  340A               	retlw	10
   456  1198  3402               	retlw	2
   457  1199  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   458  119A  3402               	retlw	2
   459  119B  340F               	retlw	15
   460  119C  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   461  119D  340F               	retlw	15
   462                           
   463                           	psect	stringtext13
   464  1180                     __pstringtext13:
   465  1180                     _s_m0_tonToff_setSegundos1:
   466  1180  3403               	retlw	3
   467  1181  3407               	retlw	(fp__a_m0_tOnOff_set-fpbase)& (0+255)
   468  1182  340B               	retlw	11
   469  1183  3407               	retlw	7
   470  1184  340A               	retlw	(fp__a_m0_tOnOff_inc-fpbase)& (0+255)
   471  1185  3410               	retlw	16
   472  1186  3408               	retlw	8
   473  1187  3404               	retlw	(fp__a_m0_tOnOff_save-fpbase)& (0+255)
   474  1188  340A               	retlw	10
   475  1189  3402               	retlw	2
   476  118A  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   477  118B  3402               	retlw	2
   478  118C  340F               	retlw	15
   479  118D  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   480  118E  3410               	retlw	16
   481                           
   482                           	psect	stringtext14
   483  1111                     __pstringtext14:
   484  1111                     _s_m0_first:
   485  1111  3403               	retlw	3
   486  1112  3431               	retlw	(fp__a_m0_input-fpbase)& (0+255)
   487  1113  3406               	retlw	6
   488  1114  3408               	retlw	8
   489  1115  3425               	retlw	(fp__a_m0_first_set-fpbase)& (0+255)
   490  1116  3405               	retlw	5
   491  1117  3402               	retlw	2
   492  1118  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   493  1119  3402               	retlw	2
   494  111A  340F               	retlw	15
   495  111B  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   496  111C  3404               	retlw	4
   497                           
   498                           	psect	stringtext15
   499  10F9                     __pstringtext15:
   500  10F9                     _s_m0_input:
   501  10F9  3403               	retlw	3
   502  10FA  3437               	retlw	(fp__a_m0_nMem-fpbase)& (0+255)
   503  10FB  3408               	retlw	8
   504  10FC  3408               	retlw	8
   505  10FD  3434               	retlw	(fp__a_m0_input_set-fpbase)& (0+255)
   506  10FE  3407               	retlw	7
   507  10FF  3402               	retlw	2
   508  1100  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   509  1101  3402               	retlw	2
   510  1102  340F               	retlw	15
   511  1103  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   512  1104  3406               	retlw	6
   513                           
   514                           	psect	stringtext16
   515  1105                     __pstringtext16:
   516  1105                     _s_m0_nMem:
   517  1105  3403               	retlw	3
   518  1106  340D               	retlw	(fp__a_m0_tOnOff_entrance-fpbase)& (0+255)
   519  1107  340A               	retlw	10
   520  1108  3408               	retlw	8
   521  1109  3413               	retlw	(fp__a_m0_nMem_set-fpbase)& (0+255)
   522  110A  3409               	retlw	9
   523  110B  3402               	retlw	2
   524  110C  3422               	retlw	(fp__a_m0_return-fpbase)& (0+255)
   525  110D  3402               	retlw	2
   526  110E  340F               	retlw	15
   527  110F  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   528  1110  3408               	retlw	8
   529                           
   530                           	psect	stringtext17
   531  10BF                     __pstringtext17:
   532  10BF                     _s_rst:
   533  10BF  340D               	retlw	13
   534  10C0  342E               	retlw	(fp__a_input2ActionFp-fpbase)& (0+255)
   535  10C1  3402               	retlw	2
   536  10C2  340F               	retlw	15
   537  10C3  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   538  10C4  3403               	retlw	3
   539                           
   540                           	psect	stringtext18
   541  10C5                     __pstringtext18:
   542  10C5                     _s_testDisplay:
   543  10C5  3400               	retlw	0
   544  10C6  3455               	retlw	(fp__a_initializeDevice-fpbase)& (0+255)
   545  10C7  3402               	retlw	2
   546  10C8  340F               	retlw	15
   547  10C9  344C               	retlw	(fp__a_doNothing-fpbase)& (0+255)
   548  10CA  3401               	retlw	1
   549                           
   550                           	psect	stringtext19
   551  120A                     __pstringtext19:
   552  120A                     _s_testDisplaySetup:
   553  120A  340F               	retlw	15
   554  120B  345B               	retlw	(fp__a_testDisplaySetup-fpbase)& (0+255)
   555  120C  3401               	retlw	1
   556  120D                     STR_28:
   557  120D  3443               	retlw	67	;'C'
   558  120E  3441               	retlw	65	;'A'
   559  120F  344E               	retlw	78	;'N'
   560  1210  3474               	retlw	116	;'t'
   561  1211  3449               	retlw	73	;'I'
   562  1212  3464               	retlw	100	;'d'
   563  1213  3441               	retlw	65	;'A'
   564  1214  3464               	retlw	100	;'d'
   565  1215  3420               	retlw	32	;' '
   566  1216  3474               	retlw	116	;'t'
   567  1217  3449               	retlw	73	;'I'
   568  1218  3445               	retlw	69	;'E'
   569  1219  344D               	retlw	77	;'M'
   570  121A  3450               	retlw	80	;'P'
   571  121B  344F               	retlw	79	;'O'
   572  121C  3453               	retlw	83	;'S'
   573  121D  3400               	retlw	0
   574                           
   575                           	psect	stringtext20
   576  11E9                     __pstringtext20:
   577  11E9                     STR_24:
   578  11E9  3446               	retlw	70	;'F'
   579  11EA  3455               	retlw	85	;'U'
   580  11EB  344E               	retlw	78	;'N'
   581  11EC  3443               	retlw	67	;'C'
   582  11ED  3449               	retlw	73	;'I'
   583  11EE  344F               	retlw	79	;'O'
   584  11EF  344E               	retlw	78	;'N'
   585  11F0  3420               	retlw	32	;' '
   586  11F1  3445               	retlw	69	;'E'
   587  11F2  344E               	retlw	78	;'N'
   588  11F3  3474               	retlw	116	;'t'
   589  11F4  3452               	retlw	82	;'R'
   590  11F5  3441               	retlw	65	;'A'
   591  11F6  3464               	retlw	100	;'d'
   592  11F7  3441               	retlw	65	;'A'
   593  11F8  3400               	retlw	0
   594                           
   595                           	psect	stringtext21
   596  111D                     __pstringtext21:
   597  111D                     STR_12:
   598  111D  3464               	retlw	100	;'d'
   599  111E  3445               	retlw	69	;'E'
   600  111F  3453               	retlw	83	;'S'
   601  1120  3448               	retlw	72	;'H'
   602  1121  3441               	retlw	65	;'A'
   603  1122  3462               	retlw	98	;'b'
   604  1123  3449               	retlw	73	;'I'
   605  1124  344C               	retlw	76	;'L'
   606  1125  3449               	retlw	73	;'I'
   607  1126  3474               	retlw	116	;'t'
   608  1127  3441               	retlw	65	;'A'
   609  1128  3400               	retlw	0
   610                           
   611                           	psect	stringtext22
   612  10EF                     __pstringtext22:
   613  10EF                     STR_11:
   614  10EF  3450               	retlw	80	;'P'
   615  10F0  3441               	retlw	65	;'A'
   616  10F1  3455               	retlw	85	;'U'
   617  10F2  3453               	retlw	83	;'S'
   618  10F3  3445               	retlw	69	;'E'
   619  10F4  3420               	retlw	32	;' '
   620  10F5  344F               	retlw	79	;'O'
   621  10F6  3446               	retlw	70	;'F'
   622  10F7  3446               	retlw	70	;'F'
   623  10F8  3400               	retlw	0
   624                           
   625                           	psect	stringtext23
   626  10E6                     __pstringtext23:
   627  10E6                     STR_10:
   628  10E6  3450               	retlw	80	;'P'
   629  10E7  3441               	retlw	65	;'A'
   630  10E8  3455               	retlw	85	;'U'
   631  10E9  3453               	retlw	83	;'S'
   632  10EA  3445               	retlw	69	;'E'
   633  10EB  3420               	retlw	32	;' '
   634  10EC  344F               	retlw	79	;'O'
   635  10ED  344E               	retlw	78	;'N'
   636  10EE  3400               	retlw	0
   637                           
   638                           	psect	stringtext24
   639  10D7                     __pstringtext24:
   640  10D7                     STR_13:
   641  10D7  3446               	retlw	70	;'F'
   642  10D8  3455               	retlw	85	;'U'
   643  10D9  3445               	retlw	69	;'E'
   644  10DA  3452               	retlw	82	;'R'
   645  10DB  345A               	retlw	90	;'Z'
   646  10DC  3441               	retlw	65	;'A'
   647  10DD  3400               	retlw	0
   648                           
   649                           	psect	stringtext25
   650  10CB                     __pstringtext25:
   651  10CB                     STR_4:
   652  10CB  3446               	retlw	70	;'F'
   653  10CC  3449               	retlw	73	;'I'
   654  10CD  3452               	retlw	82	;'R'
   655  10CE  3453               	retlw	83	;'S'
   656  10CF  3474               	retlw	116	;'t'
   657  10D0  3400               	retlw	0
   658                           
   659                           	psect	stringtext26
   660  10BA                     __pstringtext26:
   661  10BA                     STR_9:
   662  10BA  344E               	retlw	78	;'N'
   663  10BB  3441               	retlw	65	;'A'
   664  10BC  3464               	retlw	100	;'d'
   665  10BD  3441               	retlw	65	;'A'
   666  10BE  3400               	retlw	0
   667                           
   668                           	psect	stringtext27
   669  10A9                     __pstringtext27:
   670  10A9                     STR_17:
   671  10A9  3420               	retlw	32	;' '
   672  10AA  3468               	retlw	104	;'h'
   673  10AB  3400               	retlw	0
   674                           
   675                           	psect	stringtext28
   676  10A3                     __pstringtext28:
   677  10A3                     STR_18:
   678  10A3  3420               	retlw	32	;' '
   679  10A4  346D               	retlw	109	;'m'
   680  10A5  3400               	retlw	0
   681                           
   682                           	psect	stringtext29
   683  10A6                     __pstringtext29:
   684  10A6                     STR_19:
   685  10A6  3420               	retlw	32	;' '
   686  10A7  3473               	retlw	115	;'s'
   687  10A8  3400               	retlw	0
   688                           
   689                           	psect	stringtext30
   690  0015                     __pstringtext30:
   691  11E9                     
   692                           	psect	cinit
   693  12FC                     start_initialization:
   694                           ; Clear objects allocated to COMMON
   695  12FC  01F8               	clrf	__pbssCOMMON& (0+127)
   696  12FD  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   697  12FE  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   698                           ; Clear objects allocated to BANK0
   699  12FF  1383               	bcf	3,7	;select IRP bank0
   700  1300  3052               	movlw	low __pbssBANK0
   701  1301  0084               	movwf	4
   702  1302  3064               	movlw	low (__pbssBANK0+18)
   703  1303  160A  118A  20DE   	fcall	clear_ram
   704                           ; Clear objects allocated to BANK3
   705  1306  1683               	bsf	3,5	;RP0=1, select bank3
   706  1307  1703               	bsf	3,6	;RP1=1, select bank3
   707  1308  01C3               	clrf	__pbssBANK3& (0+127)
   708  1309  01C4               	clrf	(__pbssBANK3+1)& (0+127)
   709  130A  01C5               	clrf	(__pbssBANK3+2)& (0+127)
   710  130B  01C6               	clrf	(__pbssBANK3+3)& (0+127)
   711  130C  01C7               	clrf	(__pbssBANK3+4)& (0+127)
   712  130D  01C8               	clrf	(__pbssBANK3+5)& (0+127)
   713                           ; Initialize objects allocated to BANK0
   714  130E  3052               	movlw	low (__pdataBANK0+20)
   715  130F  00FD               	movwf	btemp+-1
   716  1310  3012               	movlw	high __pidataBANK0
   717  1311  00FE               	movwf	btemp
   718  1312  301E               	movlw	low __pidataBANK0
   719  1313  00FF               	movwf	btemp+1
   720  1314  303E               	movlw	low __pdataBANK0
   721  1315  0084               	movwf	4
   722  1316  160A  118A  21FD   	fcall	init_ram
   723                           ; Initialize objects allocated to BANK3
   724  1319  1783               	bsf	3,7	;select IRP bank2
   725  131A  30C3               	movlw	low (__pdataBANK3+24)
   726  131B  00FD               	movwf	btemp+-1
   727  131C  3012               	movlw	high __pidataBANK3
   728  131D  00FE               	movwf	btemp
   729  131E  3032               	movlw	low __pidataBANK3
   730  131F  00FF               	movwf	btemp+1
   731  1320  30AB               	movlw	low __pdataBANK3
   732  1321  0084               	movwf	4
   733  1322  160A  118A  21FD   	fcall	init_ram
      +       160A  118A         
   734  1327                     end_of_initialization:	;End of C runtime variable initationation code
   735  1327  0183               	clrf	3
   736  1328  120A  118A  2834   	ljmp	_main	;jump to C main() function
   737                           
   738                           	psect	bssCOMMON
   739  0078                     __pbssCOMMON:
   740  0078                     _bitTitila:
   741  0078                     	ds	1
   742  0079                     _estadoFsm:
   743  0079                     	ds	1
   744  007A                     _kPinBuffer:
   745  007A                     	ds	1
   746                           
   747                           	psect	bssBANK0
   748  0052                     __pbssBANK0:
   749  0052                     _t0Mem:
   750  0052                     	ds	10
   751  005C                     _t1Mem:
   752  005C                     	ds	8
   753                           
   754                           	psect	dataBANK0
   755  003E                     __pdataBANK0:
   756  003E                     _disp:
   757  003E                     	ds	6
   758  0044                     _tmp_11:
   759  0044                     	ds	14
   760                           
   761                           	psect	bssBANK3
   762  01C3                     __pbssBANK3:
   763  01C3                     _t1DelayConstant:
   764  01C3                     	ds	6
   765                           
   766                           	psect	dataBANK3
   767  01AB                     __pdataBANK3:
   768  01AB                     _kPin:
   769  01AB                     	ds	10
   770  01B5                     _menu_text_main:
   771  01B5                     	ds	6
   772  01BB                     _d7sm_buffer:
   773  01BB                     	ds	8
   774                           
   775                           	psect	clrtext
   776  10DE                     clear_ram:	;	Called with FSR containing the base address, and
   777                           ;	W with the last address+1
   778  10DE  0064               	clrwdt	;clear the watchdog before getting into this loop
   779  10DF                     clrloop:
   780  10DF  0180               	clrf	0	;clear RAM location pointed to by FSR
   781  10E0  0A84               	incf	4,f	;increment pointer
   782  10E1  0604               	xorwf	4,w	;XOR with final address
   783  10E2  1903               	btfsc	3,2	;have we reached the end yet?
   784  10E3  3400               	retlw	0	;all done for this memory range, return
   785  10E4  0604               	xorwf	4,w	;XOR again to restore value
   786  10E5  28DF               	goto	clrloop	;do the next byte
   787                           
   788                           	psect	inittext
   789  11F9                     init_fetch:	;	Called with low address in FSR and high address in W
   790  11F9  087E               	movf	126,w
   791  11FA  008A               	movwf	10
   792  11FB  087F               	movf	127,w
   793  11FC  0082               	movwf	2
   794  11FD                     init_ram:	;Called with:
   795                           ;	high address of idata address in btemp 
   796                           ;	low address of idata address in btemp+1 
   797                           ;	low address of data in FSR
   798                           ;	high address + 1 of data in btemp-1
   799  11FD  21F9  160A  118A   	fcall	init_fetch
   800  1200  0080               	movwf	0
   801  1201  0A84               	incf	4,f
   802  1202  0804               	movf	4,w
   803  1203  067D               	xorwf	125,w
   804  1204  1903               	btfsc	3,2
   805  1205  3400               	retlw	0
   806  1206  0AFF               	incf	127,f
   807  1207  1903               	btfsc	3,2
   808  1208  0AFE               	incf	126,f
   809  1209  29FD               	goto	init_ram
   810                           
   811                           	psect	cstackBANK3
   812  0190                     __pcstackBANK3:
   813  0190                     main@event:
   814                           ; 1 bytes @ 0x0
   815  0190                     	ds	1
   816  0191                     _main$2360:
   817                           ; 2 bytes @ 0x1
   818  0191                     	ds	2
   819  0193                     main@ix2Trans:
   820                           ; 1 bytes @ 0x3
   821  0193                     	ds	1
   822  0194                     ??_kPin_driverDc:
   823  0194                     ??_d7sm_char2pins:	;@ 0x4
   824  0194                     ??_t0Driver:	;@ 0x4
   825  0194                     ??i1___wmul:	;@ 0x4
   826  0194                     d7sm_char2pins@c:	;@ 0x4
   827  0194                     kPin_driverDc@pi:	; 1 bytes @ 0x4
   828  0194                     i1___wmul@product:	; 1 bytes @ 0x4
   829                           ; 2 bytes @ 0x4
   830  0194                     	ds	1
   831  0195                     ?_d7sm_char2pins:
   832  0195                     ?_kPin_driverDc:	;@ 0x5
   833  0195                     t0Driver@i:	;@ 0x5
   834  0195                     kPin_driverDc@kCurrLogState:	; 1 bytes @ 0x5
   835                           ; 1 bytes @ 0x5
   836  0195                     	ds	1
   837  0196                     ?_t0Driver:
   838  0196                     ?i1___wmul:	;@ 0x6
   839  0196                     i1___wmul@multiplier:	;@ 0x6
   840                           ; 2 bytes @ 0x6
   841  0196                     	ds	2
   842  0198                     i1___wmul@multiplicand:
   843                           ; 2 bytes @ 0x8
   844  0198                     	ds	2
   845  019A                     ??_t1Driver:
   846                           ;@ 0xA
   847  019A                     	ds	5
   848  019F                     t1Driver@i:
   849                           ; 1 bytes @ 0xF
   850  019F                     	ds	1
   851  01A0                     ??_isr:
   852  01A0                     ?_t1Driver:	;@ 0x10
   853                           ;@ 0x10
   854  01A0                     	ds	9
   855  01A9                     _isr$883:
   856                           ; 2 bytes @ 0x19
   857  01A9                     	ds	2
   858  01AB                     ?_isr:
   859                           
   860                           	psect	cstackBANK1
   861  00A0                     __pcstackBANK1:	;@ 0x1B
   862  00A0                     _fsmGetEvent$1710:
   863  00A0                     a_m0_tOnOff_inc@num:	; 2 bytes @ 0x0
   864                           ; 4 bytes @ 0x0
   865  00A0                     	ds	2
   866  00A2                     _fsmGetEvent$1709:
   867                           ; 2 bytes @ 0x2
   868  00A2                     	ds	2
   869  00A4                     a_m0_tOnOff_inc@titila:
   870  00A4                     _fsmGetEvent$1712:	; 1 bytes @ 0x4
   871                           ; 2 bytes @ 0x4
   872  00A4                     	ds	1
   873  00A5                     a_m0_tOnOff_inc@p2s:
   874                           ; 2 bytes @ 0x5
   875  00A5                     	ds	1
   876  00A6                     _fsmGetEvent$1711:
   877                           ; 2 bytes @ 0x6
   878  00A6                     	ds	1
   879  00A7                     a_m0_tOnOff_inc@hh:
   880                           ; 1 bytes @ 0x7
   881  00A7                     	ds	1
   882  00A8                     a_m0_tOnOff_inc@mm:
   883  00A8                     _fsmGetEvent$1708:	; 1 bytes @ 0x8
   884                           ; 2 bytes @ 0x8
   885  00A8                     	ds	1
   886  00A9                     a_m0_tOnOff_inc@ss:
   887                           ; 1 bytes @ 0x9
   888  00A9                     	ds	1
   889  00AA                     _fsmGetEvent$1705:
   890                           ; 2 bytes @ 0xA
   891  00AA                     	ds	2
   892  00AC                     _fsmGetEvent$1704:
   893                           ; 2 bytes @ 0xC
   894  00AC                     	ds	2
   895  00AE                     _fsmGetEvent$1707:
   896                           ; 2 bytes @ 0xE
   897  00AE                     	ds	2
   898  00B0                     _fsmGetEvent$1706:
   899                           ; 2 bytes @ 0x10
   900  00B0                     	ds	2
   901  00B2                     _fsmGetEvent$1713:
   902                           ; 2 bytes @ 0x12
   903  00B2                     	ds	2
   904  00B4                     _fsmGetEvent$1720:
   905                           ; 2 bytes @ 0x14
   906  00B4                     	ds	2
   907  00B6                     _fsmGetEvent$1719:
   908                           ; 2 bytes @ 0x16
   909  00B6                     	ds	2
   910  00B8                     _fsmGetEvent$1722:
   911                           ; 2 bytes @ 0x18
   912  00B8                     	ds	2
   913  00BA                     _fsmGetEvent$1721:
   914                           ; 2 bytes @ 0x1A
   915  00BA                     	ds	2
   916  00BC                     _fsmGetEvent$1718:
   917                           ; 2 bytes @ 0x1C
   918  00BC                     	ds	2
   919  00BE                     _fsmGetEvent$1715:
   920                           ; 2 bytes @ 0x1E
   921  00BE                     	ds	2
   922  00C0                     _fsmGetEvent$1714:
   923                           ; 2 bytes @ 0x20
   924  00C0                     	ds	2
   925  00C2                     _fsmGetEvent$1717:
   926                           ; 2 bytes @ 0x22
   927  00C2                     	ds	2
   928  00C4                     _fsmGetEvent$1716:
   929                           ; 2 bytes @ 0x24
   930  00C4                     	ds	2
   931  00C6                     _fsmGetEvent$1703:
   932                           ; 2 bytes @ 0x26
   933  00C6                     	ds	2
   934  00C8                     _fsmGetEvent$1691:
   935                           ; 2 bytes @ 0x28
   936  00C8                     	ds	2
   937  00CA                     _fsmGetEvent$1690:
   938                           ; 2 bytes @ 0x2A
   939  00CA                     	ds	2
   940  00CC                     _fsmGetEvent$1693:
   941                           ; 2 bytes @ 0x2C
   942  00CC                     	ds	2
   943  00CE                     _fsmGetEvent$1692:
   944                           ; 2 bytes @ 0x2E
   945  00CE                     	ds	2
   946  00D0                     _fsmGetEvent$1685:
   947                           ; 2 bytes @ 0x30
   948  00D0                     	ds	2
   949  00D2                     _fsmGetEvent$1682:
   950                           ; 2 bytes @ 0x32
   951  00D2                     	ds	2
   952  00D4                     _fsmGetEvent$1681:
   953                           ; 2 bytes @ 0x34
   954  00D4                     	ds	2
   955  00D6                     _fsmGetEvent$1684:
   956                           ; 2 bytes @ 0x36
   957  00D6                     	ds	2
   958  00D8                     _fsmGetEvent$1683:
   959                           ; 2 bytes @ 0x38
   960  00D8                     	ds	2
   961  00DA                     _fsmGetEvent$1700:
   962                           ; 2 bytes @ 0x3A
   963  00DA                     	ds	2
   964  00DC                     _fsmGetEvent$1699:
   965                           ; 2 bytes @ 0x3C
   966  00DC                     	ds	2
   967  00DE                     _fsmGetEvent$1702:
   968                           ; 2 bytes @ 0x3E
   969  00DE                     	ds	2
   970  00E0                     _fsmGetEvent$1701:
   971                           ; 2 bytes @ 0x40
   972  00E0                     	ds	2
   973  00E2                     _fsmGetEvent$1698:
   974                           ; 2 bytes @ 0x42
   975  00E2                     	ds	2
   976  00E4                     _fsmGetEvent$1695:
   977                           ; 2 bytes @ 0x44
   978  00E4                     	ds	2
   979  00E6                     _fsmGetEvent$1694:
   980                           ; 2 bytes @ 0x46
   981  00E6                     	ds	2
   982  00E8                     _fsmGetEvent$1697:
   983                           ; 2 bytes @ 0x48
   984  00E8                     	ds	2
   985  00EA                     _fsmGetEvent$1696:
   986                           ; 2 bytes @ 0x4A
   987  00EA                     	ds	2
   988  00EC                     fsmGetEvent@event:
   989                           ; 1 bytes @ 0x4C
   990  00EC                     	ds	1
   991                           
   992                           	psect	cstackCOMMON
   993  0071                     __pcstackCOMMON:
   994  0071                     ??_eeprom_read:
   995  0071                     ??_a_m0_nMem:	;@ 0x0
   996  0071                     ??_a_m0_input_set:	;@ 0x0
   997  0071                     ??_driver_ledSet:	;@ 0x0
   998  0071                     ??_a_m0_first_set:	;@ 0x0
   999  0071                     ??_a_m0_input:	;@ 0x0
  1000  0071                     ?_driver_ledSet:	;@ 0x0
  1001  0071                     ??_fsmGetEvent:	;@ 0x0
  1002  0071                     ?_a_testDisplaySetup:	;@ 0x0
  1003  0071                     ??___lbdiv:	;@ 0x0
  1004  0071                     ??___tmul:	;@ 0x0
  1005  0071                     ??_a_m0_first:	;@ 0x0
  1006  0071                     ??___atdiv:	;@ 0x0
  1007  0071                     ??_eeprom_write:	;@ 0x0
  1008  0071                     ??___awdiv:	;@ 0x0
  1009  0071                     ??___lbmod:	;@ 0x0
  1010  0071                     ??___wmul:	;@ 0x0
  1011  0071                     ??___atmod:	;@ 0x0
  1012  0071                     ??_d7sm_puts_scroll:	;@ 0x0
  1013  0071                     ??_a_input2ActionFn:	;@ 0x0
  1014  0071                     ??_a_input2ActionFp:	;@ 0x0
  1015  0071                     ??_a_inputActionFn:	;@ 0x0
  1016  0071                     ??_a_m0_return:	;@ 0x0
  1017  0071                     ??_a_doNothing:	;@ 0x0
  1018  0071                     ??_a_m0_first_inc:	;@ 0x0
  1019  0071                     ??_a_testDisplaySetup:	;@ 0x0
  1020  0071                     ??_a_showHyphensOn:	;@ 0x0
  1021  0071                     ??_a_inputActionFp:	;@ 0x0
  1022  0071                     ??_systemInit:	;@ 0x0
  1023  0071                     ??_a_m0_first_save:	;@ 0x0
  1024  0071                     ?_systemInit:	;@ 0x0
  1025  0071                     ??_a_m0_input_save:	;@ 0x0
  1026  0071                     ??_a_m0_input_inc:	;@ 0x0
  1027  0071                     ??_a_m0_nMem_save:	;@ 0x0
  1028  0071                     ??_a_showTimerIdOff:	;@ 0x0
  1029  0071                     ??_a_showHyphensOff:	;@ 0x0
  1030  0071                     ??___awmod:	;@ 0x0
  1031  0071                     ___lbdiv@dividend:	;@ 0x0
  1032  0071                     ___atmod@sign:	; 1 bytes @ 0x0
  1033  0071                     ___awmod@sign:	; 1 bytes @ 0x0
  1034  0071                     ___wmul@product:	; 1 bytes @ 0x0
  1035  0071                     ___tmul@product:	; 2 bytes @ 0x0
  1036                           ; 3 bytes @ 0x0
  1037  0071                     	ds	1
  1038  0072                     ??_a_m0_nMem_dec:
  1039  0072                     ??_a_showTimerIdOn:	;@ 0x1
  1040  0072                     ??_a_m0_nMem_set:	;@ 0x1
  1041  0072                     ??_d7sm_set_88xx:	;@ 0x1
  1042  0072                     ??_ucharToStr:	;@ 0x1
  1043  0072                     ??_a_m0_tOnOff_showString:	;@ 0x1
  1044  0072                     ??_a_m0_nMem_inc:	;@ 0x1
  1045  0072                     ___lbdiv@counter:	;@ 0x1
  1046  0072                     ___awmod@counter:	; 1 bytes @ 0x1
  1047  0072                     ___atmod@counter:	; 1 bytes @ 0x1
  1048                           ; 1 bytes @ 0x1
  1049  0072                     	ds	1
  1050  0073                     ??_a_initializeDevice:
  1051  0073                     ?_eeprom_read:	;@ 0x2
  1052  0073                     ?_fsmGetEvent:	;@ 0x2
  1053  0073                     ___lbdiv@quotient:	;@ 0x2
  1054                           ; 1 bytes @ 0x2
  1055  0073                     	ds	1
  1056  0074                     ??_a_m0_tOnOff_showString_next:
  1057  0074                     ??_a_m0_tOnOff_save:	;@ 0x3
  1058  0074                     ??_a_m0_tOnOff_entrance:	;@ 0x3
  1059                           ;@ 0x3
  1060  0074                     	ds	4
  1061                           
  1062                           	psect	cstackBANK0
  1063  0020                     __pcstackBANK0:
  1064  0020                     ?___lbdiv:
  1065  0020                     eeprom_read@addr:	;@ 0x0
  1066  0020                     ?___wmul:	; 1 bytes @ 0x0
  1067  0020                     d7sm_puts_scroll@stringStrlen:	;@ 0x0
  1068  0020                     eeprom_write@addr:	; 1 bytes @ 0x0
  1069  0020                     ?___awmod:	; 1 bytes @ 0x0
  1070  0020                     ___awmod@dividend:	;@ 0x0
  1071  0020                     ?___tmul:	; 2 bytes @ 0x0
  1072  0020                     ?___atmod:	;@ 0x0
  1073  0020                     ___awdiv@counter:	;@ 0x0
  1074  0020                     ___lbmod@dividend:	; 1 bytes @ 0x0
  1075  0020                     ___lbdiv@divisor:	; 1 bytes @ 0x0
  1076  0020                     ___wmul@multiplier:	; 1 bytes @ 0x0
  1077  0020                     ___atmod@dividend:	; 2 bytes @ 0x0
  1078  0020                     ___tmul@multiplier:	; 3 bytes @ 0x0
  1079                           ; 3 bytes @ 0x0
  1080  0020                     	ds	1
  1081  0021                     ?_eeprom_write:
  1082  0021                     ___lbmod@counter:	;@ 0x1
  1083  0021                     eeprom_write@value:	; 1 bytes @ 0x1
  1084  0021                     ___awdiv@sign:	; 1 bytes @ 0x1
  1085  0021                     d7sm_puts_scroll@s:	; 1 bytes @ 0x1
  1086                           ; 2 bytes @ 0x1
  1087  0021                     	ds	1
  1088  0022                     ___lbmod@rem:
  1089  0022                     ___wmul@multiplicand:	; 1 bytes @ 0x2
  1090  0022                     ___awdiv@quotient:	; 2 bytes @ 0x2
  1091  0022                     ___awmod@divisor:	; 2 bytes @ 0x2
  1092                           ; 2 bytes @ 0x2
  1093  0022                     	ds	1
  1094  0023                     ?_d7sm_puts_scroll:
  1095  0023                     ?___lbmod:	;@ 0x3
  1096  0023                     ___lbmod@divisor:	;@ 0x3
  1097  0023                     d7sm_puts_scroll@string:	; 1 bytes @ 0x3
  1098  0023                     ___tmul@multiplicand:	; 2 bytes @ 0x3
  1099  0023                     ___atmod@divisor:	; 3 bytes @ 0x3
  1100                           ; 3 bytes @ 0x3
  1101  0023                     	ds	1
  1102  0024                     ??_a_temporizar:
  1103  0024                     ?___awdiv:	;@ 0x4
  1104  0024                     ___awdiv@dividend:	;@ 0x4
  1105                           ; 2 bytes @ 0x4
  1106  0024                     	ds	2
  1107  0026                     ___atdiv@counter:
  1108  0026                     ___awdiv@divisor:	; 1 bytes @ 0x6
  1109                           ; 2 bytes @ 0x6
  1110  0026                     	ds	1
  1111  0027                     ___atdiv@sign:
  1112                           ; 1 bytes @ 0x7
  1113  0027                     	ds	1
  1114  0028                     ucharToStr@i:
  1115  0028                     a_m0_nMem_set@str:	; 1 bytes @ 0x8
  1116  0028                     a_m0_tOnOff_showString@s:	; 1 bytes @ 0x8
  1117  0028                     a_showTimerIdOn@s:	; 1 bytes @ 0x8
  1118  0028                     d7sm_set_88xx@nTitila:	; 1 bytes @ 0x8
  1119  0028                     ___atdiv@quotient:	; 1 bytes @ 0x8
  1120                           ; 3 bytes @ 0x8
  1121  0028                     	ds	1
  1122  0029                     d7sm_set_88xx@str:
  1123  0029                     a_m0_tOnOff_showString@s_1778:	; 1 bytes @ 0x9
  1124  0029                     a_m0_nMem_set@s:	; 1 bytes @ 0x9
  1125  0029                     ucharToStr@num:	; 1 bytes @ 0x9
  1126  0029                     a_showTimerIdOn@s_1738:	; 1 bytes @ 0x9
  1127                           ; 1 bytes @ 0x9
  1128  0029                     	ds	1
  1129  002A                     ?_ucharToStr:
  1130  002A                     d7sm_set_88xx@s:	;@ 0xA
  1131  002A                     a_showTimerIdOn@i_1736:	; 1 bytes @ 0xA
  1132  002A                     a_m0_nMem_set@n:	; 1 bytes @ 0xA
  1133  002A                     a_m0_tOnOff_showString@n_1777:	; 1 bytes @ 0xA
  1134  002A                     ucharToStr@p2str:	; 1 bytes @ 0xA
  1135                           ; 1 bytes @ 0xA
  1136  002A                     	ds	1
  1137  002B                     ?___atdiv:
  1138  002B                     a_showTimerIdOn@n_1737:	;@ 0xB
  1139  002B                     d7sm_set_88xx@i_2805:	; 1 bytes @ 0xB
  1140  002B                     ucharToStr@strLen:	; 1 bytes @ 0xB
  1141  002B                     a_m0_nMem_set@i:	; 1 bytes @ 0xB
  1142  002B                     a_m0_tOnOff_showString@i:	; 1 bytes @ 0xB
  1143  002B                     ___atdiv@dividend:	; 1 bytes @ 0xB
  1144                           ; 3 bytes @ 0xB
  1145  002B                     	ds	1
  1146  002C                     a_showTimerIdOn@n:
  1147  002C                     d7sm_set_88xx@n:	; 1 bytes @ 0xC
  1148  002C                     a_m0_tOnOff_showString@n:	; 1 bytes @ 0xC
  1149                           ; 1 bytes @ 0xC
  1150  002C                     	ds	1
  1151  002D                     ?_d7sm_set_88xx:
  1152  002D                     a_showTimerIdOn@i:	;@ 0xD
  1153  002D                     a_m0_tOnOff_showString@i_1776:	; 1 bytes @ 0xD
  1154  002D                     d7sm_set_88xx@number:	; 1 bytes @ 0xD
  1155                           ; 1 bytes @ 0xD
  1156  002D                     	ds	1
  1157  002E                     ?_a_m0_tOnOff_showString:
  1158  002E                     a_showTimerIdOn@id:	;@ 0xE
  1159  002E                     d7sm_set_88xx@unitText:	; 1 bytes @ 0xE
  1160  002E                     ___atdiv@divisor:	; 2 bytes @ 0xE
  1161                           ; 3 bytes @ 0xE
  1162  002E                     	ds	3
  1163  0031                     ??_a_m0_tOnOff_set:
  1164  0031                     ??_a_m0_tOnOff_inc:	;@ 0x11
  1165  0031                     ??_a_showTime:	;@ 0x11
  1166                           ;@ 0x11
  1167  0031                     	ds	3
  1168  0034                     a_m0_tOnOff_set@titila:
  1169  0034                     _a_showTime$4234:	; 1 bytes @ 0x14
  1170                           ; 3 bytes @ 0x14
  1171  0034                     	ds	1
  1172  0035                     a_m0_tOnOff_set@p2s:
  1173                           ; 2 bytes @ 0x15
  1174  0035                     	ds	2
  1175  0037                     a_m0_tOnOff_set@num:
  1176  0037                     a_showTime@ss:	; 1 bytes @ 0x17
  1177                           ; 1 bytes @ 0x17
  1178  0037                     	ds	1
  1179  0038                     a_showTime@mm:
  1180                           ; 1 bytes @ 0x18
  1181  0038                     	ds	1
  1182  0039                     a_showTime@hh:
  1183                           ; 1 bytes @ 0x19
  1184  0039                     	ds	1
  1185  003A                     ??_main:
  1186                           ;@ 0x1A
  1187  003A                     	ds	4
  1188  003E                     ?_main:
  1189                           
  1190                           	psect	maintext
  1191  0034                     __pmaintext:	;@ 0x1E
  1192                           ;Data sizes: Strings 91, constant 270, data 44, bss 27, persistent 0 stack 0
  1193                           ;Auto spaces:   Size  Autos    Used
  1194                           ; COMMON          13      7      10
  1195                           ; BANK0           80     30      68
  1196                           ; BANK1           80     77      77
  1197                           ; BANK3           85     27      57
  1198                           ; BANK2           96      0       0
  1199                           ;Pointer list with targets:
  1200                           ;S816$str	PTR unsigned char  size(2); Largest target is 17
  1201                           ;		 -> STR_1(CODE[6]), STR_2(CODE[16]), STR_3(CODE[17]), STR_6(CODE[17]), 
  1202                           ;		 -> STR_4(CODE[6]), STR_5(CODE[16]), tmp_11.str(BANK0[4]), d7sm_buffer(BANK3[8]), 
  1203                           ;		 -> STR_8(CODE[4]), STR_7(CODE[3]), STR_11(CODE[10]), STR_10(CODE[9]), 
  1204                           ;		 -> STR_12(CODE[12]), STR_9(CODE[5]), STR_13(CODE[7]), STR_21(CODE[16]), 
  1205                           ;		 -> STR_20(CODE[6]), STR_22(CODE[17]), STR_25(CODE[17]), STR_23(CODE[6]), 
  1206                           ;		 -> STR_24(CODE[16]), STR_26(CODE[6]), STR_27(CODE[16]), STR_28(CODE[17]), 
  1207                           ;disp.str	PTR unsigned char  size(2); Largest target is 17
  1208                           ;		 -> STR_1(CODE[6]), STR_2(CODE[16]), STR_3(CODE[17]), STR_6(CODE[17]), 
  1209                           ;		 -> STR_4(CODE[6]), STR_5(CO
  1210                           ; *************** function _main *****************
  1211                           ; Defined at:
  1212                           ;		line 40 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\main.c"
  1213                           ; Parameters:    Size  Location     Type
  1214                           ;		None
  1215                           ; Auto vars:     Size  Location     Type
  1216                           ;  ix2Trans        1    3[BANK3 ] unsigned char 
  1217                           ;  event           1    0[BANK3 ] unsigned char 
  1218                           ; Return value:  Size  Location     Type
  1219                           ;		None               void
  1220                           ; Registers used:
  1221                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1222                           ; Tracked objects:
  1223                           ;		On entry : 17F/0
  1224                           ;		On exit  : 60/0
  1225                           ;		Unchanged: FFE00/0
  1226                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227                           ;      Locals:         0       4       0       4       0
  1228                           ;      Temp:     4
  1229                           ;      Total:    8
  1230                           ; This function calls:
  1231                           ;		_systemInit
  1232                           ;		_driver_ledSet
  1233                           ;		_fsmGetEvent
  1234                           ;		___wmul
  1235                           ;		_a_testDisplaySetup
  1236                           ;		_a_initializeDevice
  1237                           ;		_a_m0_nMem
  1238                           ;		_a_input2ActionFp
  1239                           ;		_a_m0_input
  1240                           ;		_a_m0_first_set
  1241                           ;		_a_m0_first_inc
  1242                           ;		_a_m0_return
  1243                           ;		_a_m0_first_save
  1244                           ;		_a_showHyphensOn
  1245                           ;		_a_doNothing
  1246                           ;		_a_m0_first
  1247                           ;		_a_showHyphensOff
  1248                           ;		_a_showTimerIdOn
  1249                           ;		_a_input2ActionFn
  1250                           ;		_a_showTimerIdOff
  1251                           ;		_a_inputActionFp
  1252                           ;		_a_inputActionFn
  1253                           ;		_a_temporizar
  1254                           ;		_a_showTime
  1255                           ;		_a_m0_tOnOff_set
  1256                           ;		_a_m0_input_inc
  1257                           ;		_a_m0_input_set
  1258                           ;		_a_m0_input_save
  1259                           ;		_a_m0_nMem_inc
  1260                           ;		_a_m0_tOnOff_entrance
  1261                           ;		_a_m0_nMem_set
  1262                           ;		_a_m0_nMem_save
  1263                           ;		_a_m0_nMem_dec
  1264                           ;		_a_m0_tOnOff_showString_next
  1265                           ;		_a_m0_tOnOff_inc
  1266                           ;		_a_m0_tOnOff_save
  1267                           ; This function is called by:
  1268                           ;		Startup code after reset
  1269                           ; This function uses a non-reentrant model
  1270                           ; 
  1271  0034                     _main:	;main.c: 39: void main(void)
  1272                           ;main.c: 40: {
  1273                           ;main.c: 41: char new_event;
  1274                           ;main.c: 43: systemInit();
  1275                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1276  0034  160A  118A  235F   	fcall	_systemInit
  1277                           ;main.c: 44: {estadoFsm=S__TESTDISPLAY_SETUP;};
  1278  0037  01F9               	clrf	_estadoFsm
  1279  0038                     l30005782:
  1280                           ;main.c: 49: {
  1281                           ;main.c: 52: driver_ledSet();
  1282  0038  160A  118A  2135   	fcall	_driver_ledSet
      +       120A  118A         
  1283  003D  2120               	call	PL1	;select bank 3
  1284                           ;main.c: 54: { char event,ix2Trans; ix2Trans=0; event=fsmGetEvent(); while( ((t_fsmState
      +                          *)(fsmStateTable[estadoFsm]))[ix2Trans].event!= EV_TABLE_END && ((t_fsmState*)(fsmStateT
      +                          able[estadoFsm]))[ix2Trans].event!=event ) ix2Trans++; ((t_fsmState*)(fsmStateTable[est
  1285  003E  0193               	clrf	main@ix2Trans^(0+384)
  1286  003F  120A  158A  23F6   	fcall	_fsmGetEvent
      +       120A  118A         
  1287  0044  1703               	bsf	3,6	;RP1=1, select bank3
  1288  0045  0090               	movwf	main@event^(0+384)
  1289  0046  2871               	goto	l30005786
  1290  0047                     l30005787:
  1291  0047  1003               	clrc
  1292  0048  0D79               	rlf	_estadoFsm,w
  1293  0049  3E67               	addlw	low _fsmStateTable
  1294  004A  0084               	movwf	4
  1295  004B  3008               	movlw	high _fsmStateTable
  1296  004C  1803               	skipnc
  1297  004D  3E01               	addlw	1
  1298  004E  00BB               	movwf	??_main+1
  1299  004F  160A  118A  2000   	fcall	stringtab
  1300  0052  00BA               	movwf	??_main
  1301  0053  0A84               	incf	4,f
  1302  0054  1903               	skipnz
  1303  0055  0ABB               	incf	??_main+1,f
  1304  0056  083B               	movf	??_main+1,w
  1305  0057  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1306  005C  00BB               	movwf	??_main+1
  1307  005D  2120               	call	PL1	;select bank 3
  1308  005E  0813               	movf	main@ix2Trans^(0+384),w
  1309  005F  0713               	addwf	main@ix2Trans^(0+384),w
  1310  0060  0713               	addwf	main@ix2Trans^(0+384),w
  1311  0061  2123               	call	PL2	;select bank 0
  1312  0062  073A               	addwf	??_main,w
  1313  0063  0084               	movwf	4
  1314  0064  083B               	movf	??_main+1,w
  1315  0065  1803               	skipnc
  1316  0066  3E01               	addlw	1
  1317  0067  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1318  006C  2120               	call	PL1	;select bank 3
  1319  006D  0610               	xorwf	main@event^(0+384),w
  1320  006E  1903               	btfsc	3,2
  1321  006F  289A               	goto	l30005788
  1322  0070  0A93               	incf	main@ix2Trans^(0+384),f
  1323  0071                     l30005786:
  1324  0071  1003               	clrc
  1325  0072  0D79               	rlf	_estadoFsm,w
  1326  0073  3E67               	addlw	low _fsmStateTable
  1327  0074  0084               	movwf	4
  1328  0075  3008               	movlw	high _fsmStateTable
  1329  0076  1803               	skipnc
  1330  0077  3E01               	addlw	1
  1331  0078  2123               	call	PL2	;select bank 0
  1332  0079  00BB               	movwf	??_main+1
  1333  007A  160A  118A  2000   	fcall	stringtab
  1334  007D  00BA               	movwf	??_main
  1335  007E  0A84               	incf	4,f
  1336  007F  1903               	skipnz
  1337  0080  0ABB               	incf	??_main+1,f
  1338  0081  083B               	movf	??_main+1,w
  1339  0082  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1340  0087  00BB               	movwf	??_main+1
  1341  0088  2120               	call	PL1	;select bank 3
  1342  0089  0813               	movf	main@ix2Trans^(0+384),w
  1343  008A  0713               	addwf	main@ix2Trans^(0+384),w
  1344  008B  0713               	addwf	main@ix2Trans^(0+384),w
  1345  008C  2123               	call	PL2	;select bank 0
  1346  008D  073A               	addwf	??_main,w
  1347  008E  0084               	movwf	4
  1348  008F  083B               	movf	??_main+1,w
  1349  0090  1803               	skipnc
  1350  0091  3E01               	addlw	1
  1351  0092  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1352  0097  3A0F               	xorlw	15
  1353  0098  1D03               	btfss	3,2
  1354  0099  2847               	goto	l30005787
  1355  009A                     l30005788:
  1356  009A  1003               	clrc
  1357  009B  0D79               	rlf	_estadoFsm,w
  1358  009C  3E67               	addlw	low _fsmStateTable
  1359  009D  0084               	movwf	4
  1360  009E  3008               	movlw	high _fsmStateTable
  1361  009F  1803               	skipnc
  1362  00A0  3E01               	addlw	1
  1363  00A1  2123               	call	PL2	;select bank 0
  1364  00A2  00BB               	movwf	??_main+1
  1365  00A3  160A  118A  2000   	fcall	stringtab
  1366  00A6  00BA               	movwf	??_main
  1367  00A7  0A84               	incf	4,f
  1368  00A8  1903               	skipnz
  1369  00A9  0ABB               	incf	??_main+1,f
  1370  00AA  083B               	movf	??_main+1,w
  1371  00AB  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1372  00B0  00BB               	movwf	??_main+1
  1373  00B1  2120               	call	PL1	;select bank 3
  1374  00B2  0813               	movf	main@ix2Trans^(0+384),w
  1375  00B3  0713               	addwf	main@ix2Trans^(0+384),w
  1376  00B4  0713               	addwf	main@ix2Trans^(0+384),w
  1377  00B5  2123               	call	PL2	;select bank 0
  1378  00B6  073A               	addwf	??_main,w
  1379  00B7  00BC               	movwf	??_main+2
  1380  00B8  083B               	movf	??_main+1,w
  1381  00B9  1803               	skipnc
  1382  00BA  3E01               	addlw	1
  1383  00BB  00BD               	movwf	??_main+3
  1384  00BC  3001               	movlw	1
  1385  00BD  073C               	addwf	??_main+2,w
  1386  00BE  0084               	movwf	4
  1387  00BF  083D               	movf	??_main+3,w
  1388  00C0  1803               	skipnc
  1389  00C1  0A3D               	incf	??_main+3,w
  1390  00C2  160A  118A  2000   	fcall	stringtab
  1391  00C5  120A  158A  2000   	fcall	fptable
  1392  00C8  1003               	clrc
  1393  00C9  0D79               	rlf	_estadoFsm,w
  1394  00CA  3E67               	addlw	low _fsmStateTable
  1395  00CB  0084               	movwf	4
  1396  00CC  3008               	movlw	high _fsmStateTable
  1397  00CD  1803               	skipnc
  1398  00CE  3E01               	addlw	1
  1399  00CF  00BB               	movwf	??_main+1
  1400  00D0  160A  118A  2000   	fcall	stringtab
  1401  00D3  00BA               	movwf	??_main
  1402  00D4  0A84               	incf	4,f
  1403  00D5  1903               	skipnz
  1404  00D6  0ABB               	incf	??_main+1,f
  1405  00D7  083B               	movf	??_main+1,w
  1406  00D8  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1407  00DD  00BB               	movwf	??_main+1
  1408  00DE  2120               	call	PL1	;select bank 3
  1409  00DF  0813               	movf	main@ix2Trans^(0+384),w
  1410  00E0  0713               	addwf	main@ix2Trans^(0+384),w
  1411  00E1  0713               	addwf	main@ix2Trans^(0+384),w
  1412  00E2  2123               	call	PL2	;select bank 0
  1413  00E3  073A               	addwf	??_main,w
  1414  00E4  00BC               	movwf	??_main+2
  1415  00E5  083B               	movf	??_main+1,w
  1416  00E6  1803               	skipnc
  1417  00E7  3E01               	addlw	1
  1418  00E8  00BD               	movwf	??_main+3
  1419  00E9  3002               	movlw	2
  1420  00EA  073C               	addwf	??_main+2,w
  1421  00EB  0084               	movwf	4
  1422  00EC  083D               	movf	??_main+3,w
  1423  00ED  1803               	skipnc
  1424  00EE  0A3D               	incf	??_main+3,w
  1425  00EF  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1426  00F4  00F9               	movwf	_estadoFsm
  1427  00F5  2120               	call	PL1	;select bank 3
  1428                           ;main.c: 56: if((t0Mem[T0_D7SM_SCROLL].flag?!(t0Mem[T0_D7SM_SCROLL].flag=0):0)) { disp.s
      +                          trOffs++; if(disp.strOffs>disp.strLen+4) disp.strOffs=0; };
  1429  00F6  0191               	clrf	_main$2360^(0+384)
  1430  00F7  0192               	clrf	(_main$2360+1)^(0+384)
  1431  00F8  2123               	call	PL2	;select bank 0
  1432  00F9  1CDB               	btfss	_t0Mem+9,1
  1433  00FA  2906               	goto	l30005793
  1434  00FB  085B               	movf	_t0Mem+9,w
  1435  00FC  39FD               	andlw	-3
  1436  00FD  00DB               	movwf	_t0Mem+9
  1437  00FE  0C5B               	rrf	_t0Mem+9,w
  1438  00FF  3901               	andlw	1
  1439  0100  3000               	movlw	0
  1440  0101  1903               	skipnz
  1441  0102  3001               	movlw	1
  1442  0103  2120               	call	PL1	;select bank 3
  1443  0104  0091               	movwf	_main$2360^(0+384)
  1444  0105  0192               	clrf	(_main$2360+1)^(0+384)
  1445  0106                     l30005793:
  1446  0106  2120               	call	PL1	;select bank 3
  1447  0107  0812               	movf	(_main$2360+1)^(0+384),w
  1448  0108  0411               	iorwf	_main$2360^(0+384),w
  1449  0109  1903               	skipnz
  1450  010A  2838               	goto	l30005782
  1451  010B  2123               	call	PL2	;select bank 0
  1452  010C  0AC0               	incf	_disp+2,f
  1453  010D  0841               	movf	_disp+3,w
  1454  010E  3E04               	addlw	4
  1455  010F  00BA               	movwf	??_main
  1456  0110  3000               	movlw	0
  1457  0111  1803               	skipnc
  1458  0112  3001               	movlw	1
  1459  0113  00BB               	movwf	??_main+1
  1460  0114  3A80               	xorlw	128
  1461  0115  00BC               	movwf	??_main+2
  1462  0116  3080               	movlw	128
  1463  0117  023C               	subwf	??_main+2,w
  1464  0118  1D03               	skipz
  1465  0119  291C               	goto	u6915
  1466  011A  0840               	movf	_disp+2,w
  1467  011B  023A               	subwf	??_main,w
  1468  011C                     u6915:
  1469  011C  1803               	skipnc
  1470  011D  2838               	goto	l30005782
  1471  011E  01C0               	clrf	_disp+2
  1472  011F  2838               	goto	l30005782
  1473  0120                     __end_of_main:
  1474  0120                     PL1:
  1475  0120  1683               	bsf	3,5	;RP0=1, select bank3
  1476  0121  1703               	bsf	3,6	;RP1=1, select bank3
  1477  0122  0008               	return
  1478  0123                     PL2:
  1479  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1480  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1481  0125  0008               	return
  1482                           
  1483                           	psect	text1203
  1484  0126                     __ptext1203:	; =============== function _a_m0_tOnOff_inc ends ============
  1485                           ; *************** function _a_m0_tOnOff_entrance *****************
  1486                           ; Defined at:
  1487                           ;		line 642 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1488                           ; Parameters:    Size  Location     Type
  1489                           ;		None
  1490                           ; Auto vars:     Size  Location     Type
  1491                           ;		None
  1492                           ; Return value:  Size  Location     Type
  1493                           ;		None               void
  1494                           ; Registers used:
  1495                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1496                           ; Tracked objects:
  1497                           ;		On entry : 60/0
  1498                           ;		On exit  : 60/0
  1499                           ;		Unchanged: FFE9F/0
  1500                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501                           ;      Locals:         0       0       0       0       0
  1502                           ;      Temp:     0
  1503                           ;      Total:    0
  1504                           ; This function calls:
  1505                           ;		_a_m0_tOnOff_showString
  1506                           ; This function is called by:
  1507                           ; This function uses a non-reentrant model
  1508                           ; 
  1509  0126                     _a_m0_tOnOff_entrance:	;fsm_actions.h: 641: void a_m0_tOnOff_entrance(void)
  1510                           ;fsm_actions.h: 642: {
  1511                           ;fsm_actions.h: 643: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1512                           ; Regs used in _a_m0_tOnOff_entrance: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1513  0126  10D5               	bcf	_t0Mem+3,1
  1514  0127  30B1               	movlw	low (_t0DelayConstant+1)
  1515  0128  0084               	movwf	4
  1516  0129  3010               	movlw	high (_t0DelayConstant+1)
  1517  012A  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1518  012F  00D4               	movwf	_t0Mem+2
  1519  0130  1155               	bcf	_t0Mem+3,2
  1520                           ;fsm_actions.h: 644: tmp_11.mainMenuState=0;
  1521  0131  01C7               	clrf	_tmp_11+3
  1522                           ;fsm_actions.h: 645: a_m0_tOnOff_showString();
  1523  0132  2ACC               	ljmp	l30005551
  1524  0133                     __end_of_a_m0_tOnOff_entrance:
  1525  0133                     __ptext1212:	; =============== function _a_m0_first_set ends ============
  1526                           ; *************** function _a_m0_first_save *****************
  1527                           ; Defined at:
  1528                           ;		line 480 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1529                           ; Parameters:    Size  Location     Type
  1530                           ;		None
  1531                           ; Auto vars:     Size  Location     Type
  1532                           ;		None
  1533                           ; Return value:  Size  Location     Type
  1534                           ;		None               void
  1535                           ; Registers used:
  1536                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1537                           ; Tracked objects:
  1538                           ;		On entry : 60/0
  1539                           ;		On exit  : 60/0
  1540                           ;		Unchanged: FFE9F/0
  1541                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1542                           ;      Locals:         1       0       0       0       0
  1543                           ;      Temp:     1
  1544                           ;      Total:    1
  1545                           ; This function calls:
  1546                           ;		_eeprom_write
  1547                           ;		_a_m0_first
  1548                           ; This function is called by:
  1549                           ; This function uses a non-reentrant model
  1550                           ; 
  1551  0133                     _a_m0_first_save:	;fsm_actions.h: 479: void a_m0_first_save(void)
  1552                           ;fsm_actions.h: 480: {
  1553                           ;fsm_actions.h: 481: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1554                           ; Regs used in _a_m0_first_save: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1555  0133  10D5               	bcf	_t0Mem+3,1
  1556  0134  30B1               	movlw	low (_t0DelayConstant+1)
  1557  0135  0084               	movwf	4
  1558  0136  3010               	movlw	high (_t0DelayConstant+1)
  1559  0137  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1560  013C  00D4               	movwf	_t0Mem+2
  1561  013D  1155               	bcf	_t0Mem+3,2
  1562                           ;fsm_actions.h: 482: tmp_11.flag_inputSettingLedBlink = 0;
  1563  013E  11C4               	bcf	_tmp_11,3
  1564                           ;fsm_actions.h: 484: tmp_11.mem_first = tmp_11.menuCharAuxiliar;
  1565  013F  0848               	movf	_tmp_11+4,w
  1566  0140  00F1               	movwf	??_a_m0_first_save
  1567  0141  0EF1               	swapf	??_a_m0_first_save,f
  1568  0142  0845               	movf	_tmp_11+1,w
  1569  0143  0671               	xorwf	??_a_m0_first_save,w
  1570  0144  39EF               	andlw	-17
  1571  0145  0671               	xorwf	??_a_m0_first_save,w
  1572  0146  00C5               	movwf	_tmp_11+1
  1573                           ;fsm_actions.h: 485: { eeprom_write(EEADDR__04_00__FIRST,tmp_11.mem_first); };
  1574  0147  01A1               	clrf	?_eeprom_write
  1575  0148  1A45               	btfsc	_tmp_11+1,4
  1576  0149  0AA1               	incf	?_eeprom_write,f
  1577  014A  3004               	movlw	4
  1578  014B  2253  120A  118A   	fcall	_eeprom_write
  1579                           ;fsm_actions.h: 486: a_m0_first();
  1580  014E  294F               	ljmp	l30005478
  1581  014F                     __end_of_a_m0_first_save:
  1582  014F                     __ptext1228:	; =============== function _a_initializeDevice ends ============
  1583                           ; *************** function _a_m0_first *****************
  1584                           ; Defined at:
  1585                           ;		line 434 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1586                           ; Parameters:    Size  Location     Type
  1587                           ;		None
  1588                           ; Auto vars:     Size  Location     Type
  1589                           ;		None
  1590                           ; Return value:  Size  Location     Type
  1591                           ;		None               void
  1592                           ; Registers used:
  1593                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1594                           ; Tracked objects:
  1595                           ;		On entry : 0/0
  1596                           ;		On exit  : 60/0
  1597                           ;		Unchanged: FFE9F/0
  1598                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1599                           ;      Locals:         0       0       0       0       0
  1600                           ;      Temp:     0
  1601                           ;      Total:    0
  1602                           ; This function calls:
  1603                           ;		_d7sm_puts_scroll
  1604                           ; This function is called by:
  1605                           ;		_a_m0_first_save
  1606                           ; This function uses a non-reentrant model
  1607                           ; 
  1608  014F                     _a_m0_first:	;fsm_actions.h: 433: void a_m0_first(void)
  1609                           ;fsm_actions.h: 434: {
  1610  014F                     l30005478:	; Regs used in _a_m0_first: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1611  014F  27FD               	call	PL3	;select bank 0
  1612                           ;fsm_actions.h: 435: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1613  0150  10D5               	bcf	_t0Mem+3,1
  1614  0151  30B1               	movlw	low (_t0DelayConstant+1)
  1615  0152  0084               	movwf	4
  1616  0153  3010               	movlw	high (_t0DelayConstant+1)
  1617  0154  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1618  0159  00D4               	movwf	_t0Mem+2
  1619  015A  1155               	bcf	_t0Mem+3,2
  1620                           ;fsm_actions.h: 437: { t1Mem[T1_TIME].prescaler=0; };
  1621  015B  01DC               	clrf	_t1Mem
  1622  015C  01DD               	clrf	_t1Mem+1
  1623  015D  01DE               	clrf	_t1Mem+2
  1624                           ;fsm_actions.h: 438: RB1 = 0;
  1625  015E  1086               	bcf	6,1
  1626                           ;fsm_actions.h: 439: RA1 = 0;
  1627  015F  1085               	bcf	5,1
  1628                           ;fsm_actions.h: 442: tmp_11.mainMenuState = TEXT__M0__FIRST;
  1629  0160  01C7               	clrf	_tmp_11+3
  1630                           ;fsm_actions.h: 444: d7sm_puts_scroll((char *)menu_text_main[tmp_11.mainMenuState]);
  1631  0161  1003               	clrc
  1632  0162  0D47               	rlf	_tmp_11+3,w
  1633  0163  3EB5               	addlw	_menu_text_main& (0+255)
  1634  0164  0084               	movwf	4
  1635  0165  1783               	bsf	3,7	;select IRP bank3
  1636  0166  0800               	movf	0,w
  1637  0167  00A3               	movwf	?_d7sm_puts_scroll
  1638  0168  0A84               	incf	4,f
  1639  0169  0800               	movf	0,w
  1640  016A  00A4               	movwf	?_d7sm_puts_scroll+1
  1641  016B  2B54               	ljmp	l30005427
  1642  016C                     __end_of_a_m0_first:
  1643  016C                     __ptext1208:	; =============== function _a_m0_nMem_save ends ============
  1644                           ; *************** function _a_m0_nMem_dec *****************
  1645                           ; Defined at:
  1646                           ;		line 613 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1647                           ; Parameters:    Size  Location     Type
  1648                           ;		None
  1649                           ; Auto vars:     Size  Location     Type
  1650                           ;		None
  1651                           ; Return value:  Size  Location     Type
  1652                           ;		None               void
  1653                           ; Registers used:
  1654                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1655                           ; Tracked objects:
  1656                           ;		On entry : 60/0
  1657                           ;		On exit  : 160/0
  1658                           ;		Unchanged: FFE9F/0
  1659                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1660                           ;      Locals:         0       0       0       0       0
  1661                           ;      Temp:     0
  1662                           ;      Total:    0
  1663                           ; This function calls:
  1664                           ;		_a_m0_nMem_set
  1665                           ; This function is called by:
  1666                           ; This function uses a non-reentrant model
  1667                           ; 
  1668  016C                     _a_m0_nMem_dec:	;fsm_actions.h: 612: void a_m0_nMem_dec(void)
  1669                           ;fsm_actions.h: 613: {
  1670                           ;fsm_actions.h: 614: if(tmp_11.menuCharAuxiliar>1) tmp_11.menuCharAuxiliar--;
  1671                           ; Regs used in _a_m0_nMem_dec: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1672  016C  3002               	movlw	2
  1673  016D  0248               	subwf	_tmp_11+4,w
  1674  016E  1803               	btfsc	3,0
  1675  016F  03C8               	decf	_tmp_11+4,f
  1676                           ;fsm_actions.h: 615: a_m0_nMem_set();
  1677  0170  2976               	ljmp	_a_m0_nMem_set
  1678  0171                     __end_of_a_m0_nMem_dec:
  1679  0171                     __ptext1209:	; =============== function _a_m0_nMem_dec ends ============
  1680                           ; *************** function _a_m0_nMem_inc *****************
  1681                           ; Defined at:
  1682                           ;		line 603 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1683                           ; Parameters:    Size  Location     Type
  1684                           ;		None
  1685                           ; Auto vars:     Size  Location     Type
  1686                           ;		None
  1687                           ; Return value:  Size  Location     Type
  1688                           ;		None               void
  1689                           ; Registers used:
  1690                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1691                           ; Tracked objects:
  1692                           ;		On entry : 60/0
  1693                           ;		On exit  : 160/0
  1694                           ;		Unchanged: FFE9F/0
  1695                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1696                           ;      Locals:         0       0       0       0       0
  1697                           ;      Temp:     0
  1698                           ;      Total:    0
  1699                           ; This function calls:
  1700                           ;		_a_m0_nMem_set
  1701                           ; This function is called by:
  1702                           ; This function uses a non-reentrant model
  1703                           ; 
  1704  0171                     _a_m0_nMem_inc:	;fsm_actions.h: 602: void a_m0_nMem_inc(void)
  1705                           ;fsm_actions.h: 603: {
  1706                           ;fsm_actions.h: 604: if(tmp_11.menuCharAuxiliar<40) tmp_11.menuCharAuxiliar++;
  1707                           ; Regs used in _a_m0_nMem_inc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1708  0171  3028               	movlw	40
  1709  0172  0248               	subwf	_tmp_11+4,w
  1710  0173  1C03               	btfss	3,0
  1711  0174  0AC8               	incf	_tmp_11+4,f
  1712                           ;fsm_actions.h: 605: a_m0_nMem_set();
  1713  0175  2976               	ljmp	_a_m0_nMem_set
  1714  0176                     __end_of_a_m0_nMem_inc:
  1715  0176                     __ptext1205:	; =============== function _a_m0_input_inc ends ============
  1716                           ; *************** function _a_m0_nMem_set *****************
  1717                           ; Defined at:
  1718                           ;		line 586 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1719                           ; Parameters:    Size  Location     Type
  1720                           ;		None
  1721                           ; Auto vars:     Size  Location     Type
  1722                           ;  n               1   10[BANK0 ] unsigned char 
  1723                           ;  i               1   11[BANK0 ] unsigned char 
  1724                           ;  s               1    9[BANK0 ] PTR unsigned char 
  1725                           ;		 -> d7sm_buffer(8), 
  1726                           ;  str             1    8[BANK0 ] PTR unsigned char 
  1727                           ;		 -> d7sm_buffer(8), 
  1728                           ; Return value:  Size  Location     Type
  1729                           ;		None               void
  1730                           ; Registers used:
  1731                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1732                           ; Tracked objects:
  1733                           ;		On entry : 60/0
  1734                           ;		On exit  : 160/0
  1735                           ;		Unchanged: FFE9F/0
  1736                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1737                           ;      Locals:         0       4       0       0       0
  1738                           ;      Temp:     0
  1739                           ;      Total:    4
  1740                           ; This function calls:
  1741                           ;		___lbmod
  1742                           ;		___awdiv
  1743                           ; This function is called by:
  1744                           ;		_a_m0_nMem_inc
  1745                           ;		_a_m0_nMem_dec
  1746                           ; This function uses a non-reentrant model
  1747                           ; 
  1748  0176                     _a_m0_nMem_set:	;fsm_actions.h: 585: void a_m0_nMem_set(void)
  1749                           ;fsm_actions.h: 586: {
  1750                           ;fsm_actions.h: 587: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1751                           ; Regs used in _a_m0_nMem_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1752  0176  10D5               	bcf	_t0Mem+3,1
  1753  0177  30B1               	movlw	low (_t0DelayConstant+1)
  1754  0178  0084               	movwf	4
  1755  0179  3010               	movlw	high (_t0DelayConstant+1)
  1756  017A  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1757  017F  00D4               	movwf	_t0Mem+2
  1758  0180  1155               	bcf	_t0Mem+3,2
  1759                           ;fsm_actions.h: 588: tmp_11.flag_inputSettingLedBlink = 1;
  1760  0181  15C4               	bsf	_tmp_11,3
  1761                           ;fsm_actions.h: 590: if(estadoFsm==S__M0__NMEM)
  1762  0182  0879               	movf	_estadoFsm,w
  1763  0183  3A08               	xorlw	8
  1764  0184  1D03               	skipz
  1765  0185  2989               	goto	l30005669
  1766                           ;fsm_actions.h: 591: tmp_11.menuCharAuxiliar = tmp_11.mem_cantMemorias/2;
  1767  0186  1003               	clrc
  1768  0187  0C46               	rrf	_tmp_11+2,w
  1769  0188  00C8               	movwf	_tmp_11+4
  1770  0189                     l30005669:
  1771                           ;fsm_actions.h: 593: { { t0Mem[T0_D7SM_SCROLL].prescaler=0; t0Mem[T0_D7SM_SCROLL].pause=
      +                          1; t0Mem[T0_D7SM_SCROLL].loop=0; }; disp.strOffs=4; disp.strLen=4; char *str=&d7sm_buffe
      +                          r[0]; { char i,n=tmp_11.menuCharAuxiliar,*s=str; s+=4-1; for(i=0;i<4;i++) { *(s--)='0'+(
      +                          n%10); 
  1772  0189  01DA               	clrf	_t0Mem+8
  1773  018A  155B               	bsf	_t0Mem+9,2
  1774  018B  105B               	bcf	_t0Mem+9,0
  1775  018C  3004               	movlw	4
  1776  018D  00C0               	movwf	_disp+2
  1777  018E  00C1               	movwf	_disp+3
  1778  018F  30BB               	movlw	_d7sm_buffer& (0+255)
  1779  0190  00A8               	movwf	a_m0_nMem_set@str
  1780  0191  0848               	movf	_tmp_11+4,w
  1781  0192  00AA               	movwf	a_m0_nMem_set@n
  1782  0193  0828               	movf	a_m0_nMem_set@str,w
  1783  0194  00A9               	movwf	a_m0_nMem_set@s
  1784  0195  3003               	movlw	3
  1785  0196  07A9               	addwf	a_m0_nMem_set@s,f
  1786  0197  01AB               	clrf	a_m0_nMem_set@i
  1787  0198                     l30005680:
  1788  0198  0829               	movf	a_m0_nMem_set@s,w
  1789  0199  0084               	movwf	4
  1790  019A  300A               	movlw	10
  1791  019B  00A3               	movwf	?___lbmod
  1792  019C  082A               	movf	a_m0_nMem_set@n,w
  1793  019D  279D  120A  118A   	fcall	___lbmod
  1794  01A0  3E30               	addlw	48
  1795  01A1  1783               	bsf	3,7	;select IRP bank2
  1796  01A2  0080               	movwf	0
  1797  01A3  03A9               	decf	a_m0_nMem_set@s,f
  1798  01A4  082A               	movf	a_m0_nMem_set@n,w
  1799  01A5  00A4               	movwf	?___awdiv
  1800  01A6  01A5               	clrf	?___awdiv+1
  1801  01A7  300A               	movlw	10
  1802  01A8  00A6               	movwf	?___awdiv+2
  1803  01A9  01A7               	clrf	?___awdiv+3
  1804  01AA  2422  120A  118A   	fcall	___awdiv
  1805  01AD  1383               	bcf	3,7	;select IRP bank0
  1806  01AE  0824               	movf	?___awdiv,w
  1807  01AF  00AA               	movwf	a_m0_nMem_set@n
  1808  01B0  0AAB               	incf	a_m0_nMem_set@i,f
  1809  01B1  3004               	movlw	4
  1810  01B2  022B               	subwf	a_m0_nMem_set@i,w
  1811  01B3  1C03               	skipc
  1812  01B4  2998               	goto	l30005680
  1813  01B5  30BB               	movlw	_d7sm_buffer& (0+255)
  1814  01B6  00BE               	movwf	_disp
  1815  01B7  3081               	movlw	129
  1816  01B8  00BF               	movwf	_disp+1
  1817  01B9  1443               	bsf	_disp+5,0
  1818  01BA  14C3               	bsf	_disp+5,1
  1819  01BB  1543               	bsf	_disp+5,2
  1820  01BC  15C3               	bsf	_disp+5,3
  1821  01BD  0008               	return
  1822  01BE                     __end_of_a_m0_nMem_set:
  1823  01BE                     __ptext1207:	; =============== function _a_m0_input_save ends ============
  1824                           ; *************** function _a_m0_nMem_save *****************
  1825                           ; Defined at:
  1826                           ;		line 623 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1827                           ; Parameters:    Size  Location     Type
  1828                           ;		None
  1829                           ; Auto vars:     Size  Location     Type
  1830                           ;		None
  1831                           ; Return value:  Size  Location     Type
  1832                           ;		None               void
  1833                           ; Registers used:
  1834                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1835                           ; Tracked objects:
  1836                           ;		On entry : 60/0
  1837                           ;		On exit  : 60/0
  1838                           ;		Unchanged: FFE9F/0
  1839                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840                           ;      Locals:         0       0       0       0       0
  1841                           ;      Temp:     0
  1842                           ;      Total:    0
  1843                           ; This function calls:
  1844                           ;		_eeprom_write
  1845                           ;		_a_m0_nMem
  1846                           ; This function is called by:
  1847                           ; This function uses a non-reentrant model
  1848                           ; 
  1849  01BE                     _a_m0_nMem_save:	;fsm_actions.h: 622: void a_m0_nMem_save(void)
  1850                           ;fsm_actions.h: 623: {
  1851                           ;fsm_actions.h: 624: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1852                           ; Regs used in _a_m0_nMem_save: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1853  01BE  10D5               	bcf	_t0Mem+3,1
  1854  01BF  30B1               	movlw	low (_t0DelayConstant+1)
  1855  01C0  0084               	movwf	4
  1856  01C1  3010               	movlw	high (_t0DelayConstant+1)
  1857  01C2  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1858  01C7  00D4               	movwf	_t0Mem+2
  1859  01C8  1155               	bcf	_t0Mem+3,2
  1860                           ;fsm_actions.h: 625: tmp_11.flag_inputSettingLedBlink = 0;
  1861  01C9  11C4               	bcf	_tmp_11,3
  1862                           ;fsm_actions.h: 627: tmp_11.mem_cantMemorias=tmp_11.menuCharAuxiliar*2;
  1863  01CA  1003               	clrc
  1864  01CB  0D48               	rlf	_tmp_11+4,w
  1865  01CC  00C6               	movwf	_tmp_11+2
  1866                           ;fsm_actions.h: 628: { eeprom_write(EEADDR__02_00__NMEM,tmp_11.mem_cantMemorias); };
  1867  01CD  0846               	movf	_tmp_11+2,w
  1868  01CE  00A1               	movwf	?_eeprom_write
  1869  01CF  3002               	movlw	2
  1870  01D0  2253  120A  118A   	fcall	_eeprom_write
  1871                           ;fsm_actions.h: 629: a_m0_nMem();
  1872  01D3  29D4               	ljmp	l30005533
  1873  01D4                     __end_of_a_m0_nMem_save:
  1874  01D4                     __ptext1217:	; =============== function _a_m0_input_set ends ============
  1875                           ; *************** function _a_m0_nMem *****************
  1876                           ; Defined at:
  1877                           ;		line 556 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1878                           ; Parameters:    Size  Location     Type
  1879                           ;		None
  1880                           ; Auto vars:     Size  Location     Type
  1881                           ;		None
  1882                           ; Return value:  Size  Location     Type
  1883                           ;		None               void
  1884                           ; Registers used:
  1885                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1886                           ; Tracked objects:
  1887                           ;		On entry : 0/0
  1888                           ;		On exit  : 60/0
  1889                           ;		Unchanged: FFE9F/0
  1890                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1891                           ;      Locals:         0       0       0       0       0
  1892                           ;      Temp:     0
  1893                           ;      Total:    0
  1894                           ; This function calls:
  1895                           ;		_d7sm_puts_scroll
  1896                           ; This function is called by:
  1897                           ;		_a_m0_nMem_save
  1898                           ; This function uses a non-reentrant model
  1899                           ; 
  1900  01D4                     _a_m0_nMem:	;fsm_actions.h: 555: void a_m0_nMem(void)
  1901                           ;fsm_actions.h: 556: {
  1902  01D4                     l30005533:	; Regs used in _a_m0_nMem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1903  01D4  27FD               	call	PL3	;select bank 0
  1904                           ;fsm_actions.h: 557: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1905  01D5  10D5               	bcf	_t0Mem+3,1
  1906  01D6  30B1               	movlw	low (_t0DelayConstant+1)
  1907  01D7  0084               	movwf	4
  1908  01D8  3010               	movlw	high (_t0DelayConstant+1)
  1909  01D9  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1910  01DE  00D4               	movwf	_t0Mem+2
  1911  01DF  1155               	bcf	_t0Mem+3,2
  1912                           ;fsm_actions.h: 559: { t1Mem[T1_TIME].prescaler=0; };
  1913  01E0  01DC               	clrf	_t1Mem
  1914  01E1  01DD               	clrf	_t1Mem+1
  1915  01E2  01DE               	clrf	_t1Mem+2
  1916                           ;fsm_actions.h: 560: RB1 = 0;
  1917  01E3  1086               	bcf	6,1
  1918                           ;fsm_actions.h: 561: RA1 = 0;
  1919  01E4  1085               	bcf	5,1
  1920                           ;fsm_actions.h: 562: tmp_11.p2eepromAddr = EEADDR__16_00__TON_OFF;
  1921  01E5  3010               	movlw	16
  1922  01E6  00CD               	movwf	_tmp_11+9
  1923                           ;fsm_actions.h: 565: if(!tmp_11.mem_first) tmp_11.p2eepromAddr += sizeof(short long);
  1924  01E7  1A45               	btfsc	_tmp_11+1,4
  1925  01E8  29EB               	goto	l30005542
  1926  01E9  3003               	movlw	3
  1927  01EA  07CD               	addwf	_tmp_11+9,f
  1928  01EB                     l30005542:
  1929                           ;fsm_actions.h: 568: tmp_11.mainMenuState = TEXT__M0__NMEM;
  1930  01EB  3002               	movlw	2
  1931  01EC  00C7               	movwf	_tmp_11+3
  1932                           ;fsm_actions.h: 570: d7sm_puts_scroll((char *)menu_text_main[tmp_11.mainMenuState]);
  1933  01ED  1003               	clrc
  1934  01EE  0D47               	rlf	_tmp_11+3,w
  1935  01EF  3EB5               	addlw	_menu_text_main& (0+255)
  1936  01F0  0084               	movwf	4
  1937  01F1  1783               	bsf	3,7	;select IRP bank3
  1938  01F2  0800               	movf	0,w
  1939  01F3  00A3               	movwf	?_d7sm_puts_scroll
  1940  01F4  0A84               	incf	4,f
  1941  01F5  0800               	movf	0,w
  1942  01F6  00A4               	movwf	?_d7sm_puts_scroll+1
  1943  01F7  2B54               	ljmp	l30005427
  1944  01F8                     __end_of_a_m0_nMem:
  1945  01F8                     __ptext1200:	; =============== function _a_m0_tOnOff_showString_next ends ============
  1946                           ; *************** function _a_m0_tOnOff_save *****************
  1947                           ; Defined at:
  1948                           ;		line 863 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  1949                           ; Parameters:    Size  Location     Type
  1950                           ;		None
  1951                           ; Auto vars:     Size  Location     Type
  1952                           ;		None
  1953                           ; Return value:  Size  Location     Type
  1954                           ;		None               void
  1955                           ; Registers used:
  1956                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1957                           ; Tracked objects:
  1958                           ;		On entry : 60/0
  1959                           ;		On exit  : 60/0
  1960                           ;		Unchanged: FFE9F/0
  1961                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1962                           ;      Locals:         4       0       0       0       0
  1963                           ;      Temp:     4
  1964                           ;      Total:    4
  1965                           ; This function calls:
  1966                           ;		_eeprom_write
  1967                           ;		_a_m0_tOnOff_showString
  1968                           ; This function is called by:
  1969                           ; This function uses a non-reentrant model
  1970                           ; 
  1971  01F8                     _a_m0_tOnOff_save:	;fsm_actions.h: 862: void a_m0_tOnOff_save(void)
  1972                           ;fsm_actions.h: 863: {
  1973                           ;fsm_actions.h: 864: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  1974                           ; Regs used in _a_m0_tOnOff_save: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1975  01F8  10D5               	bcf	_t0Mem+3,1
  1976  01F9  30B1               	movlw	low (_t0DelayConstant+1)
  1977  01FA  0084               	movwf	4
  1978  01FB  3010               	movlw	high (_t0DelayConstant+1)
  1979  01FC  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  1980  0201  00D4               	movwf	_t0Mem+2
  1981  0202  1155               	bcf	_t0Mem+3,2
  1982                           ;fsm_actions.h: 865: tmp_11.flag_inputSettingLedBlink = 0;
  1983  0203  11C4               	bcf	_tmp_11,3
  1984                           ;fsm_actions.h: 867: { eeprom_write((EEADDR__16_00__TON_OFF+tmp_11.mainMenuState*sizeof(
      +                          short long))+0,((unsigned char)((tmp_11.menuShortLongAuxiliar*4>>(8*2))&0xFF))); eeprom_
      +                          write((EEADDR__16_00__TON_OFF+tmp_11.mainMenuState*sizeof(short long))+1,((unsigned char
      +                          )((tmp_
  1985  0204  0849               	movf	_tmp_11+5,w
  1986  0205  00F4               	movwf	??_a_m0_tOnOff_save
  1987  0206  084A               	movf	_tmp_11+6,w
  1988  0207  00F5               	movwf	??_a_m0_tOnOff_save+1
  1989  0208  084B               	movf	_tmp_11+7,w
  1990  0209  00F6               	movwf	??_a_m0_tOnOff_save+2
  1991  020A  3002               	movlw	2
  1992  020B                     u5995:
  1993  020B  1003               	clrc
  1994  020C  0DF4               	rlf	??_a_m0_tOnOff_save,f
  1995  020D  0DF5               	rlf	??_a_m0_tOnOff_save+1,f
  1996  020E  0DF6               	rlf	??_a_m0_tOnOff_save+2,f
  1997  020F  3EFF               	addlw	-1
  1998  0210  1D03               	skipz
  1999  0211  2A0B               	goto	u5995
  2000  0212  3010               	movlw	16
  2001  0213  00F7               	movwf	??_a_m0_tOnOff_save+3
  2002  0214                     u6005:
  2003  0214  0D76               	rlf	??_a_m0_tOnOff_save+2,w
  2004  0215  0CF6               	rrf	??_a_m0_tOnOff_save+2,f
  2005  0216  0CF5               	rrf	??_a_m0_tOnOff_save+1,f
  2006  0217  0CF4               	rrf	??_a_m0_tOnOff_save,f
  2007  0218  0BF7               	decfsz	??_a_m0_tOnOff_save+3,f
  2008  0219  2A14               	goto	u6005
  2009  021A  0874               	movf	??_a_m0_tOnOff_save,w
  2010  021B  00A1               	movwf	?_eeprom_write
  2011  021C  0847               	movf	_tmp_11+3,w
  2012  021D  0747               	addwf	_tmp_11+3,w
  2013  021E  0747               	addwf	_tmp_11+3,w
  2014  021F  3E10               	addlw	16
  2015  0220  2253  120A  118A   	fcall	_eeprom_write
  2016  0223  27FD               	call	PL3	;select bank 0
  2017  0224  0849               	movf	_tmp_11+5,w
  2018  0225  00F4               	movwf	??_a_m0_tOnOff_save
  2019  0226  084A               	movf	_tmp_11+6,w
  2020  0227  00F5               	movwf	??_a_m0_tOnOff_save+1
  2021  0228  084B               	movf	_tmp_11+7,w
  2022  0229  00F6               	movwf	??_a_m0_tOnOff_save+2
  2023  022A  3002               	movlw	2
  2024  022B                     u6015:
  2025  022B  1003               	clrc
  2026  022C  0DF4               	rlf	??_a_m0_tOnOff_save,f
  2027  022D  0DF5               	rlf	??_a_m0_tOnOff_save+1,f
  2028  022E  0DF6               	rlf	??_a_m0_tOnOff_save+2,f
  2029  022F  3EFF               	addlw	-1
  2030  0230  1D03               	skipz
  2031  0231  2A2B               	goto	u6015
  2032  0232  3008               	movlw	8
  2033  0233  00F7               	movwf	??_a_m0_tOnOff_save+3
  2034  0234                     u6025:
  2035  0234  0D76               	rlf	??_a_m0_tOnOff_save+2,w
  2036  0235  0CF6               	rrf	??_a_m0_tOnOff_save+2,f
  2037  0236  0CF5               	rrf	??_a_m0_tOnOff_save+1,f
  2038  0237  0CF4               	rrf	??_a_m0_tOnOff_save,f
  2039  0238  0BF7               	decfsz	??_a_m0_tOnOff_save+3,f
  2040  0239  2A34               	goto	u6025
  2041  023A  0874               	movf	??_a_m0_tOnOff_save,w
  2042  023B  00A1               	movwf	?_eeprom_write
  2043  023C  0847               	movf	_tmp_11+3,w
  2044  023D  0747               	addwf	_tmp_11+3,w
  2045  023E  0747               	addwf	_tmp_11+3,w
  2046  023F  3E11               	addlw	17
  2047  0240  2253  120A  118A   	fcall	_eeprom_write
  2048  0243  27FD               	call	PL3	;select bank 0
  2049  0244  0849               	movf	_tmp_11+5,w
  2050  0245  00F4               	movwf	??_a_m0_tOnOff_save
  2051  0246  1003               	clrc
  2052  0247  0DF4               	rlf	??_a_m0_tOnOff_save,f
  2053  0248  1003               	clrc
  2054  0249  0D74               	rlf	??_a_m0_tOnOff_save,w
  2055  024A  00A1               	movwf	?_eeprom_write
  2056  024B  0847               	movf	_tmp_11+3,w
  2057  024C  0747               	addwf	_tmp_11+3,w
  2058  024D  0747               	addwf	_tmp_11+3,w
  2059  024E  3E12               	addlw	18
  2060  024F  2253  120A  118A   	fcall	_eeprom_write
  2061                           ;fsm_actions.h: 870: a_m0_tOnOff_showString();
  2062  0252  2ACC               	ljmp	l30005551
  2063  0253                     __end_of_a_m0_tOnOff_save:
  2064  0253                     __ptext1239:	; =============== function ___awmod ends ============
  2065                           ; *************** function _eeprom_write *****************
  2066                           ; Defined at:
  2067                           ;		line 8 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\eewrite.c"
  2068                           ; Parameters:    Size  Location     Type
  2069                           ;  addr            1    wreg     unsigned char 
  2070                           ;  value           1    1[BANK0 ] unsigned char 
  2071                           ; Auto vars:     Size  Location     Type
  2072                           ;  addr            1    0[BANK0 ] unsigned char 
  2073                           ; Return value:  Size  Location     Type
  2074                           ;		None               void
  2075                           ; Registers used:
  2076                           ;		wreg, status,2, status,0
  2077                           ; Tracked objects:
  2078                           ;		On entry : 60/0
  2079                           ;		On exit  : 0/0
  2080                           ;		Unchanged: FFF9F/0
  2081                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2082                           ;      Locals:         0       2       0       0       0
  2083                           ;      Temp:     0
  2084                           ;      Total:    2
  2085                           ; This function calls:
  2086                           ;		Nothing
  2087                           ; This function is called by:
  2088                           ;		_a_m0_first_save
  2089                           ;		_a_m0_input_save
  2090                           ;		_a_m0_nMem_save
  2091                           ;		_a_m0_tOnOff_save
  2092                           ; This function uses a non-reentrant model
  2093                           ; 
  2094  0253                     _eeprom_write:
  2095                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2096                           ;eeprom_write@addr stored from wreg
  2097  0253  00A0               	movwf	eeprom_write@addr
  2098  0254                     l469:
  2099  0254  1683               	bsf	3,5	;RP0=1, select bank3
  2100  0255  1703               	bsf	3,6	;RP1=1, select bank3
  2101  0256  188C               	btfsc	12,1
  2102  0257  2A54               	goto	l469
  2103  0258  27FD               	call	PL3	;select bank 0
  2104  0259  0820               	movf	eeprom_write@addr,w
  2105  025A  1703               	bsf	3,6	;RP1=1, select bank2
  2106  025B  008D               	movwf	13	;volatile
  2107  025C  1303               	bcf	3,6	;RP1=0, select bank0
  2108  025D  0821               	movf	eeprom_write@value,w
  2109  025E  1703               	bsf	3,6	;RP1=1, select bank2
  2110  025F  008C               	movwf	12	;volatile
  2111  0260  303F               	movlw	63
  2112  0261  1683               	bsf	3,5	;RP0=1, select bank3
  2113  0262  058C               	andwf	12,f	;volatile
  2114  0263  1003               	bcf	3,0
  2115  0264  27FD               	call	PL3	;select bank 0
  2116  0265  1B8B               	btfsc	11,7
  2117  0266  1403               	bsf	3,0
  2118  0267  138B               	bcf	11,7
  2119  0268  1683               	bsf	3,5	;RP0=1, select bank3
  2120  0269  1703               	bsf	3,6	;RP1=1, select bank3
  2121  026A  150C               	bsf	12,2
  2122  026B  3055               	movlw	85
  2123  026C  008D               	movwf	13	;volatile
  2124  026D  30AA               	movlw	170
  2125  026E  008D               	movwf	13	;volatile
  2126  026F  148C               	bsf	12,1
  2127  0270  110C               	bcf	12,2
  2128  0271  1C03               	btfss	3,0
  2129  0272  0008               	return
  2130  0273  27FD               	call	PL3	;select bank 0
  2131  0274  178B               	bsf	11,7
  2132  0275  0008               	return
  2133  0276                     __end_of_eeprom_write:
  2134  0276                     __ptext1204:	; =============== function _a_m0_tOnOff_entrance ends ============
  2135                           ; *************** function _a_m0_input_inc *****************
  2136                           ; Defined at:
  2137                           ;		line 528 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2138                           ; Parameters:    Size  Location     Type
  2139                           ;		None
  2140                           ; Auto vars:     Size  Location     Type
  2141                           ;		None
  2142                           ; Return value:  Size  Location     Type
  2143                           ;		None               void
  2144                           ; Registers used:
  2145                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2146                           ; Tracked objects:
  2147                           ;		On entry : 60/0
  2148                           ;		On exit  : 60/0
  2149                           ;		Unchanged: FFE9F/0
  2150                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151                           ;      Locals:         0       0       0       0       0
  2152                           ;      Temp:     0
  2153                           ;      Total:    0
  2154                           ; This function calls:
  2155                           ;		_a_m0_input_set
  2156                           ; This function is called by:
  2157                           ; This function uses a non-reentrant model
  2158                           ; 
  2159  0276                     _a_m0_input_inc:	;fsm_actions.h: 527: void a_m0_input_inc(void)
  2160                           ;fsm_actions.h: 528: {
  2161                           ;fsm_actions.h: 529: if(tmp_11.menuCharAuxiliar==(M0_INPUT_CANT-1))
  2162                           ; Regs used in _a_m0_input_inc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2163  0276  0848               	movf	_tmp_11+4,w
  2164  0277  3A04               	xorlw	4
  2165  0278  1D03               	skipz
  2166  0279  2A7C               	goto	l30005531
  2167                           ;fsm_actions.h: 530: tmp_11.menuCharAuxiliar = 0;
  2168  027A  01C8               	clrf	_tmp_11+4
  2169  027B  2A7D               	goto	l30005532
  2170  027C                     l30005531:
  2171                           ;fsm_actions.h: 531: else
  2172                           ;fsm_actions.h: 532: tmp_11.menuCharAuxiliar++;
  2173  027C  0AC8               	incf	_tmp_11+4,f
  2174  027D                     l30005532:
  2175                           ;fsm_actions.h: 534: a_m0_input_set();
  2176  027D  2A7E               	ljmp	l30005516
  2177  027E                     __end_of_a_m0_input_inc:
  2178  027E                     __ptext1216:	; =============== function _a_m0_input ends ============
  2179                           ; *************** function _a_m0_input_set *****************
  2180                           ; Defined at:
  2181                           ;		line 507 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2182                           ; Parameters:    Size  Location     Type
  2183                           ;		None
  2184                           ; Auto vars:     Size  Location     Type
  2185                           ;		None
  2186                           ; Return value:  Size  Location     Type
  2187                           ;		None               void
  2188                           ; Registers used:
  2189                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2190                           ; Tracked objects:
  2191                           ;		On entry : 60/0
  2192                           ;		On exit  : 60/0
  2193                           ;		Unchanged: FFE9F/0
  2194                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2195                           ;      Locals:         0       0       0       0       0
  2196                           ;      Temp:     0
  2197                           ;      Total:    0
  2198                           ; This function calls:
  2199                           ;		_d7sm_puts_scroll
  2200                           ; This function is called by:
  2201                           ;		_a_m0_input_inc
  2202                           ; This function uses a non-reentrant model
  2203                           ; 
  2204  027E                     _a_m0_input_set:	;fsm_actions.h: 506: void a_m0_input_set(void)
  2205                           ;fsm_actions.h: 507: {
  2206  027E                     l30005516:	; Regs used in _a_m0_input_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2207                           ;fsm_actions.h: 508: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  2208  027E  10D5               	bcf	_t0Mem+3,1
  2209  027F  30B1               	movlw	low (_t0DelayConstant+1)
  2210  0280  0084               	movwf	4
  2211  0281  3010               	movlw	high (_t0DelayConstant+1)
  2212  0282  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  2213  0287  00D4               	movwf	_t0Mem+2
  2214  0288  1155               	bcf	_t0Mem+3,2
  2215                           ;fsm_actions.h: 509: tmp_11.flag_inputSettingLedBlink = 1;
  2216  0289  15C4               	bsf	_tmp_11,3
  2217                           ;fsm_actions.h: 511: if(estadoFsm==S__M0__INPUT)
  2218  028A  0879               	movf	_estadoFsm,w
  2219  028B  3A06               	xorlw	6
  2220  028C  1D03               	skipz
  2221  028D  2A91               	goto	l30005528
  2222                           ;fsm_actions.h: 512: tmp_11.menuCharAuxiliar = tmp_11.mem_input;
  2223  028E  0845               	movf	_tmp_11+1,w
  2224  028F  3907               	andlw	7
  2225  0290  00C8               	movwf	_tmp_11+4
  2226  0291                     l30005528:
  2227  0291  0848               	movf	_tmp_11+4,w
  2228  0292  3A00               	xorlw	0
  2229  0293  1903               	skipnz
  2230  0294  2AA2               	goto	l30005522
  2231  0295  3A01               	xorlw	1
  2232  0296  1903               	skipnz
  2233  0297  2AA7               	goto	l30005523
  2234  0298  3A03               	xorlw	3
  2235  0299  1903               	skipnz
  2236  029A  2AAC               	goto	l30005524
  2237  029B  3A01               	xorlw	1
  2238  029C  1903               	skipnz
  2239  029D  2AB6               	goto	l30005526
  2240  029E  3A07               	xorlw	7
  2241  029F  1D03               	btfss	3,2
  2242  02A0  0008               	return
  2243  02A1  2AB1               	goto	l30005525
  2244  02A2                     l30005522:
  2245  02A2  30BA               	movlw	low STR_9
  2246  02A3  00A3               	movwf	?_d7sm_puts_scroll
  2247  02A4  3010               	movlw	high STR_9
  2248  02A5  00A4               	movwf	?_d7sm_puts_scroll+1
  2249  02A6  2B54               	ljmp	l30005427
  2250  02A7                     l30005523:
  2251  02A7  30E6               	movlw	low STR_10
  2252  02A8  00A3               	movwf	?_d7sm_puts_scroll
  2253  02A9  3010               	movlw	high STR_10
  2254  02AA  00A4               	movwf	?_d7sm_puts_scroll+1
  2255  02AB  2B54               	ljmp	l30005427
  2256  02AC                     l30005524:
  2257  02AC  30EF               	movlw	low STR_11
  2258  02AD  00A3               	movwf	?_d7sm_puts_scroll
  2259  02AE  3010               	movlw	high STR_11
  2260  02AF  00A4               	movwf	?_d7sm_puts_scroll+1
  2261  02B0  2B54               	ljmp	l30005427
  2262  02B1                     l30005525:
  2263  02B1  301D               	movlw	low STR_12
  2264  02B2  00A3               	movwf	?_d7sm_puts_scroll
  2265  02B3  3011               	movlw	high STR_12
  2266  02B4  00A4               	movwf	?_d7sm_puts_scroll+1
  2267  02B5  2B54               	ljmp	l30005427
  2268  02B6                     l30005526:
  2269  02B6  30D7               	movlw	low STR_13
  2270  02B7  00A3               	movwf	?_d7sm_puts_scroll
  2271  02B8  3010               	movlw	high STR_13
  2272  02B9  00A4               	movwf	?_d7sm_puts_scroll+1
  2273  02BA  2B54               	ljmp	l30005427
  2274  02BB                     __end_of_a_m0_input_set:
  2275  02BB                     __ptext1199:	; =============== function _main ends ============
  2276                           ; *************** function _a_m0_tOnOff_showString_next *****************
  2277                           ; Defined at:
  2278                           ;		line 691 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2279                           ; Parameters:    Size  Location     Type
  2280                           ;		None
  2281                           ; Auto vars:     Size  Location     Type
  2282                           ;		None
  2283                           ; Return value:  Size  Location     Type
  2284                           ;		None               void
  2285                           ; Registers used:
  2286                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2287                           ; Tracked objects:
  2288                           ;		On entry : 60/0
  2289                           ;		On exit  : 60/0
  2290                           ;		Unchanged: FFE9F/0
  2291                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2292                           ;      Locals:         0       0       0       0       0
  2293                           ;      Temp:     0
  2294                           ;      Total:    0
  2295                           ; This function calls:
  2296                           ;		_a_m0_tOnOff_showString
  2297                           ; This function is called by:
  2298                           ; This function uses a non-reentrant model
  2299                           ; 
  2300  02BB                     _a_m0_tOnOff_showString_next:	;fsm_actions.h: 690: void a_m0_tOnOff_showString_next(void
      +                          )
  2301                           ;fsm_actions.h: 691: {
  2302                           ;fsm_actions.h: 692: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  2303                           ; Regs used in _a_m0_tOnOff_showString_next: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  2304  02BB  10D5               	bcf	_t0Mem+3,1
  2305  02BC  30B1               	movlw	low (_t0DelayConstant+1)
  2306  02BD  0084               	movwf	4
  2307  02BE  3010               	movlw	high (_t0DelayConstant+1)
  2308  02BF  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  2309  02C4  00D4               	movwf	_t0Mem+2
  2310  02C5  1155               	bcf	_t0Mem+3,2
  2311                           ;fsm_actions.h: 694: tmp_11.mainMenuState++;
  2312  02C6  0AC7               	incf	_tmp_11+3,f
  2313                           ;fsm_actions.h: 696: if(tmp_11.mainMenuState==tmp_11.mem_cantMemorias) tmp_11.mainMenuSt
      +                          ate=0;
  2314  02C7  0847               	movf	_tmp_11+3,w
  2315  02C8  0646               	xorwf	_tmp_11+2,w
  2316  02C9  1903               	btfsc	3,2
  2317  02CA  01C7               	clrf	_tmp_11+3
  2318                           ;fsm_actions.h: 698: a_m0_tOnOff_showString();
  2319  02CB  2ACC               	ljmp	l30005551
  2320  02CC                     __end_of_a_m0_tOnOff_showString_next:
  2321  02CC                     __ptext1237:	; =============== function ___tmul ends ============
  2322                           ; *************** function _a_m0_tOnOff_showString *****************
  2323                           ; Defined at:
  2324                           ;		line 653 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2325                           ; Parameters:    Size  Location     Type
  2326                           ;		None
  2327                           ; Auto vars:     Size  Location     Type
  2328                           ;  n               1   10[BANK0 ] unsigned char 
  2329                           ;  i               1   13[BANK0 ] unsigned char 
  2330                           ;  s               1    9[BANK0 ] PTR unsigned char 
  2331                           ;		 -> d7sm_buffer(8), 
  2332                           ;  n               1   12[BANK0 ] unsigned char 
  2333                           ;  i               1   11[BANK0 ] unsigned char 
  2334                           ;  s               1    8[BANK0 ] PTR unsigned char 
  2335                           ;		 -> d7sm_buffer(8), 
  2336                           ; Return value:  Size  Location     Type
  2337                           ;		None               void
  2338                           ; Registers used:
  2339                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2340                           ; Tracked objects:
  2341                           ;		On entry : 0/0
  2342                           ;		On exit  : 60/0
  2343                           ;		Unchanged: FFE9F/0
  2344                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2345                           ;      Locals:         2       6       0       0       0
  2346                           ;      Temp:     2
  2347                           ;      Total:    8
  2348                           ; This function calls:
  2349                           ;		___lbmod
  2350                           ;		___awdiv
  2351                           ;		_d7sm_puts_scroll
  2352                           ; This function is called by:
  2353                           ;		_a_m0_tOnOff_entrance
  2354                           ;		_a_m0_tOnOff_showString_next
  2355                           ;		_a_m0_tOnOff_save
  2356                           ; This function uses a non-reentrant model
  2357                           ; 
  2358  02CC                     _a_m0_tOnOff_showString:	;fsm_actions.h: 652: void a_m0_tOnOff_showString(void)
  2359                           ;fsm_actions.h: 653: {
  2360  02CC                     l30005551:	; Regs used in _a_m0_tOnOff_showString: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  2361  02CC  2B3D               	goto	l30005578
  2362  02CD                     l30005552:
  2363                           ;fsm_actions.h: 657: d7sm_buffer[0]='t';
  2364  02CD  3074               	movlw	116
  2365  02CE  1683               	bsf	3,5	;RP0=1, select bank3
  2366  02CF  1703               	bsf	3,6	;RP1=1, select bank3
  2367  02D0  00BB               	movwf	_d7sm_buffer^(0+384)
  2368                           ;fsm_actions.h: 658: d7sm_buffer[1]='o';
  2369  02D1  306F               	movlw	111
  2370  02D2  00BC               	movwf	(_d7sm_buffer^(0+384)+1)
  2371                           ;fsm_actions.h: 659: d7sm_buffer[2]='n';
  2372  02D3  306E               	movlw	110
  2373  02D4  00BD               	movwf	(_d7sm_buffer^(0+384)+2)
  2374                           ;fsm_actions.h: 660: d7sm_buffer[3]='_';
  2375  02D5  305F               	movlw	95
  2376  02D6  00BE               	movwf	(_d7sm_buffer^(0+384)+3)
  2377                           ;fsm_actions.h: 663: d7sm_buffer[6]=0;
  2378  02D7  01C1               	clrf	(_d7sm_buffer^(0+384)+6)
  2379                           ;fsm_actions.h: 665: { char i,n=tmp_11.mainMenuState/2,*s=&d7sm_buffer[4]; s+=2-1; for(i
      +                          =0;i<2;i++) { *(s--)='0'+(n%10); n/=10; } };
  2380  02D8  1003               	clrc
  2381  02D9  27FD               	call	PL3	;select bank 0
  2382  02DA  0C47               	rrf	_tmp_11+3,w
  2383  02DB  00AC               	movwf	a_m0_tOnOff_showString@n
  2384  02DC  30BF               	movlw	(_d7sm_buffer+4)& (0+255)
  2385  02DD  00A8               	movwf	a_m0_tOnOff_showString@s
  2386  02DE  0AA8               	incf	a_m0_tOnOff_showString@s,f
  2387  02DF  01AB               	clrf	a_m0_tOnOff_showString@i
  2388  02E0                     l30005559:
  2389  02E0  0828               	movf	a_m0_tOnOff_showString@s,w
  2390  02E1  0084               	movwf	4
  2391  02E2  300A               	movlw	10
  2392  02E3  00A3               	movwf	?___lbmod
  2393  02E4  082C               	movf	a_m0_tOnOff_showString@n,w
  2394  02E5  279D  120A  118A   	fcall	___lbmod
  2395  02E8  3E30               	addlw	48
  2396  02E9  1783               	bsf	3,7	;select IRP bank2
  2397  02EA  0080               	movwf	0
  2398  02EB  03A8               	decf	a_m0_tOnOff_showString@s,f
  2399  02EC  082C               	movf	a_m0_tOnOff_showString@n,w
  2400  02ED  00A4               	movwf	?___awdiv
  2401  02EE  01A5               	clrf	?___awdiv+1
  2402  02EF  300A               	movlw	10
  2403  02F0  00A6               	movwf	?___awdiv+2
  2404  02F1  01A7               	clrf	?___awdiv+3
  2405  02F2  2422  120A  118A   	fcall	___awdiv
  2406  02F5  1383               	bcf	3,7	;select IRP bank0
  2407  02F6  0824               	movf	?___awdiv,w
  2408  02F7  00AC               	movwf	a_m0_tOnOff_showString@n
  2409  02F8  0AAB               	incf	a_m0_tOnOff_showString@i,f
  2410  02F9  3002               	movlw	2
  2411  02FA  022B               	subwf	a_m0_tOnOff_showString@i,w
  2412  02FB  1803               	btfsc	3,0
  2413  02FC  2B4F               	goto	l30005579
  2414  02FD  2AE0               	goto	l30005559
  2415  02FE                     l30005564:
  2416                           ;fsm_actions.h: 669: d7sm_buffer[0]='t';
  2417  02FE  3074               	movlw	116
  2418  02FF  1683               	bsf	3,5	;RP0=1, select bank3
  2419  0300  1703               	bsf	3,6	;RP1=1, select bank3
  2420  0301  00BB               	movwf	_d7sm_buffer^(0+384)
  2421                           ;fsm_actions.h: 670: d7sm_buffer[1]='o';
  2422  0302  306F               	movlw	111
  2423  0303  00BC               	movwf	(_d7sm_buffer^(0+384)+1)
  2424                           ;fsm_actions.h: 671: d7sm_buffer[2]='f';
  2425  0304  3066               	movlw	102
  2426  0305  00BD               	movwf	(_d7sm_buffer^(0+384)+2)
  2427                           ;fsm_actions.h: 672: d7sm_buffer[3]='f';
  2428  0306  00BE               	movwf	(_d7sm_buffer^(0+384)+3)
  2429                           ;fsm_actions.h: 673: d7sm_buffer[4]='_';
  2430  0307  305F               	movlw	95
  2431  0308  00BF               	movwf	(_d7sm_buffer^(0+384)+4)
  2432                           ;fsm_actions.h: 676: d7sm_buffer[7]=0;
  2433  0309  01C2               	clrf	(_d7sm_buffer^(0+384)+7)
  2434  030A  27FD               	call	PL3	;select bank 0
  2435                           ;fsm_actions.h: 678: { char i,n=(tmp_11.mainMenuState-1)/2,*s=&d7sm_buffer[5]; s+=2-1; f
      +                          or(i=0;i<2;i++) { *(s--)='0'+(n%10); n/=10; } };
  2436  030B  0847               	movf	_tmp_11+3,w
  2437  030C  3EFF               	addlw	255
  2438  030D  00A4               	movwf	?___awdiv
  2439  030E  30FF               	movlw	255
  2440  030F  1803               	skipnc
  2441  0310  3000               	movlw	256
  2442  0311  00A5               	movwf	?___awdiv+1
  2443  0312  3002               	movlw	2
  2444  0313  00A6               	movwf	?___awdiv+2
  2445  0314  01A7               	clrf	?___awdiv+3
  2446  0315  2422  120A  118A   	fcall	___awdiv
  2447  0318  1383               	bcf	3,7	;select IRP bank0
  2448  0319  0824               	movf	?___awdiv,w
  2449  031A  00AA               	movwf	a_m0_tOnOff_showString@n_1777
  2450  031B  30C0               	movlw	(_d7sm_buffer+5)& (0+255)
  2451  031C  00A9               	movwf	a_m0_tOnOff_showString@s_1778
  2452  031D  0AA9               	incf	a_m0_tOnOff_showString@s_1778,f
  2453  031E  01AD               	clrf	a_m0_tOnOff_showString@i_1776
  2454  031F                     l30005572:
  2455  031F  0829               	movf	a_m0_tOnOff_showString@s_1778,w
  2456  0320  0084               	movwf	4
  2457  0321  300A               	movlw	10
  2458  0322  00A3               	movwf	?___lbmod
  2459  0323  082A               	movf	a_m0_tOnOff_showString@n_1777,w
  2460  0324  279D  120A  118A   	fcall	___lbmod
  2461  0327  3E30               	addlw	48
  2462  0328  1783               	bsf	3,7	;select IRP bank2
  2463  0329  0080               	movwf	0
  2464  032A  03A9               	decf	a_m0_tOnOff_showString@s_1778,f
  2465  032B  082A               	movf	a_m0_tOnOff_showString@n_1777,w
  2466  032C  00A4               	movwf	?___awdiv
  2467  032D  01A5               	clrf	?___awdiv+1
  2468  032E  300A               	movlw	10
  2469  032F  00A6               	movwf	?___awdiv+2
  2470  0330  01A7               	clrf	?___awdiv+3
  2471  0331  2422  120A  118A   	fcall	___awdiv
  2472  0334  1383               	bcf	3,7	;select IRP bank0
  2473  0335  0824               	movf	?___awdiv,w
  2474  0336  00AA               	movwf	a_m0_tOnOff_showString@n_1777
  2475  0337  0AAD               	incf	a_m0_tOnOff_showString@i_1776,f
  2476  0338  3002               	movlw	2
  2477  0339  022D               	subwf	a_m0_tOnOff_showString@i_1776,w
  2478  033A  1803               	btfsc	3,0
  2479  033B  2B4F               	goto	l30005579
  2480  033C  2B1F               	goto	l30005572
  2481  033D                     l30005578:
  2482  033D  27FD               	call	PL3	;select bank 0
  2483  033E  0847               	movf	_tmp_11+3,w
  2484  033F  3901               	andlw	1
  2485  0340  00F2               	movwf	??_a_m0_tOnOff_showString
  2486  0341  01F3               	clrf	??_a_m0_tOnOff_showString+1
  2487  0342  2B4B               	goto	l30139
  2488  0343                     l30140:
  2489  0343  0872               	movf	??_a_m0_tOnOff_showString,w
  2490  0344  3A00               	xorlw	0
  2491  0345  1903               	skipnz
  2492  0346  2ACD               	goto	l30005552
  2493  0347  3A01               	xorlw	1
  2494  0348  1903               	skipnz
  2495  0349  2AFE               	goto	l30005564
  2496  034A  2B4F               	goto	l30005579
  2497  034B                     l30139:
  2498  034B  0873               	movf	??_a_m0_tOnOff_showString+1,w
  2499  034C  3A00               	xorlw	0
  2500  034D  1903               	skipnz
  2501  034E  2B43               	goto	l30140
  2502  034F                     l30005579:
  2503                           ;fsm_actions.h: 684: d7sm_puts_scroll((char *)&d7sm_buffer);
  2504  034F  30BB               	movlw	_d7sm_buffer& (0+255)
  2505  0350  00A3               	movwf	?_d7sm_puts_scroll
  2506  0351  3081               	movlw	129
  2507  0352  00A4               	movwf	?_d7sm_puts_scroll+1
  2508  0353  2B54               	ljmp	l30005427
  2509  0354                     __end_of_a_m0_tOnOff_showString:
  2510  0354                     __ptext1245:	; =============== function _ucharToStr ends ============
  2511                           ; *************** function _d7sm_puts_scroll *****************
  2512                           ; Defined at:
  2513                           ;		line 188 in file "F:\fgr\16gb\libSwPic\libSwPic\disp7segMux\20220922\d7sm.c"
  2514                           ; Parameters:    Size  Location     Type
  2515                           ;  string          2    3[BANK0 ] PTR unsigned char 
  2516                           ;		 -> STR_1(6), STR_2(16), STR_3(17), STR_6(17), 
  2517                           ;		 -> STR_4(6), STR_5(16), d7sm_buffer(8), STR_8(4), 
  2518                           ;		 -> STR_7(3), STR_11(10), STR_10(9), STR_12(12), 
  2519                           ;		 -> STR_9(5), STR_13(7), STR_21(16), STR_20(6), 
  2520                           ;		 -> STR_22(17), STR_25(17), STR_23(6), STR_24(16), 
  2521                           ;		 -> STR_26(6), STR_27(16), STR_28(17), 
  2522                           ; Auto vars:     Size  Location     Type
  2523                           ;  s               2    1[BANK0 ] PTR unsigned char 
  2524                           ;		 -> STR_1(6), STR_2(16), STR_3(17), STR_6(17), 
  2525                           ;		 -> STR_4(6), STR_5(16), d7sm_buffer(8), STR_8(4), 
  2526                           ;		 -> STR_7(3), STR_11(10), STR_10(9), STR_12(12), 
  2527                           ;		 -> STR_9(5), STR_13(7), STR_21(16), STR_20(6), 
  2528                           ;		 -> STR_22(17), STR_25(17), STR_23(6), STR_24(16), 
  2529                           ;		 -> STR_26(6), STR_27(16), STR_28(17), 
  2530                           ;  stringStrlen    1    0[BANK0 ] unsigned char 
  2531                           ; Return value:  Size  Location     Type
  2532                           ;		None               void
  2533                           ; Registers used:
  2534                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2535                           ; Tracked objects:
  2536                           ;		On entry : 60/0
  2537                           ;		On exit  : 60/0
  2538                           ;		Unchanged: FFE9F/0
  2539                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2540                           ;      Locals:         0       5       0       0       0
  2541                           ;      Temp:     0
  2542                           ;      Total:    5
  2543                           ; This function calls:
  2544                           ;		Nothing
  2545                           ; This function is called by:
  2546                           ;		_a_showTimerIdOn
  2547                           ;		_a_m0_first
  2548                           ;		_a_m0_first_set
  2549                           ;		_a_m0_input
  2550                           ;		_a_m0_input_set
  2551                           ;		_a_m0_nMem
  2552                           ;		_a_m0_tOnOff_showString
  2553                           ; This function uses a non-reentrant model
  2554                           ; 
  2555  0354                     _d7sm_puts_scroll:	;d7sm.c: 187: void d7sm_puts_scroll(char *string)
  2556                           ;d7sm.c: 188: {
  2557  0354                     l30005427:	; Regs used in _d7sm_puts_scroll: [wreg-fsr0h+status,2+status,0+pclath]
  2558                           ;d7sm.c: 190: { t0Mem[T0_D7SM_SCROLL].flag=0; t0Mem[T0_D7SM_SCROLL].prescaler=t0DelayCon
      +                          stant[T0_D7SM_SCROLL]; t0Mem[T0_D7SM_SCROLL].pause=0; t0Mem[T0_D7SM_SCROLL].loop=1; };
  2559  0354  10DB               	bcf	_t0Mem+9,1
  2560  0355  30B4               	movlw	low (_t0DelayConstant+4)
  2561  0356  0084               	movwf	4
  2562  0357  3010               	movlw	high (_t0DelayConstant+4)
  2563  0358  160A  118A  2000   	fcall	stringtab
  2564  035B  00DA               	movwf	_t0Mem+8
  2565  035C  115B               	bcf	_t0Mem+9,2
  2566  035D  145B               	bsf	_t0Mem+9,0
  2567                           ;d7sm.c: 191: disp.strOffs=0;
  2568  035E  01C0               	clrf	_disp+2
  2569                           ;d7sm.c: 192: disp.str=string;
  2570  035F  0824               	movf	d7sm_puts_scroll@string+1,w
  2571  0360  00BF               	movwf	_disp+1
  2572  0361  0823               	movf	d7sm_puts_scroll@string,w
  2573  0362  00BE               	movwf	_disp
  2574                           ;d7sm.c: 194: char *s=string, stringStrlen; while(*s) s++; stringStrlen=(int)s-(int)stri
      +                          ng;;
  2575  0363  0824               	movf	d7sm_puts_scroll@string+1,w
  2576  0364  00A2               	movwf	d7sm_puts_scroll@s+1
  2577  0365  0823               	movf	d7sm_puts_scroll@string,w
  2578  0366  00A1               	movwf	d7sm_puts_scroll@s
  2579  0367                     l30005435:
  2580  0367  0821               	movf	d7sm_puts_scroll@s,w
  2581  0368  0084               	movwf	4
  2582  0369  0822               	movf	d7sm_puts_scroll@s+1,w
  2583  036A  160A  118A  2000   	fcall	stringtab
      +       120A  118A         
  2584  036F  3800               	iorlw	0
  2585  0370  1903               	btfsc	3,2
  2586  0371  2B76               	goto	l30005436
  2587  0372  0AA1               	incf	d7sm_puts_scroll@s,f
  2588  0373  1903               	skipnz
  2589  0374  0AA2               	incf	d7sm_puts_scroll@s+1,f
  2590  0375  2B67               	goto	l30005435
  2591  0376                     l30005436:
  2592  0376  0823               	movf	d7sm_puts_scroll@string,w
  2593  0377  0221               	subwf	d7sm_puts_scroll@s,w
  2594  0378  00A0               	movwf	d7sm_puts_scroll@stringStrlen
  2595                           ;d7sm.c: 195: disp.strLen=stringStrlen;
  2596  0379  00C1               	movwf	_disp+3
  2597                           ;d7sm.c: 197: { disp.d0_titila=0;; disp.d1_titila=0;; disp.d2_titila=0;; disp.d3_titila=
      +                          0;; {}; {}; };
  2598  037A  1043               	bcf	_disp+5,0
  2599  037B  10C3               	bcf	_disp+5,1
  2600  037C  1143               	bcf	_disp+5,2
  2601  037D  11C3               	bcf	_disp+5,3
  2602                           ;d7sm.c: 198: { disp.d0_dp=0;; disp.d1_dp=0;; disp.d2_dp=0;; disp.d3_dp=0;; {}; {}; };
  2603  037E  1243               	bcf	_disp+5,4
  2604  037F  12C3               	bcf	_disp+5,5
  2605  0380  1343               	bcf	_disp+5,6
  2606  0381  13C3               	bcf	_disp+5,7
  2607  0382  0008               	return
  2608  0383                     __end_of_d7sm_puts_scroll:
  2609  0383                     __ptext1221:	; =============== function _a_showTimerIdOff ends ============
  2610                           ; *************** function _a_showTimerIdOn *****************
  2611                           ; Defined at:
  2612                           ;		line 237 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2613                           ; Parameters:    Size  Location     Type
  2614                           ;		None
  2615                           ; Auto vars:     Size  Location     Type
  2616                           ;  n               1   11[BANK0 ] unsigned char 
  2617                           ;  i               1   10[BANK0 ] unsigned char 
  2618                           ;  s               1    9[BANK0 ] PTR unsigned char 
  2619                           ;		 -> d7sm_buffer(8), 
  2620                           ;  n               1   12[BANK0 ] unsigned char 
  2621                           ;  i               1   13[BANK0 ] unsigned char 
  2622                           ;  s               1    8[BANK0 ] PTR unsigned char 
  2623                           ;		 -> d7sm_buffer(8), 
  2624                           ;  id              1   14[BANK0 ] unsigned char 
  2625                           ; Return value:  Size  Location     Type
  2626                           ;		None               void
  2627                           ; Registers used:
  2628                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2629                           ; Tracked objects:
  2630                           ;		On entry : 60/0
  2631                           ;		On exit  : 60/0
  2632                           ;		Unchanged: FFE9F/0
  2633                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2634                           ;      Locals:         2       7       0       0       0
  2635                           ;      Temp:     2
  2636                           ;      Total:    9
  2637                           ; This function calls:
  2638                           ;		___awdiv
  2639                           ;		___lbmod
  2640                           ;		_d7sm_puts_scroll
  2641                           ; This function is called by:
  2642                           ; This function uses a non-reentrant model
  2643                           ; 
  2644  0383                     _a_showTimerIdOn:	;fsm_actions.h: 236: void a_showTimerIdOn(void)
  2645                           ;fsm_actions.h: 237: {
  2646                           ;fsm_actions.h: 238: tmp_11.flag_showTimerId=1;
  2647                           ; Regs used in _a_showTimerIdOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2648  0383  1444               	bsf	_tmp_11,0
  2649                           ;fsm_actions.h: 240: char id;
  2650                           ;fsm_actions.h: 242: if(tmp_11.p2eepromAddr==EEADDR__16_00__TON_OFF)
  2651  0384  084D               	movf	_tmp_11+9,w
  2652  0385  3A10               	xorlw	16
  2653  0386  1D03               	skipz
  2654  0387  2B8A               	goto	l30005449
  2655                           ;fsm_actions.h: 243: id=tmp_11.mem_cantMemorias-1;
  2656  0388  0846               	movf	_tmp_11+2,w
  2657  0389  2B99               	goto	L9
  2658  038A                     l30005449:
  2659                           ;fsm_actions.h: 245: else
  2660                           ;fsm_actions.h: 246: id=(tmp_11.p2eepromAddr-EEADDR__16_00__TON_OFF)/
  2661                           ;fsm_actions.h: 247: (char)sizeof(short long)-1;
  2662  038A  084D               	movf	_tmp_11+9,w
  2663  038B  3EF0               	addlw	240
  2664  038C  00A4               	movwf	?___awdiv
  2665  038D  30FF               	movlw	255
  2666  038E  1803               	skipnc
  2667  038F  3000               	movlw	256
  2668  0390  00A5               	movwf	?___awdiv+1
  2669  0391  3003               	movlw	3
  2670  0392  00A6               	movwf	?___awdiv+2
  2671  0393  01A7               	clrf	?___awdiv+3
  2672  0394  2422  120A  118A   	fcall	___awdiv
  2673  0397  1383               	bcf	3,7	;select IRP bank0
  2674  0398  0824               	movf	?___awdiv,w
  2675  0399                     L9:
  2676  0399  3EFF               	addlw	255
  2677  039A  00AE               	movwf	a_showTimerIdOn@id
  2678  039B  2C0C               	goto	l30005476
  2679  039C                     l30005450:
  2680                           ;fsm_actions.h: 253: d7sm_buffer[0]='t';
  2681  039C  3074               	movlw	116
  2682  039D  1683               	bsf	3,5	;RP0=1, select bank3
  2683  039E  1703               	bsf	3,6	;RP1=1, select bank3
  2684  039F  00BB               	movwf	_d7sm_buffer^(0+384)
  2685                           ;fsm_actions.h: 254: d7sm_buffer[1]='o';
  2686  03A0  306F               	movlw	111
  2687  03A1  00BC               	movwf	(_d7sm_buffer^(0+384)+1)
  2688                           ;fsm_actions.h: 255: d7sm_buffer[2]='n';
  2689  03A2  306E               	movlw	110
  2690  03A3  00BD               	movwf	(_d7sm_buffer^(0+384)+2)
  2691                           ;fsm_actions.h: 256: d7sm_buffer[3]='_';
  2692  03A4  305F               	movlw	95
  2693  03A5  00BE               	movwf	(_d7sm_buffer^(0+384)+3)
  2694                           ;fsm_actions.h: 259: d7sm_buffer[6]=0;
  2695  03A6  01C1               	clrf	(_d7sm_buffer^(0+384)+6)
  2696                           ;fsm_actions.h: 261: { char i,n=id/2,*s=&d7sm_buffer[4]; s+=2-1; for(i=0;i<2;i++) { *(s-
      +                          -)='0'+(n%10); n/=10; } };
  2697  03A7  1003               	clrc
  2698  03A8  27FD               	call	PL3	;select bank 0
  2699  03A9  0C2E               	rrf	a_showTimerIdOn@id,w
  2700  03AA  00AC               	movwf	a_showTimerIdOn@n
  2701  03AB  30BF               	movlw	(_d7sm_buffer+4)& (0+255)
  2702  03AC  00A8               	movwf	a_showTimerIdOn@s
  2703  03AD  0AA8               	incf	a_showTimerIdOn@s,f
  2704  03AE  01AD               	clrf	a_showTimerIdOn@i
  2705  03AF                     l30005457:
  2706  03AF  0828               	movf	a_showTimerIdOn@s,w
  2707  03B0  0084               	movwf	4
  2708  03B1  300A               	movlw	10
  2709  03B2  00A3               	movwf	?___lbmod
  2710  03B3  082C               	movf	a_showTimerIdOn@n,w
  2711  03B4  279D  120A  118A   	fcall	___lbmod
  2712  03B7  3E30               	addlw	48
  2713  03B8  1783               	bsf	3,7	;select IRP bank2
  2714  03B9  0080               	movwf	0
  2715  03BA  03A8               	decf	a_showTimerIdOn@s,f
  2716  03BB  082C               	movf	a_showTimerIdOn@n,w
  2717  03BC  00A4               	movwf	?___awdiv
  2718  03BD  01A5               	clrf	?___awdiv+1
  2719  03BE  300A               	movlw	10
  2720  03BF  00A6               	movwf	?___awdiv+2
  2721  03C0  01A7               	clrf	?___awdiv+3
  2722  03C1  2422  120A  118A   	fcall	___awdiv
  2723  03C4  1383               	bcf	3,7	;select IRP bank0
  2724  03C5  0824               	movf	?___awdiv,w
  2725  03C6  00AC               	movwf	a_showTimerIdOn@n
  2726  03C7  0AAD               	incf	a_showTimerIdOn@i,f
  2727  03C8  3002               	movlw	2
  2728  03C9  022D               	subwf	a_showTimerIdOn@i,w
  2729  03CA  1803               	btfsc	3,0
  2730  03CB  2C1D               	goto	l30005477
  2731  03CC  2BAF               	goto	l30005457
  2732  03CD                     l30005462:
  2733                           ;fsm_actions.h: 264: d7sm_buffer[0]='t';
  2734  03CD  3074               	movlw	116
  2735  03CE  1683               	bsf	3,5	;RP0=1, select bank3
  2736  03CF  1703               	bsf	3,6	;RP1=1, select bank3
  2737  03D0  00BB               	movwf	_d7sm_buffer^(0+384)
  2738                           ;fsm_actions.h: 265: d7sm_buffer[1]='o';
  2739  03D1  306F               	movlw	111
  2740  03D2  00BC               	movwf	(_d7sm_buffer^(0+384)+1)
  2741                           ;fsm_actions.h: 266: d7sm_buffer[2]='f';
  2742  03D3  3066               	movlw	102
  2743  03D4  00BD               	movwf	(_d7sm_buffer^(0+384)+2)
  2744                           ;fsm_actions.h: 267: d7sm_buffer[3]='f';
  2745  03D5  00BE               	movwf	(_d7sm_buffer^(0+384)+3)
  2746                           ;fsm_actions.h: 268: d7sm_buffer[4]='_';
  2747  03D6  305F               	movlw	95
  2748  03D7  00BF               	movwf	(_d7sm_buffer^(0+384)+4)
  2749                           ;fsm_actions.h: 271: d7sm_buffer[7]=0;
  2750  03D8  01C2               	clrf	(_d7sm_buffer^(0+384)+7)
  2751  03D9  27FD               	call	PL3	;select bank 0
  2752                           ;fsm_actions.h: 273: { char i,n=(id-1)/2,*s=&d7sm_buffer[5]; s+=2-1; for(i=0;i<2;i++) { 
      +                          *(s--)='0'+(n%10); n/=10; } };
  2753  03DA  082E               	movf	a_showTimerIdOn@id,w
  2754  03DB  3EFF               	addlw	255
  2755  03DC  00A4               	movwf	?___awdiv
  2756  03DD  30FF               	movlw	255
  2757  03DE  1803               	skipnc
  2758  03DF  3000               	movlw	256
  2759  03E0  00A5               	movwf	?___awdiv+1
  2760  03E1  3002               	movlw	2
  2761  03E2  00A6               	movwf	?___awdiv+2
  2762  03E3  01A7               	clrf	?___awdiv+3
  2763  03E4  2422  120A  118A   	fcall	___awdiv
  2764  03E7  1383               	bcf	3,7	;select IRP bank0
  2765  03E8  0824               	movf	?___awdiv,w
  2766  03E9  00AB               	movwf	a_showTimerIdOn@n_1737
  2767  03EA  30C0               	movlw	(_d7sm_buffer+5)& (0+255)
  2768  03EB  00A9               	movwf	a_showTimerIdOn@s_1738
  2769  03EC  0AA9               	incf	a_showTimerIdOn@s_1738,f
  2770  03ED  01AA               	clrf	a_showTimerIdOn@i_1736
  2771  03EE                     l30005470:
  2772  03EE  0829               	movf	a_showTimerIdOn@s_1738,w
  2773  03EF  0084               	movwf	4
  2774  03F0  300A               	movlw	10
  2775  03F1  00A3               	movwf	?___lbmod
  2776  03F2  082B               	movf	a_showTimerIdOn@n_1737,w
  2777  03F3  279D  120A  118A   	fcall	___lbmod
  2778  03F6  3E30               	addlw	48
  2779  03F7  1783               	bsf	3,7	;select IRP bank2
  2780  03F8  0080               	movwf	0
  2781  03F9  03A9               	decf	a_showTimerIdOn@s_1738,f
  2782  03FA  082B               	movf	a_showTimerIdOn@n_1737,w
  2783  03FB  00A4               	movwf	?___awdiv
  2784  03FC  01A5               	clrf	?___awdiv+1
  2785  03FD  300A               	movlw	10
  2786  03FE  00A6               	movwf	?___awdiv+2
  2787  03FF  01A7               	clrf	?___awdiv+3
  2788  0400  2422  120A  118A   	fcall	___awdiv
  2789  0403  1383               	bcf	3,7	;select IRP bank0
  2790  0404  0824               	movf	?___awdiv,w
  2791  0405  00AB               	movwf	a_showTimerIdOn@n_1737
  2792  0406  0AAA               	incf	a_showTimerIdOn@i_1736,f
  2793  0407  3002               	movlw	2
  2794  0408  022A               	subwf	a_showTimerIdOn@i_1736,w
  2795  0409  1803               	btfsc	3,0
  2796  040A  2C1D               	goto	l30005477
  2797  040B  2BEE               	goto	l30005470
  2798  040C                     l30005476:
  2799  040C  082E               	movf	a_showTimerIdOn@id,w
  2800  040D  3901               	andlw	1
  2801  040E  00F2               	movwf	??_a_showTimerIdOn
  2802  040F  01F3               	clrf	??_a_showTimerIdOn+1
  2803  0410  2C19               	goto	l30137
  2804  0411                     l30138:
  2805  0411  0872               	movf	??_a_showTimerIdOn,w
  2806  0412  3A00               	xorlw	0
  2807  0413  1903               	skipnz
  2808  0414  2B9C               	goto	l30005450
  2809  0415  3A01               	xorlw	1
  2810  0416  1903               	skipnz
  2811  0417  2BCD               	goto	l30005462
  2812  0418  2C1D               	goto	l30005477
  2813  0419                     l30137:
  2814  0419  0873               	movf	??_a_showTimerIdOn+1,w
  2815  041A  3A00               	xorlw	0
  2816  041B  1903               	skipnz
  2817  041C  2C11               	goto	l30138
  2818  041D                     l30005477:
  2819                           ;fsm_actions.h: 278: d7sm_puts_scroll(&d7sm_buffer);
  2820  041D  30BB               	movlw	_d7sm_buffer& (0+255)
  2821  041E  00A3               	movwf	?_d7sm_puts_scroll
  2822  041F  3081               	movlw	129
  2823  0420  00A4               	movwf	?_d7sm_puts_scroll+1
  2824  0421  2B54               	ljmp	l30005427
  2825  0422                     __end_of_a_showTimerIdOn:
  2826  0422                     __ptext1246:	; =============== function _d7sm_puts_scroll ends ============
  2827                           ; *************** function ___awdiv *****************
  2828                           ; Defined at:
  2829                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\awdiv.c"
  2830                           ; Parameters:    Size  Location     Type
  2831                           ;  dividend        2    4[BANK0 ] int 
  2832                           ;  divisor         2    6[BANK0 ] int 
  2833                           ; Auto vars:     Size  Location     Type
  2834                           ;  quotient        2    2[BANK0 ] int 
  2835                           ;  sign            1    1[BANK0 ] unsigned char 
  2836                           ;  counter         1    0[BANK0 ] unsigned char 
  2837                           ; Return value:  Size  Location     Type
  2838                           ;                  2    4[BANK0 ] int 
  2839                           ; Registers used:
  2840                           ;		wreg, status,2, status,0
  2841                           ; Tracked objects:
  2842                           ;		On entry : 60/0
  2843                           ;		On exit  : 60/0
  2844                           ;		Unchanged: FFF9F/0
  2845                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2846                           ;      Locals:         0       8       0       0       0
  2847                           ;      Temp:     0
  2848                           ;      Total:    8
  2849                           ; This function calls:
  2850                           ;		Nothing
  2851                           ; This function is called by:
  2852                           ;		_a_showTimerIdOn
  2853                           ;		_a_m0_nMem_set
  2854                           ;		_a_m0_tOnOff_showString
  2855                           ;		_d7sm_set_88xx
  2856                           ;		_ucharToStr
  2857                           ; This function uses a non-reentrant model
  2858                           ; 
  2859  0422                     ___awdiv:
  2860                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2861  0422  01A1               	clrf	___awdiv@sign
  2862  0423  1FA7               	btfss	___awdiv@divisor+1,7
  2863  0424  2C2C               	goto	l30005645
  2864  0425  09A6               	comf	___awdiv@divisor,f
  2865  0426  09A7               	comf	___awdiv@divisor+1,f
  2866  0427  0AA6               	incf	___awdiv@divisor,f
  2867  0428  1903               	skipnz
  2868  0429  0AA7               	incf	___awdiv@divisor+1,f
  2869  042A  01A1               	clrf	___awdiv@sign
  2870  042B  0AA1               	incf	___awdiv@sign,f
  2871  042C                     l30005645:
  2872  042C  1FA5               	btfss	___awdiv@dividend+1,7
  2873  042D  2C35               	goto	l30005648
  2874  042E  09A4               	comf	___awdiv@dividend,f
  2875  042F  09A5               	comf	___awdiv@dividend+1,f
  2876  0430  0AA4               	incf	___awdiv@dividend,f
  2877  0431  1903               	skipnz
  2878  0432  0AA5               	incf	___awdiv@dividend+1,f
  2879  0433  3001               	movlw	1
  2880  0434  06A1               	xorwf	___awdiv@sign,f
  2881  0435                     l30005648:
  2882  0435  01A2               	clrf	___awdiv@quotient
  2883  0436  01A3               	clrf	___awdiv@quotient+1
  2884  0437  0827               	movf	___awdiv@divisor+1,w
  2885  0438  0426               	iorwf	___awdiv@divisor,w
  2886  0439  1903               	skipnz
  2887  043A  2C5A               	goto	l30005659
  2888  043B  01A0               	clrf	___awdiv@counter
  2889  043C                     L39:
  2890  043C  0AA0               	incf	___awdiv@counter,f
  2891  043D  1003               	clrc
  2892  043E  1BA7               	btfsc	___awdiv@divisor+1,7
  2893  043F  2C44               	goto	L41
  2894  0440  0DA6               	rlf	___awdiv@divisor,f
  2895  0441  0DA7               	rlf	___awdiv@divisor+1,f
  2896  0442  2C3C               	goto	L39
  2897  0443                     l30005653:
  2898  0443  1003               	clrc
  2899  0444                     L41:
  2900  0444  0DA2               	rlf	___awdiv@quotient,f
  2901  0445  0DA3               	rlf	___awdiv@quotient+1,f
  2902  0446  0827               	movf	___awdiv@divisor+1,w
  2903  0447  0225               	subwf	___awdiv@dividend+1,w
  2904  0448  1D03               	skipz
  2905  0449  2C4C               	goto	u6545
  2906  044A  0826               	movf	___awdiv@divisor,w
  2907  044B  0224               	subwf	___awdiv@dividend,w
  2908  044C                     u6545:
  2909  044C  1C03               	skipc
  2910  044D  2C56               	goto	L40
  2911  044E  0826               	movf	___awdiv@divisor,w
  2912  044F  02A4               	subwf	___awdiv@dividend,f
  2913  0450  0827               	movf	___awdiv@divisor+1,w
  2914  0451  1C03               	skipc
  2915  0452  03A5               	decf	___awdiv@dividend+1,f
  2916  0453  02A5               	subwf	___awdiv@dividend+1,f
  2917  0454  1422               	bsf	___awdiv@quotient,0
  2918  0455  1003               	clrc
  2919  0456                     L40:
  2920  0456  0CA7               	rrf	___awdiv@divisor+1,f
  2921  0457  0CA6               	rrf	___awdiv@divisor,f
  2922  0458  0BA0               	decfsz	___awdiv@counter,f
  2923  0459  2C43               	goto	l30005653
  2924  045A                     l30005659:
  2925  045A  0821               	movf	___awdiv@sign,w
  2926  045B  1903               	btfsc	3,2
  2927  045C  2C62               	goto	l30005661
  2928  045D  09A2               	comf	___awdiv@quotient,f
  2929  045E  09A3               	comf	___awdiv@quotient+1,f
  2930  045F  0AA2               	incf	___awdiv@quotient,f
  2931  0460  1903               	skipnz
  2932  0461  0AA3               	incf	___awdiv@quotient+1,f
  2933  0462                     l30005661:
  2934  0462  0823               	movf	___awdiv@quotient+1,w
  2935  0463  00A5               	movwf	?___awdiv+1
  2936  0464  0822               	movf	___awdiv@quotient,w
  2937  0465  00A4               	movwf	?___awdiv
  2938  0466  0008               	return
  2939  0467                     __end_of___awdiv:
  2940  0467                     __ptext1222:	; =============== function _a_showTimerIdOn ends ============
  2941                           ; *************** function _a_showTime *****************
  2942                           ; Defined at:
  2943                           ;		line 331 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  2944                           ; Parameters:    Size  Location     Type
  2945                           ;		None
  2946                           ; Auto vars:     Size  Location     Type
  2947                           ;  hh              1   25[BANK0 ] unsigned char 
  2948                           ;  mm              1   24[BANK0 ] unsigned char 
  2949                           ;  ss              1   23[BANK0 ] unsigned char 
  2950                           ; Return value:  Size  Location     Type
  2951                           ;		None               void
  2952                           ; Registers used:
  2953                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2954                           ; Tracked objects:
  2955                           ;		On entry : 60/0
  2956                           ;		On exit  : 60/0
  2957                           ;		Unchanged: FFE00/0
  2958                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2959                           ;      Locals:         0       9       0       0       0
  2960                           ;      Temp:     3
  2961                           ;      Total:    9
  2962                           ; This function calls:
  2963                           ;		___atdiv
  2964                           ;		___atmod
  2965                           ;		_ucharToStr
  2966                           ;		___lbdiv
  2967                           ; This function is called by:
  2968                           ; This function uses a non-reentrant model
  2969                           ; 
  2970  0467                     _a_showTime:	;fsm_actions.h: 330: void a_showTime(void)
  2971                           ;fsm_actions.h: 331: {
  2972                           ;fsm_actions.h: 347: if(tmp_11.flag_outForce)
  2973                           ; Regs used in _a_showTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2974  0467  1E44               	btfss	_tmp_11,4
  2975  0468  2C78               	goto	l175
  2976                           ;fsm_actions.h: 348: {
  2977                           ;fsm_actions.h: 349: if(tmp_11.p2eepromAddr%2 && !tmp_11.flag_outForceVal)
  2978  0469  184D               	btfsc	_tmp_11+9,0
  2979  046A  1AC4               	btfsc	_tmp_11,5
  2980  046B  2C6F               	goto	l30005402
  2981                           ;fsm_actions.h: 350: RA1 = bitTitila;
  2982  046C  1878               	btfsc	_bitTitila,0
  2983  046D  2C7A               	goto	L11
  2984  046E  2C7D               	goto	u6140
  2985  046F                     l30005402:
  2986                           ;fsm_actions.h: 351: else RA1 = tmp_11.flag_outForceVal;
  2987  046F  0E44               	swapf	_tmp_11,w
  2988  0470  00B1               	movwf	??_a_showTime
  2989  0471  0C31               	rrf	??_a_showTime,w
  2990  0472  3901               	andlw	1
  2991  0473  00B2               	movwf	??_a_showTime+1
  2992  0474  0C32               	rrf	??_a_showTime+1,w
  2993  0475  1803               	btfsc	3,0
  2994  0476  2C7A               	goto	L11
  2995  0477  2C7D               	goto	u6140
  2996  0478                     l175:
  2997                           ;fsm_actions.h: 353: else RA1 = tmp_11.p2eepromAddr%2;
  2998  0478  1C4D               	btfss	_tmp_11+9,0
  2999  0479  2C7D               	goto	u6140
  3000  047A                     L11:
  3001  047A  27FD               	call	PL3	;select bank 0
  3002  047B  1485               	bsf	5,1
  3003  047C  2C7F               	goto	l178
  3004  047D                     u6140:
  3005  047D  27FD               	call	PL3	;select bank 0
  3006  047E  1085               	bcf	5,1
  3007  047F                     l178:
  3008                           ;fsm_actions.h: 356: if(!tmp_11.flag_showTimerId && !tmp_11.flag_showHyphens)
  3009  047F  1C44               	btfss	_tmp_11,0
  3010  0480  18C4               	btfsc	_tmp_11,1
  3011  0481  0008               	return
  3012  0482  3001               	movlw	1
  3013  0483  00B1               	movwf	??_a_showTime
  3014  0484  01B2               	clrf	??_a_showTime+1
  3015  0485  01B3               	clrf	??_a_showTime+2
  3016  0486  085C               	movf	_t1Mem,w
  3017  0487  00AB               	movwf	?___atdiv
  3018  0488  085D               	movf	_t1Mem+1,w
  3019  0489  00AC               	movwf	?___atdiv+1
  3020  048A  085E               	movf	_t1Mem+2,w
  3021  048B  00AD               	movwf	?___atdiv+2
  3022  048C  3004               	movlw	4
  3023  048D  00AE               	movwf	?___atdiv+3
  3024  048E  01AF               	clrf	?___atdiv+4
  3025  048F  01B0               	clrf	?___atdiv+5
  3026  0490  120A  158A  228B   	fcall	___atdiv
  3027  0493  1383               	bcf	3,7	;select IRP bank0
  3028  0494  082B               	movf	?___atdiv,w
  3029  0495  07B1               	addwf	??_a_showTime,f
  3030  0496  082C               	movf	?___atdiv+1,w
  3031  0497  1803               	skipnc
  3032  0498  0F2C               	incfsz	?___atdiv+1,w
  3033  0499  07B2               	addwf	??_a_showTime+1,f
  3034  049A  082D               	movf	?___atdiv+2,w
  3035  049B  1803               	skipnc
  3036  049C  0F2D               	incfsz	?___atdiv+2,w
  3037  049D  07B3               	addwf	??_a_showTime+2,f
  3038  049E  0831               	movf	??_a_showTime,w
  3039  049F  00B4               	movwf	_a_showTime$4234
  3040  04A0  0832               	movf	??_a_showTime+1,w
  3041  04A1  00B5               	movwf	_a_showTime$4234+1
  3042  04A2  0833               	movf	??_a_showTime+2,w
  3043  04A3  00B6               	movwf	_a_showTime$4234+2
  3044                           ;fsm_actions.h: 357: {
  3045                           ;fsm_actions.h: 358: char hh,mm,ss;
  3046                           ;fsm_actions.h: 360: hh = (1+t1Mem[T1_TIME].prescaler/4)/3600;
  3047  04A4  0834               	movf	_a_showTime$4234,w
  3048  04A5  00AB               	movwf	?___atdiv
  3049  04A6  0835               	movf	_a_showTime$4234+1,w
  3050  04A7  00AC               	movwf	?___atdiv+1
  3051  04A8  0836               	movf	_a_showTime$4234+2,w
  3052  04A9  00AD               	movwf	?___atdiv+2
  3053  04AA  3010               	movlw	16
  3054  04AB  00AE               	movwf	?___atdiv+3
  3055  04AC  300E               	movlw	14
  3056  04AD  00AF               	movwf	?___atdiv+4
  3057  04AE  01B0               	clrf	?___atdiv+5
  3058  04AF  120A  158A  228B   	fcall	___atdiv
  3059  04B2  082B               	movf	?___atdiv,w
  3060  04B3  00B9               	movwf	a_showTime@hh
  3061  04B4  3001               	movlw	1
  3062  04B5  00B1               	movwf	??_a_showTime
  3063  04B6  01B2               	clrf	??_a_showTime+1
  3064  04B7  01B3               	clrf	??_a_showTime+2
  3065  04B8  085C               	movf	_t1Mem,w
  3066  04B9  00AB               	movwf	?___atdiv
  3067  04BA  085D               	movf	_t1Mem+1,w
  3068  04BB  00AC               	movwf	?___atdiv+1
  3069  04BC  085E               	movf	_t1Mem+2,w
  3070  04BD  00AD               	movwf	?___atdiv+2
  3071  04BE  3004               	movlw	4
  3072  04BF  00AE               	movwf	?___atdiv+3
  3073  04C0  01AF               	clrf	?___atdiv+4
  3074  04C1  01B0               	clrf	?___atdiv+5
  3075  04C2  120A  158A  228B   	fcall	___atdiv
  3076  04C5  082B               	movf	?___atdiv,w
  3077  04C6  07B1               	addwf	??_a_showTime,f
  3078  04C7  082C               	movf	?___atdiv+1,w
  3079  04C8  1803               	skipnc
  3080  04C9  0F2C               	incfsz	?___atdiv+1,w
  3081  04CA  07B2               	addwf	??_a_showTime+1,f
  3082  04CB  082D               	movf	?___atdiv+2,w
  3083  04CC  1803               	skipnc
  3084  04CD  0F2D               	incfsz	?___atdiv+2,w
  3085  04CE  07B3               	addwf	??_a_showTime+2,f
  3086  04CF  0831               	movf	??_a_showTime,w
  3087  04D0  00A0               	movwf	?___atmod
  3088  04D1  0832               	movf	??_a_showTime+1,w
  3089  04D2  00A1               	movwf	?___atmod+1
  3090  04D3  0833               	movf	??_a_showTime+2,w
  3091  04D4  00A2               	movwf	?___atmod+2
  3092  04D5  3010               	movlw	16
  3093  04D6  00A3               	movwf	?___atmod+3
  3094  04D7  300E               	movlw	14
  3095  04D8  00A4               	movwf	?___atmod+4
  3096  04D9  01A5               	clrf	?___atmod+5
  3097  04DA  120A  158A  22E8   	fcall	___atmod
  3098  04DD  1383               	bcf	3,7	;select IRP bank0
  3099  04DE  0820               	movf	?___atmod,w
  3100  04DF  00B4               	movwf	_a_showTime$4234
  3101  04E0  0821               	movf	?___atmod+1,w
  3102  04E1  00B5               	movwf	_a_showTime$4234+1
  3103  04E2  0822               	movf	?___atmod+2,w
  3104  04E3  00B6               	movwf	_a_showTime$4234+2
  3105                           ;fsm_actions.h: 361: mm = ((1+t1Mem[T1_TIME].prescaler/4)%3600)/60;
  3106  04E4  0834               	movf	_a_showTime$4234,w
  3107  04E5  00AB               	movwf	?___atdiv
  3108  04E6  0835               	movf	_a_showTime$4234+1,w
  3109  04E7  00AC               	movwf	?___atdiv+1
  3110  04E8  0836               	movf	_a_showTime$4234+2,w
  3111  04E9  00AD               	movwf	?___atdiv+2
  3112  04EA  303C               	movlw	60
  3113  04EB  00AE               	movwf	?___atdiv+3
  3114  04EC  01AF               	clrf	?___atdiv+4
  3115  04ED  01B0               	clrf	?___atdiv+5
  3116  04EE  120A  158A  228B   	fcall	___atdiv
  3117  04F1  082B               	movf	?___atdiv,w
  3118  04F2  00B8               	movwf	a_showTime@mm
  3119                           ;fsm_actions.h: 362: ss = (1+t1Mem[T1_TIME].prescaler/4)%60;
  3120  04F3  3001               	movlw	1
  3121  04F4  00B1               	movwf	??_a_showTime
  3122  04F5  01B2               	clrf	??_a_showTime+1
  3123  04F6  01B3               	clrf	??_a_showTime+2
  3124  04F7  085C               	movf	_t1Mem,w
  3125  04F8  00AB               	movwf	?___atdiv
  3126  04F9  085D               	movf	_t1Mem+1,w
  3127  04FA  00AC               	movwf	?___atdiv+1
  3128  04FB  085E               	movf	_t1Mem+2,w
  3129  04FC  00AD               	movwf	?___atdiv+2
  3130  04FD  3004               	movlw	4
  3131  04FE  00AE               	movwf	?___atdiv+3
  3132  04FF  01AF               	clrf	?___atdiv+4
  3133  0500  01B0               	clrf	?___atdiv+5
  3134  0501  120A  158A  228B   	fcall	___atdiv
  3135  0504  082B               	movf	?___atdiv,w
  3136  0505  07B1               	addwf	??_a_showTime,f
  3137  0506  082C               	movf	?___atdiv+1,w
  3138  0507  1803               	skipnc
  3139  0508  0F2C               	incfsz	?___atdiv+1,w
  3140  0509  07B2               	addwf	??_a_showTime+1,f
  3141  050A  082D               	movf	?___atdiv+2,w
  3142  050B  1803               	skipnc
  3143  050C  0F2D               	incfsz	?___atdiv+2,w
  3144  050D  07B3               	addwf	??_a_showTime+2,f
  3145  050E  0831               	movf	??_a_showTime,w
  3146  050F  00A0               	movwf	?___atmod
  3147  0510  0832               	movf	??_a_showTime+1,w
  3148  0511  00A1               	movwf	?___atmod+1
  3149  0512  0833               	movf	??_a_showTime+2,w
  3150  0513  00A2               	movwf	?___atmod+2
  3151  0514  303C               	movlw	60
  3152  0515  00A3               	movwf	?___atmod+3
  3153  0516  01A4               	clrf	?___atmod+4
  3154  0517  01A5               	clrf	?___atmod+5
  3155  0518  120A  158A  22E8   	fcall	___atmod
      +       120A  118A         
  3156  051D  1383               	bcf	3,7	;select IRP bank0
  3157  051E  0820               	movf	?___atmod,w
  3158  051F  00B7               	movwf	a_showTime@ss
  3159                           ;fsm_actions.h: 364: if(hh>=10)
  3160  0520  300A               	movlw	10
  3161  0521  0239               	subwf	a_showTime@hh,w
  3162  0522  1C03               	skipc
  3163  0523  2D32               	goto	l30005411
  3164                           ;fsm_actions.h: 365: {
  3165                           ;fsm_actions.h: 366: ucharToStr(hh, &tmp_11.str[0], 2);
  3166  0524  304E               	movlw	(_tmp_11+10)& (0+255)
  3167  0525  00AA               	movwf	?_ucharToStr
  3168  0526  3002               	movlw	2
  3169  0527  00AB               	movwf	?_ucharToStr+1
  3170  0528  0839               	movf	a_showTime@hh,w
  3171  0529  2582  120A  118A   	fcall	_ucharToStr
  3172                           ;fsm_actions.h: 367: ucharToStr(mm, &tmp_11.str[2], 2);
  3173  052C  3050               	movlw	(_tmp_11+12)& (0+255)
  3174  052D  00AA               	movwf	?_ucharToStr
  3175  052E  3002               	movlw	2
  3176  052F  00AB               	movwf	?_ucharToStr+1
  3177  0530  0838               	movf	a_showTime@mm,w
  3178  0531  2D68               	goto	L12
  3179  0532                     l30005411:
  3180                           ;fsm_actions.h: 373: else if(hh<10 && hh>0)
  3181  0532  300A               	movlw	10
  3182  0533  0239               	subwf	a_showTime@hh,w
  3183  0534  1803               	skipnc
  3184  0535  2D5B               	goto	l30005418
  3185  0536  0839               	movf	a_showTime@hh,w
  3186                           ;fsm_actions.h: 374: {
  3187                           ;fsm_actions.h: 375: ucharToStr(hh, &tmp_11.str[0], 1);
  3188  0537  304E               	movlw	(_tmp_11+10)& (0+255)
  3189  0538  00AA               	movwf	?_ucharToStr
  3190  0539  1903               	btfsc	3,2
  3191  053A  2D5D               	goto	L13
  3192  053B  01AB               	clrf	?_ucharToStr+1
  3193  053C  0AAB               	incf	?_ucharToStr+1,f
  3194  053D  0839               	movf	a_showTime@hh,w
  3195  053E  2582  120A  118A   	fcall	_ucharToStr
  3196                           ;fsm_actions.h: 376: ucharToStr(mm, &tmp_11.str[1], 2);
  3197  0541  304F               	movlw	(_tmp_11+11)& (0+255)
  3198  0542  00AA               	movwf	?_ucharToStr
  3199  0543  3002               	movlw	2
  3200  0544  00AB               	movwf	?_ucharToStr+1
  3201  0545  0838               	movf	a_showTime@mm,w
  3202  0546  2582  120A  118A   	fcall	_ucharToStr
  3203                           ;fsm_actions.h: 377: ucharToStr(ss/10, &tmp_11.str[3], 1);
  3204  0549  3051               	movlw	(_tmp_11+13)& (0+255)
  3205  054A  00AA               	movwf	?_ucharToStr
  3206  054B  01AB               	clrf	?_ucharToStr+1
  3207  054C  0AAB               	incf	?_ucharToStr+1,f
  3208  054D  300A               	movlw	10
  3209  054E  00A0               	movwf	?___lbdiv
  3210  054F  0837               	movf	a_showTime@ss,w
  3211  0550  27BA  120A  118A   	fcall	___lbdiv
  3212  0553  2582  120A  118A   	fcall	_ucharToStr
  3213                           ;fsm_actions.h: 378: disp.d0_dp = 0;
  3214  0556  1243               	bcf	_disp+5,4
  3215                           ;fsm_actions.h: 379: disp.d1_dp = 1;
  3216  0557  16C3               	bsf	_disp+5,5
  3217                           ;fsm_actions.h: 380: disp.d2_dp = 0;
  3218  0558  1343               	bcf	_disp+5,6
  3219                           ;fsm_actions.h: 381: disp.d3_dp = 1;
  3220  0559  17C3               	bsf	_disp+5,7
  3221  055A  2D6F               	goto	l30005423
  3222  055B                     l30005418:
  3223                           ;fsm_actions.h: 383: else
  3224                           ;fsm_actions.h: 384: {
  3225                           ;fsm_actions.h: 385: ucharToStr(mm, &tmp_11.str[0], 2);
  3226  055B  304E               	movlw	(_tmp_11+10)& (0+255)
  3227  055C  00AA               	movwf	?_ucharToStr
  3228  055D                     L13:
  3229  055D  3002               	movlw	2
  3230  055E  00AB               	movwf	?_ucharToStr+1
  3231  055F  0838               	movf	a_showTime@mm,w
  3232  0560  2582  120A  118A   	fcall	_ucharToStr
  3233                           ;fsm_actions.h: 386: ucharToStr(ss, &tmp_11.str[2], 2);
  3234  0563  3050               	movlw	(_tmp_11+12)& (0+255)
  3235  0564  00AA               	movwf	?_ucharToStr
  3236  0565  3002               	movlw	2
  3237  0566  00AB               	movwf	?_ucharToStr+1
  3238  0567  0837               	movf	a_showTime@ss,w
  3239  0568                     L12:
  3240  0568  2582  120A  118A   	fcall	_ucharToStr
  3241                           ;fsm_actions.h: 368: disp.d0_dp = 0;
  3242  056B  1243               	bcf	_disp+5,4
  3243                           ;fsm_actions.h: 369: disp.d1_dp = 0;
  3244  056C  12C3               	bcf	_disp+5,5
  3245                           ;fsm_actions.h: 370: disp.d2_dp = 1;
  3246  056D  1743               	bsf	_disp+5,6
  3247                           ;fsm_actions.h: 371: disp.d3_dp = 0;
  3248  056E  13C3               	bcf	_disp+5,7
  3249  056F                     l30005423:
  3250                           ;fsm_actions.h: 391: }
  3251                           ;fsm_actions.h: 393: if(tmp_11.flag_showTimeBlink)
  3252  056F  1F44               	btfss	_tmp_11,6
  3253  0570  2D76               	goto	l184
  3254                           ;fsm_actions.h: 394: {
  3255                           ;fsm_actions.h: 395: disp.d0_titila = 1;
  3256  0571  1443               	bsf	_disp+5,0
  3257                           ;fsm_actions.h: 396: disp.d1_titila = 1;
  3258  0572  14C3               	bsf	_disp+5,1
  3259                           ;fsm_actions.h: 397: disp.d2_titila = 1;
  3260  0573  1543               	bsf	_disp+5,2
  3261                           ;fsm_actions.h: 398: disp.d3_titila = 1;
  3262  0574  15C3               	bsf	_disp+5,3
  3263  0575  2D7A               	goto	l30005425
  3264  0576                     l184:
  3265                           ;fsm_actions.h: 400: else
  3266                           ;fsm_actions.h: 401: {
  3267                           ;fsm_actions.h: 402: disp.d0_titila = 0;
  3268  0576  1043               	bcf	_disp+5,0
  3269                           ;fsm_actions.h: 403: disp.d1_titila = 0;
  3270  0577  10C3               	bcf	_disp+5,1
  3271                           ;fsm_actions.h: 404: disp.d2_titila = 0;
  3272  0578  1143               	bcf	_disp+5,2
  3273                           ;fsm_actions.h: 405: disp.d3_titila = 0;
  3274  0579  11C3               	bcf	_disp+5,3
  3275  057A                     l30005425:
  3276                           ;fsm_actions.h: 406: }
  3277                           ;fsm_actions.h: 408: disp.strOffs = 4;
  3278  057A  3004               	movlw	4
  3279  057B  00C0               	movwf	_disp+2
  3280                           ;fsm_actions.h: 409: disp.strLen = 4;
  3281  057C  00C1               	movwf	_disp+3
  3282                           ;fsm_actions.h: 410: disp.str = tmp_11.str;
  3283  057D  304E               	movlw	(_tmp_11+10)& (0+255)
  3284  057E  00BE               	movwf	_disp
  3285  057F  3080               	movlw	128
  3286  0580  00BF               	movwf	_disp+1
  3287  0581  0008               	return
  3288  0582                     __end_of_a_showTime:
  3289  0582                     __ptext1244:	; =============== function ___atmod ends ============
  3290                           ; *************** function _ucharToStr *****************
  3291                           ; Defined at:
  3292                           ;		line 61 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\tmp_11.c"
  3293                           ; Parameters:    Size  Location     Type
  3294                           ;  num             1    wreg     unsigned char 
  3295                           ;  p2str           1   10[BANK0 ] PTR unsigned char 
  3296                           ;		 -> tmp_11(14), tmp_11.str(4), 
  3297                           ;  strLen          1   11[BANK0 ] unsigned char 
  3298                           ; Auto vars:     Size  Location     Type
  3299                           ;  num             1    9[BANK0 ] unsigned char 
  3300                           ;  i               1    8[BANK0 ] unsigned char 
  3301                           ; Return value:  Size  Location     Type
  3302                           ;		None               void
  3303                           ; Registers used:
  3304                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3305                           ; Tracked objects:
  3306                           ;		On entry : 60/0
  3307                           ;		On exit  : 60/0
  3308                           ;		Unchanged: FFE9F/0
  3309                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3310                           ;      Locals:         0       4       0       0       0
  3311                           ;      Temp:     0
  3312                           ;      Total:    4
  3313                           ; This function calls:
  3314                           ;		___lbmod
  3315                           ;		___awdiv
  3316                           ; This function is called by:
  3317                           ;		_a_showTime
  3318                           ; This function uses a non-reentrant model
  3319                           ; 
  3320  0582                     _ucharToStr:	;tmp_11.c: 23: t_temporizador tmp_11=
  3321                           ;tmp_11.c: 24: {
  3322                           ;tmp_11.c: 25: 0,
  3323                           ;tmp_11.c: 27: 0,
  3324                           ;tmp_11.c: 29: 0,
  3325                           ;tmp_11.c: 30: 0,
  3326                           ;tmp_11.c: 31: 0,
  3327                           ;tmp_11.c: 33: 0,
  3328                           ;tmp_11.c: 34: 0,
  3329                           ;tmp_11.c: 36: 0,
  3330                           ;tmp_11.c: 37: 0,
  3331                           ;tmp_11.c: 38: 0,
  3332                           ;tmp_11.c: 39: 0,
  3333                           ;tmp_11.c: 41: 0,
  3334                           ;tmp_11.c: 42: 0,
  3335                           ;tmp_11.c: 43: 0,
  3336                           ;tmp_11.c: 45: 0,
  3337                           ;tmp_11.c: 47: EEADDR__16_00__TON_OFF,
  3338                           ;tmp_11.c: 49: {0}
  3339                           ;tmp_11.c: 50: };
  3340                           ;tmp_11.c: 53: char bitTitila;
  3341                           ;tmp_11.c: 60: void ucharToStr(unsigned char num,char *p2str,char strLen)
  3342                           ;tmp_11.c: 61: {
  3343                           ; Regs used in _ucharToStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3344                           ;ucharToStr@num stored from wreg
  3345  0582  00A9               	movwf	ucharToStr@num
  3346                           ;tmp_11.c: 62: char i;
  3347                           ;tmp_11.c: 64: p2str+=strLen-1;
  3348  0583  032B               	decf	ucharToStr@strLen,w
  3349  0584  07AA               	addwf	ucharToStr@p2str,f
  3350                           ;tmp_11.c: 65: for(i=0;i<strLen;i++)
  3351  0585  01A8               	clrf	ucharToStr@i
  3352  0586                     l30005640:
  3353  0586  082B               	movf	ucharToStr@strLen,w
  3354  0587  0228               	subwf	ucharToStr@i,w
  3355  0588  1803               	btfsc	3,0
  3356  0589  0008               	return
  3357                           ;tmp_11.c: 66: {
  3358                           ;tmp_11.c: 67: *(p2str--)='0'+(num%10);
  3359  058A  082A               	movf	ucharToStr@p2str,w
  3360  058B  0084               	movwf	4
  3361  058C  300A               	movlw	10
  3362  058D  00A3               	movwf	?___lbmod
  3363  058E  0829               	movf	ucharToStr@num,w
  3364  058F  279D  120A  118A   	fcall	___lbmod
  3365  0592  3E30               	addlw	48
  3366  0593  1383               	bcf	3,7	;select IRP bank0
  3367  0594  0080               	movwf	0
  3368  0595  03AA               	decf	ucharToStr@p2str,f
  3369                           ;tmp_11.c: 68: num/=10;
  3370  0596  0829               	movf	ucharToStr@num,w
  3371  0597  00A4               	movwf	?___awdiv
  3372  0598  01A5               	clrf	?___awdiv+1
  3373  0599  300A               	movlw	10
  3374  059A  00A6               	movwf	?___awdiv+2
  3375  059B  01A7               	clrf	?___awdiv+3
  3376  059C  2422  120A  118A   	fcall	___awdiv
  3377  059F  0824               	movf	?___awdiv,w
  3378  05A0  00A9               	movwf	ucharToStr@num
  3379  05A1  0AA8               	incf	ucharToStr@i,f
  3380  05A2  2D86               	goto	l30005640
  3381  05A3                     __end_of_ucharToStr:
  3382  05A3                     __ptext1202:	; =============== function _a_m0_tOnOff_set ends ============
  3383                           ; *************** function _a_m0_tOnOff_inc *****************
  3384                           ; Defined at:
  3385                           ;		line 772 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  3386                           ; Parameters:    Size  Location     Type
  3387                           ;		None
  3388                           ; Auto vars:     Size  Location     Type
  3389                           ;  num             4    0[BANK1 ] long 
  3390                           ;  p2s             2    5[BANK1 ] PTR const unsigned char 
  3391                           ;		 -> STR_17(3), STR_18(3), STR_19(3), 
  3392                           ;  ss              1    9[BANK1 ] unsigned char 
  3393                           ;  mm              1    8[BANK1 ] unsigned char 
  3394                           ;  hh              1    7[BANK1 ] unsigned char 
  3395                           ;  titila          1    4[BANK1 ] unsigned char 
  3396                           ; Return value:  Size  Location     Type
  3397                           ;		None               void
  3398                           ; Registers used:
  3399                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3400                           ; Tracked objects:
  3401                           ;		On entry : 60/0
  3402                           ;		On exit  : 60/0
  3403                           ;		Unchanged: FFE9F/0
  3404                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3405                           ;      Locals:         0       6      10       0       0
  3406                           ;      Temp:     6
  3407                           ;      Total:   16
  3408                           ; This function calls:
  3409                           ;		___atdiv
  3410                           ;		___atmod
  3411                           ;		___lbmod
  3412                           ;		___lbdiv
  3413                           ;		___tmul
  3414                           ;		_d7sm_set_88xx
  3415                           ; This function is called by:
  3416                           ; This function uses a non-reentrant model
  3417                           ; 
  3418  05A3                     _a_m0_tOnOff_inc:	;fsm_actions.h: 771: void a_m0_tOnOff_inc(void)
  3419                           ;fsm_actions.h: 772: {
  3420                           ;fsm_actions.h: 773: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  3421                           ; Regs used in _a_m0_tOnOff_inc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3422  05A3  10D5               	bcf	_t0Mem+3,1
  3423  05A4  30B1               	movlw	low (_t0DelayConstant+1)
  3424  05A5  0084               	movwf	4
  3425  05A6  3010               	movlw	high (_t0DelayConstant+1)
  3426  05A7  160A  118A  2000   	fcall	stringtab
  3427  05AA  00D4               	movwf	_t0Mem+2
  3428  05AB  1155               	bcf	_t0Mem+3,2
  3429                           ;fsm_actions.h: 775: char hh,mm,ss;
  3430                           ;fsm_actions.h: 776: hh=(tmp_11.menuShortLongAuxiliar)/3600;
  3431  05AC  3005               	movlw	5
  3432  05AD  3E44               	addlw	_tmp_11& (0+255)
  3433  05AE  0084               	movwf	4
  3434  05AF  1383               	bcf	3,7	;select IRP bank0
  3435  05B0  0800               	movf	0,w
  3436  05B1  00AB               	movwf	?___atdiv
  3437  05B2  0A84               	incf	4,f
  3438  05B3  0800               	movf	0,w
  3439  05B4  00AC               	movwf	?___atdiv+1
  3440  05B5  0A84               	incf	4,f
  3441  05B6  0800               	movf	0,w
  3442  05B7  00AD               	movwf	?___atdiv+2
  3443  05B8  3010               	movlw	16
  3444  05B9  00AE               	movwf	?___atdiv+3
  3445  05BA  300E               	movlw	14
  3446  05BB  00AF               	movwf	?___atdiv+4
  3447  05BC  01B0               	clrf	?___atdiv+5
  3448  05BD  120A  158A  228B   	fcall	___atdiv
  3449  05C0  082B               	movf	?___atdiv,w
  3450  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  3451  05C2  00A7               	movwf	a_m0_tOnOff_inc@hh^(0+128)
  3452                           ;fsm_actions.h: 777: mm=((tmp_11.menuShortLongAuxiliar)%3600)/60;
  3453  05C3  3005               	movlw	5
  3454  05C4  3E44               	addlw	_tmp_11& (0+255)
  3455  05C5  0084               	movwf	4
  3456  05C6  0800               	movf	0,w
  3457  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  3458  05C8  00A0               	movwf	?___atmod
  3459  05C9  0A84               	incf	4,f
  3460  05CA  0800               	movf	0,w
  3461  05CB  00A1               	movwf	?___atmod+1
  3462  05CC  0A84               	incf	4,f
  3463  05CD  0800               	movf	0,w
  3464  05CE  00A2               	movwf	?___atmod+2
  3465  05CF  3010               	movlw	16
  3466  05D0  00A3               	movwf	?___atmod+3
  3467  05D1  300E               	movlw	14
  3468  05D2  00A4               	movwf	?___atmod+4
  3469  05D3  01A5               	clrf	?___atmod+5
  3470  05D4  120A  158A  22E8   	fcall	___atmod
  3471  05D7  1383               	bcf	3,7	;select IRP bank0
  3472  05D8  0820               	movf	?___atmod,w
  3473  05D9  00AB               	movwf	?___atdiv
  3474  05DA  0821               	movf	?___atmod+1,w
  3475  05DB  00AC               	movwf	?___atdiv+1
  3476  05DC  0822               	movf	?___atmod+2,w
  3477  05DD  00AD               	movwf	?___atdiv+2
  3478  05DE  303C               	movlw	60
  3479  05DF  00AE               	movwf	?___atdiv+3
  3480  05E0  01AF               	clrf	?___atdiv+4
  3481  05E1  01B0               	clrf	?___atdiv+5
  3482  05E2  120A  158A  228B   	fcall	___atdiv
  3483  05E5  082B               	movf	?___atdiv,w
  3484  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  3485  05E7  00A8               	movwf	a_m0_tOnOff_inc@mm^(0+128)
  3486                           ;fsm_actions.h: 778: ss=(tmp_11.menuShortLongAuxiliar)%60;
  3487  05E8  3005               	movlw	5
  3488  05E9  3E44               	addlw	_tmp_11& (0+255)
  3489  05EA  0084               	movwf	4
  3490  05EB  0800               	movf	0,w
  3491  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  3492  05ED  00A0               	movwf	?___atmod
  3493  05EE  0A84               	incf	4,f
  3494  05EF  0800               	movf	0,w
  3495  05F0  00A1               	movwf	?___atmod+1
  3496  05F1  0A84               	incf	4,f
  3497  05F2  0800               	movf	0,w
  3498  05F3  00A2               	movwf	?___atmod+2
  3499  05F4  303C               	movlw	60
  3500  05F5  00A3               	movwf	?___atmod+3
  3501  05F6  01A4               	clrf	?___atmod+4
  3502  05F7  01A5               	clrf	?___atmod+5
  3503  05F8  120A  158A  22E8   	fcall	___atmod
      +       120A  118A         
  3504  05FD  1383               	bcf	3,7	;select IRP bank0
  3505  05FE  0820               	movf	?___atmod,w
  3506  05FF  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0600  00A9               	movwf	a_m0_tOnOff_inc@ss^(0+128)
  3508  0601  2E6B               	goto	l30005364
  3509  0602                     l30005345:
  3510                           ;fsm_actions.h: 783: if(hh%10==9) hh-=9;
  3511  0602  300A               	movlw	10
  3512  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0604  00A3               	movwf	?___lbmod
  3514  0605  1683               	bsf	3,5	;RP0=1, select bank1
  3515  0606  0827               	movf	a_m0_tOnOff_inc@hh^(0+128),w
  3516  0607  279D  120A  118A   	fcall	___lbmod
  3517  060A  3A09               	xorlw	9
  3518  060B  1D03               	skipz
  3519  060C  2E0F               	goto	l30005347
  3520  060D  3009               	movlw	9
  3521  060E  2E1E               	goto	L3
  3522  060F                     l30005347:
  3523                           ;fsm_actions.h: 784: else hh++;
  3524  060F  1683               	bsf	3,5	;RP0=1, select bank1
  3525  0610  0AA7               	incf	a_m0_tOnOff_inc@hh^(0+128),f
  3526  0611  2E7E               	goto	l30005365
  3527  0612                     l30005348:
  3528                           ;fsm_actions.h: 787: if(hh/10==9) hh-=90;
  3529  0612  300A               	movlw	10
  3530  0613  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0614  00A0               	movwf	?___lbdiv
  3532  0615  1683               	bsf	3,5	;RP0=1, select bank1
  3533  0616  0827               	movf	a_m0_tOnOff_inc@hh^(0+128),w
  3534  0617  27BA  120A  118A   	fcall	___lbdiv
  3535  061A  3A09               	xorlw	9
  3536  061B  1D03               	skipz
  3537  061C  2E21               	goto	l30005350
  3538  061D  305A               	movlw	90
  3539  061E                     L3:
  3540  061E  1683               	bsf	3,5	;RP0=1, select bank1
  3541  061F  02A7               	subwf	a_m0_tOnOff_inc@hh^(0+128),f
  3542  0620  2E7E               	goto	l30005365
  3543  0621                     l30005350:
  3544                           ;fsm_actions.h: 788: else hh+=10;
  3545  0621  300A               	movlw	10
  3546  0622  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0623  07A7               	addwf	a_m0_tOnOff_inc@hh^(0+128),f
  3548  0624  2E7E               	goto	l30005365
  3549  0625                     l30005351:
  3550                           ;fsm_actions.h: 792: if(mm%10==9) mm-=9;
  3551  0625  300A               	movlw	10
  3552  0626  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0627  00A3               	movwf	?___lbmod
  3554  0628  1683               	bsf	3,5	;RP0=1, select bank1
  3555  0629  0828               	movf	a_m0_tOnOff_inc@mm^(0+128),w
  3556  062A  279D  120A  118A   	fcall	___lbmod
  3557  062D  3A09               	xorlw	9
  3558  062E  1D03               	skipz
  3559  062F  2E32               	goto	l30005353
  3560  0630  3009               	movlw	9
  3561  0631  2E41               	goto	L4
  3562  0632                     l30005353:
  3563                           ;fsm_actions.h: 793: else mm++;
  3564  0632  1683               	bsf	3,5	;RP0=1, select bank1
  3565  0633  0AA8               	incf	a_m0_tOnOff_inc@mm^(0+128),f
  3566  0634  2E7E               	goto	l30005365
  3567  0635                     l30005354:
  3568                           ;fsm_actions.h: 796: if(mm/10==5) mm-=50;
  3569  0635  300A               	movlw	10
  3570  0636  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0637  00A0               	movwf	?___lbdiv
  3572  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3573  0639  0828               	movf	a_m0_tOnOff_inc@mm^(0+128),w
  3574  063A  27BA  120A  118A   	fcall	___lbdiv
  3575  063D  3A05               	xorlw	5
  3576  063E  1D03               	skipz
  3577  063F  2E44               	goto	l30005356
  3578  0640  3032               	movlw	50
  3579  0641                     L4:
  3580  0641  1683               	bsf	3,5	;RP0=1, select bank1
  3581  0642  02A8               	subwf	a_m0_tOnOff_inc@mm^(0+128),f
  3582  0643  2E7E               	goto	l30005365
  3583  0644                     l30005356:
  3584                           ;fsm_actions.h: 797: else mm+=10;
  3585  0644  300A               	movlw	10
  3586  0645  1683               	bsf	3,5	;RP0=1, select bank1
  3587  0646  07A8               	addwf	a_m0_tOnOff_inc@mm^(0+128),f
  3588  0647  2E7E               	goto	l30005365
  3589  0648                     l30005357:
  3590                           ;fsm_actions.h: 800: if(ss%10==9) ss-=9;
  3591  0648  300A               	movlw	10
  3592  0649  1283               	bcf	3,5	;RP0=0, select bank0
  3593  064A  00A3               	movwf	?___lbmod
  3594  064B  1683               	bsf	3,5	;RP0=1, select bank1
  3595  064C  0829               	movf	a_m0_tOnOff_inc@ss^(0+128),w
  3596  064D  279D  120A  118A   	fcall	___lbmod
  3597  0650  3A09               	xorlw	9
  3598  0651  1D03               	skipz
  3599  0652  2E55               	goto	l30005359
  3600  0653  3009               	movlw	9
  3601  0654  2E64               	goto	L5
  3602  0655                     l30005359:
  3603                           ;fsm_actions.h: 801: else ss++;
  3604  0655  1683               	bsf	3,5	;RP0=1, select bank1
  3605  0656  0AA9               	incf	a_m0_tOnOff_inc@ss^(0+128),f
  3606  0657  2E7E               	goto	l30005365
  3607  0658                     l30005360:
  3608                           ;fsm_actions.h: 804: if(ss/10==5) ss-=50;
  3609  0658  300A               	movlw	10
  3610  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3611  065A  00A0               	movwf	?___lbdiv
  3612  065B  1683               	bsf	3,5	;RP0=1, select bank1
  3613  065C  0829               	movf	a_m0_tOnOff_inc@ss^(0+128),w
  3614  065D  27BA  120A  118A   	fcall	___lbdiv
  3615  0660  3A05               	xorlw	5
  3616  0661  1D03               	skipz
  3617  0662  2E67               	goto	l30005362
  3618  0663  3032               	movlw	50
  3619  0664                     L5:
  3620  0664  1683               	bsf	3,5	;RP0=1, select bank1
  3621  0665  02A9               	subwf	a_m0_tOnOff_inc@ss^(0+128),f
  3622  0666  2E7E               	goto	l30005365
  3623  0667                     l30005362:
  3624                           ;fsm_actions.h: 805: else ss+=10;
  3625  0667  300A               	movlw	10
  3626  0668  1683               	bsf	3,5	;RP0=1, select bank1
  3627  0669  07A9               	addwf	a_m0_tOnOff_inc@ss^(0+128),f
  3628  066A  2E7E               	goto	l30005365
  3629  066B                     l30005364:
  3630  066B  0879               	movf	_estadoFsm,w
  3631  066C  3A0B               	xorlw	11
  3632  066D  1903               	skipnz
  3633  066E  2E02               	goto	l30005345
  3634  066F  3A07               	xorlw	7
  3635  0670  1903               	skipnz
  3636  0671  2E12               	goto	l30005348
  3637  0672  3A01               	xorlw	1
  3638  0673  1903               	skipnz
  3639  0674  2E25               	goto	l30005351
  3640  0675  3A03               	xorlw	3
  3641  0676  1903               	skipnz
  3642  0677  2E35               	goto	l30005354
  3643  0678  3A01               	xorlw	1
  3644  0679  1903               	skipnz
  3645  067A  2E48               	goto	l30005357
  3646  067B  3A1F               	xorlw	31
  3647  067C  1903               	skipnz
  3648  067D  2E58               	goto	l30005360
  3649  067E                     l30005365:
  3650                           ;fsm_actions.h: 809: tmp_11.menuShortLongAuxiliar = (short long)hh*3600+
  3651                           ;fsm_actions.h: 810: (short long)mm*60+(short long)ss;
  3652  067E  0827               	movf	a_m0_tOnOff_inc@hh^(0+128),w
  3653  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0680  00A0               	movwf	?___tmul
  3655  0681  01A1               	clrf	?___tmul+1
  3656  0682  01A2               	clrf	?___tmul+2
  3657  0683  3010               	movlw	16
  3658  0684  00A3               	movwf	?___tmul+3
  3659  0685  300E               	movlw	14
  3660  0686  00A4               	movwf	?___tmul+4
  3661  0687  3000               	movlw	0
  3662  0688  01A5               	clrf	?___tmul+5
  3663  0689  27D6  120A  118A   	fcall	___tmul
  3664  068C  0820               	movf	?___tmul,w
  3665  068D  00B1               	movwf	??_a_m0_tOnOff_inc
  3666  068E  0821               	movf	?___tmul+1,w
  3667  068F  00B2               	movwf	??_a_m0_tOnOff_inc+1
  3668  0690  0822               	movf	?___tmul+2,w
  3669  0691  00B3               	movwf	??_a_m0_tOnOff_inc+2
  3670  0692  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0693  0829               	movf	a_m0_tOnOff_inc@ss^(0+128),w
  3672  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0695  00B4               	movwf	??_a_m0_tOnOff_inc+3
  3674  0696  01B5               	clrf	??_a_m0_tOnOff_inc+4
  3675  0697  01B6               	clrf	??_a_m0_tOnOff_inc+5
  3676  0698  1683               	bsf	3,5	;RP0=1, select bank1
  3677  0699  0828               	movf	a_m0_tOnOff_inc@mm^(0+128),w
  3678  069A  1283               	bcf	3,5	;RP0=0, select bank0
  3679  069B  00A0               	movwf	?___tmul
  3680  069C  01A1               	clrf	?___tmul+1
  3681  069D  01A2               	clrf	?___tmul+2
  3682  069E  303C               	movlw	60
  3683  069F  00A3               	movwf	?___tmul+3
  3684  06A0  01A4               	clrf	?___tmul+4
  3685  06A1  01A5               	clrf	?___tmul+5
  3686  06A2  27D6  120A  118A   	fcall	___tmul
  3687  06A5  1383               	bcf	3,7	;select IRP bank0
  3688  06A6  0820               	movf	?___tmul,w
  3689  06A7  07B4               	addwf	??_a_m0_tOnOff_inc+3,f
  3690  06A8  0821               	movf	?___tmul+1,w
  3691  06A9  1803               	skipnc
  3692  06AA  0F21               	incfsz	?___tmul+1,w
  3693  06AB  07B5               	addwf	??_a_m0_tOnOff_inc+4,f
  3694  06AC  0822               	movf	?___tmul+2,w
  3695  06AD  1803               	skipnc
  3696  06AE  0F22               	incfsz	?___tmul+2,w
  3697  06AF  07B6               	addwf	??_a_m0_tOnOff_inc+5,f
  3698  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  3699  06B1  0834               	movf	??_a_m0_tOnOff_inc+3,w
  3700  06B2  07B1               	addwf	??_a_m0_tOnOff_inc,f
  3701  06B3  0835               	movf	??_a_m0_tOnOff_inc+4,w
  3702  06B4  1803               	skipnc
  3703  06B5  0F35               	incfsz	??_a_m0_tOnOff_inc+4,w
  3704  06B6  07B2               	addwf	??_a_m0_tOnOff_inc+1,f
  3705  06B7  0836               	movf	??_a_m0_tOnOff_inc+5,w
  3706  06B8  1803               	skipnc
  3707  06B9  0F36               	incfsz	??_a_m0_tOnOff_inc+5,w
  3708  06BA  07B3               	addwf	??_a_m0_tOnOff_inc+2,f
  3709  06BB  0831               	movf	??_a_m0_tOnOff_inc,w
  3710  06BC  00C9               	movwf	_tmp_11+5
  3711  06BD  0832               	movf	??_a_m0_tOnOff_inc+1,w
  3712  06BE  00CA               	movwf	_tmp_11+6
  3713  06BF  0833               	movf	??_a_m0_tOnOff_inc+2,w
  3714  06C0  00CB               	movwf	_tmp_11+7
  3715  06C1  2EC9               	goto	l30005368
  3716  06C2                     l278:
  3717                           ;fsm_actions.h: 824: case S__M0__TON_OFF__SET_MM_1:
  3718                           ;fsm_actions.h: 825: case S__M0__TON_OFF__SET_SS_1:
  3719                           ;fsm_actions.h: 826: titila=1;
  3720  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  3721  06C3  01A4               	clrf	a_m0_tOnOff_inc@titila^(0+128)
  3722  06C4  0AA4               	incf	a_m0_tOnOff_inc@titila^(0+128),f
  3723  06C5  2F79               	goto	l30005376
  3724  06C6                     l30005366:
  3725                           ;fsm_actions.h: 829: case S__M0__TON_OFF__SET_MM_0:
  3726                           ;fsm_actions.h: 830: case S__M0__TON_OFF__SET_SS_0:
  3727                           ;fsm_actions.h: 831: titila=0;
  3728  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  3729  06C7  01A4               	clrf	a_m0_tOnOff_inc@titila^(0+128)
  3730  06C8  2F79               	goto	l30005376
  3731  06C9                     l30005368:
  3732  06C9  0879               	movf	_estadoFsm,w
  3733  06CA  3A0B               	xorlw	11
  3734  06CB  1903               	skipnz
  3735  06CC  2EC6               	goto	l30005366
  3736  06CD  3A07               	xorlw	7
  3737  06CE  1903               	skipnz
  3738  06CF  2EC2               	goto	l278
  3739  06D0  3A01               	xorlw	1
  3740  06D1  1903               	skipnz
  3741  06D2  2EC6               	goto	l30005366
  3742  06D3  3A03               	xorlw	3
  3743  06D4  1903               	skipnz
  3744  06D5  2EC2               	goto	l278
  3745  06D6  3A01               	xorlw	1
  3746  06D7  1903               	skipnz
  3747  06D8  2EC6               	goto	l30005366
  3748  06D9  3A1F               	xorlw	31
  3749  06DA  1903               	skipnz
  3750  06DB  2EC2               	goto	l278
  3751  06DC  2F79               	goto	l30005376
  3752  06DD                     l30005369:
  3753                           ;fsm_actions.h: 838: case S__M0__TON_OFF__SET_HH_1:
  3754                           ;fsm_actions.h: 839: num = tmp_11.menuShortLongAuxiliar/(long)3600;
  3755  06DD  3005               	movlw	5
  3756  06DE  3E44               	addlw	_tmp_11& (0+255)
  3757  06DF  0084               	movwf	4
  3758  06E0  0800               	movf	0,w
  3759  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3760  06E2  00AB               	movwf	?___atdiv
  3761  06E3  0A84               	incf	4,f
  3762  06E4  0800               	movf	0,w
  3763  06E5  00AC               	movwf	?___atdiv+1
  3764  06E6  0A84               	incf	4,f
  3765  06E7  0800               	movf	0,w
  3766  06E8  00AD               	movwf	?___atdiv+2
  3767  06E9  3010               	movlw	16
  3768  06EA  00AE               	movwf	?___atdiv+3
  3769  06EB  300E               	movlw	14
  3770  06EC  00AF               	movwf	?___atdiv+4
  3771  06ED  01B0               	clrf	?___atdiv+5
  3772  06EE  120A  158A  228B   	fcall	___atdiv
      +       120A  118A         
  3773  06F3  082B               	movf	?___atdiv,w
  3774  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  3775  06F5  00A0               	movwf	a_m0_tOnOff_inc@num^(0+128)
  3776  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  3777  06F7  082C               	movf	?___atdiv+1,w
  3778  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  3779  06F9  00A1               	movwf	(a_m0_tOnOff_inc@num+1)^(0+128)
  3780  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  3781  06FB  082D               	movf	?___atdiv+2,w
  3782  06FC  1683               	bsf	3,5	;RP0=1, select bank1
  3783  06FD  00A2               	movwf	(a_m0_tOnOff_inc@num+2)^(0+128)
  3784  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  3785  06FF  00B1               	movwf	??_a_m0_tOnOff_inc
  3786  0700  0D31               	rlf	??_a_m0_tOnOff_inc,w
  3787  0701  00B1               	movwf	??_a_m0_tOnOff_inc
  3788  0702  1C03               	skipc
  3789  0703  03B1               	decf	??_a_m0_tOnOff_inc,f
  3790  0704  02B1               	subwf	??_a_m0_tOnOff_inc,f
  3791  0705  0931               	comf	??_a_m0_tOnOff_inc,w
  3792  0706  1683               	bsf	3,5	;RP0=1, select bank1
  3793  0707  00A3               	movwf	(a_m0_tOnOff_inc@num+3)^(0+128)
  3794                           ;fsm_actions.h: 840: p2s = " h";
  3795  0708  30A9               	movlw	low STR_17
  3796  0709  00A5               	movwf	a_m0_tOnOff_inc@p2s^(0+128)
  3797  070A  3010               	movlw	high STR_17
  3798  070B  2F77               	goto	L7
  3799  070C                     l30005371:
  3800                           ;fsm_actions.h: 843: case S__M0__TON_OFF__SET_MM_1:
  3801                           ;fsm_actions.h: 845: num=(tmp_11.menuShortLongAuxiliar%(long)3600)/(long)60;
  3802  070C  3005               	movlw	5
  3803  070D  3E44               	addlw	_tmp_11& (0+255)
  3804  070E  0084               	movwf	4
  3805  070F  0800               	movf	0,w
  3806  0710  1283               	bcf	3,5	;RP0=0, select bank0
  3807  0711  00A0               	movwf	?___atmod
  3808  0712  0A84               	incf	4,f
  3809  0713  0800               	movf	0,w
  3810  0714  00A1               	movwf	?___atmod+1
  3811  0715  0A84               	incf	4,f
  3812  0716  0800               	movf	0,w
  3813  0717  00A2               	movwf	?___atmod+2
  3814  0718  3010               	movlw	16
  3815  0719  00A3               	movwf	?___atmod+3
  3816  071A  300E               	movlw	14
  3817  071B  00A4               	movwf	?___atmod+4
  3818  071C  01A5               	clrf	?___atmod+5
  3819  071D  120A  158A  22E8   	fcall	___atmod
  3820  0720  1383               	bcf	3,7	;select IRP bank0
  3821  0721  0820               	movf	?___atmod,w
  3822  0722  00AB               	movwf	?___atdiv
  3823  0723  0821               	movf	?___atmod+1,w
  3824  0724  00AC               	movwf	?___atdiv+1
  3825  0725  0822               	movf	?___atmod+2,w
  3826  0726  00AD               	movwf	?___atdiv+2
  3827  0727  303C               	movlw	60
  3828  0728  00AE               	movwf	?___atdiv+3
  3829  0729  01AF               	clrf	?___atdiv+4
  3830  072A  01B0               	clrf	?___atdiv+5
  3831  072B  120A  158A  228B   	fcall	___atdiv
      +       120A  118A         
  3832  0730  082B               	movf	?___atdiv,w
  3833  0731  1683               	bsf	3,5	;RP0=1, select bank1
  3834  0732  00A0               	movwf	a_m0_tOnOff_inc@num^(0+128)
  3835  0733  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0734  082C               	movf	?___atdiv+1,w
  3837  0735  1683               	bsf	3,5	;RP0=1, select bank1
  3838  0736  00A1               	movwf	(a_m0_tOnOff_inc@num+1)^(0+128)
  3839  0737  1283               	bcf	3,5	;RP0=0, select bank0
  3840  0738  082D               	movf	?___atdiv+2,w
  3841  0739  1683               	bsf	3,5	;RP0=1, select bank1
  3842  073A  00A2               	movwf	(a_m0_tOnOff_inc@num+2)^(0+128)
  3843  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3844  073C  00B1               	movwf	??_a_m0_tOnOff_inc
  3845  073D  0D31               	rlf	??_a_m0_tOnOff_inc,w
  3846  073E  00B1               	movwf	??_a_m0_tOnOff_inc
  3847  073F  1C03               	skipc
  3848  0740  03B1               	decf	??_a_m0_tOnOff_inc,f
  3849  0741  02B1               	subwf	??_a_m0_tOnOff_inc,f
  3850  0742  0931               	comf	??_a_m0_tOnOff_inc,w
  3851  0743  1683               	bsf	3,5	;RP0=1, select bank1
  3852  0744  00A3               	movwf	(a_m0_tOnOff_inc@num+3)^(0+128)
  3853                           ;fsm_actions.h: 846: p2s = " m";
  3854  0745  30A3               	movlw	low STR_18
  3855  0746  00A5               	movwf	a_m0_tOnOff_inc@p2s^(0+128)
  3856  0747  3010               	movlw	high STR_18
  3857  0748  2F77               	goto	L7
  3858  0749                     l30005373:
  3859                           ;fsm_actions.h: 849: case S__M0__TON_OFF__SET_SS_1:
  3860                           ;fsm_actions.h: 850: num=tmp_11.menuShortLongAuxiliar%(long)60;
  3861  0749  3005               	movlw	5
  3862  074A  3E44               	addlw	_tmp_11& (0+255)
  3863  074B  0084               	movwf	4
  3864  074C  0800               	movf	0,w
  3865  074D  1283               	bcf	3,5	;RP0=0, select bank0
  3866  074E  00A0               	movwf	?___atmod
  3867  074F  0A84               	incf	4,f
  3868  0750  0800               	movf	0,w
  3869  0751  00A1               	movwf	?___atmod+1
  3870  0752  0A84               	incf	4,f
  3871  0753  0800               	movf	0,w
  3872  0754  00A2               	movwf	?___atmod+2
  3873  0755  303C               	movlw	60
  3874  0756  00A3               	movwf	?___atmod+3
  3875  0757  01A4               	clrf	?___atmod+4
  3876  0758  01A5               	clrf	?___atmod+5
  3877  0759  120A  158A  22E8   	fcall	___atmod
      +       120A  118A         
  3878  075E  1383               	bcf	3,7	;select IRP bank0
  3879  075F  0820               	movf	?___atmod,w
  3880  0760  1683               	bsf	3,5	;RP0=1, select bank1
  3881  0761  00A0               	movwf	a_m0_tOnOff_inc@num^(0+128)
  3882  0762  1283               	bcf	3,5	;RP0=0, select bank0
  3883  0763  0821               	movf	?___atmod+1,w
  3884  0764  1683               	bsf	3,5	;RP0=1, select bank1
  3885  0765  00A1               	movwf	(a_m0_tOnOff_inc@num+1)^(0+128)
  3886  0766  1283               	bcf	3,5	;RP0=0, select bank0
  3887  0767  0822               	movf	?___atmod+2,w
  3888  0768  1683               	bsf	3,5	;RP0=1, select bank1
  3889  0769  00A2               	movwf	(a_m0_tOnOff_inc@num+2)^(0+128)
  3890  076A  1283               	bcf	3,5	;RP0=0, select bank0
  3891  076B  00B1               	movwf	??_a_m0_tOnOff_inc
  3892  076C  0D31               	rlf	??_a_m0_tOnOff_inc,w
  3893  076D  00B1               	movwf	??_a_m0_tOnOff_inc
  3894  076E  1C03               	skipc
  3895  076F  03B1               	decf	??_a_m0_tOnOff_inc,f
  3896  0770  02B1               	subwf	??_a_m0_tOnOff_inc,f
  3897  0771  0931               	comf	??_a_m0_tOnOff_inc,w
  3898  0772  1683               	bsf	3,5	;RP0=1, select bank1
  3899  0773  00A3               	movwf	(a_m0_tOnOff_inc@num+3)^(0+128)
  3900                           ;fsm_actions.h: 851: p2s = " s";
  3901  0774  30A6               	movlw	low STR_19
  3902  0775  00A5               	movwf	a_m0_tOnOff_inc@p2s^(0+128)
  3903  0776  3010               	movlw	high STR_19
  3904  0777                     L7:
  3905  0777  00A6               	movwf	(a_m0_tOnOff_inc@p2s^(0+128)+1)
  3906  0778  2F8C               	goto	l30005377
  3907  0779                     l30005376:
  3908  0779  0879               	movf	_estadoFsm,w
  3909  077A  3A0B               	xorlw	11
  3910  077B  1903               	skipnz
  3911  077C  2EDD               	goto	l30005369
  3912  077D  3A07               	xorlw	7
  3913  077E  1903               	skipnz
  3914  077F  2EDD               	goto	l30005369
  3915  0780  3A01               	xorlw	1
  3916  0781  1903               	skipnz
  3917  0782  2F0C               	goto	l30005371
  3918  0783  3A03               	xorlw	3
  3919  0784  1903               	skipnz
  3920  0785  2F0C               	goto	l30005371
  3921  0786  3A01               	xorlw	1
  3922  0787  1903               	skipnz
  3923  0788  2F49               	goto	l30005373
  3924  0789  3A1F               	xorlw	31
  3925  078A  1903               	skipnz
  3926  078B  2F49               	goto	l30005373
  3927  078C                     l30005377:
  3928                           ;fsm_actions.h: 856: d7sm_set_88xx(titila,(unsigned char)num,p2s);
  3929  078C  1683               	bsf	3,5	;RP0=1, select bank1
  3930  078D  0820               	movf	a_m0_tOnOff_inc@num^(0+128),w
  3931  078E  1283               	bcf	3,5	;RP0=0, select bank0
  3932  078F  00AD               	movwf	?_d7sm_set_88xx
  3933  0790  1683               	bsf	3,5	;RP0=1, select bank1
  3934  0791  0826               	movf	(a_m0_tOnOff_inc@p2s+1)^(0+128),w
  3935  0792  1283               	bcf	3,5	;RP0=0, select bank0
  3936  0793  00AF               	movwf	?_d7sm_set_88xx+2
  3937  0794  1683               	bsf	3,5	;RP0=1, select bank1
  3938  0795  0825               	movf	a_m0_tOnOff_inc@p2s^(0+128),w
  3939  0796  1283               	bcf	3,5	;RP0=0, select bank0
  3940  0797  00AE               	movwf	?_d7sm_set_88xx+1
  3941  0798  1683               	bsf	3,5	;RP0=1, select bank1
  3942  0799  0824               	movf	a_m0_tOnOff_inc@titila^(0+128),w
  3943  079A  120A  158A  2B92   	ljmp	_d7sm_set_88xx
  3944  079D                     __end_of_a_m0_tOnOff_inc:
  3945  079D                     __ptext1247:	; =============== function ___awdiv ends ============
  3946                           ; *************** function ___lbmod *****************
  3947                           ; Defined at:
  3948                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\lbmod.c"
  3949                           ; Parameters:    Size  Location     Type
  3950                           ;  dividend        1    wreg     unsigned char 
  3951                           ;  divisor         1    3[BANK0 ] unsigned char 
  3952                           ; Auto vars:     Size  Location     Type
  3953                           ;  dividend        1    0[BANK0 ] unsigned char 
  3954                           ;  rem             1    2[BANK0 ] unsigned char 
  3955                           ;  counter         1    1[BANK0 ] unsigned char 
  3956                           ; Return value:  Size  Location     Type
  3957                           ;                  1    wreg      unsigned char 
  3958                           ; Registers used:
  3959                           ;		wreg, status,2, status,0
  3960                           ; Tracked objects:
  3961                           ;		On entry : 40/0
  3962                           ;		On exit  : 60/0
  3963                           ;		Unchanged: FFF9F/0
  3964                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3965                           ;      Locals:         1       4       0       0       0
  3966                           ;      Temp:     1
  3967                           ;      Total:    5
  3968                           ; This function calls:
  3969                           ;		Nothing
  3970                           ; This function is called by:
  3971                           ;		_a_showTimerIdOn
  3972                           ;		_a_m0_nMem_set
  3973                           ;		_a_m0_tOnOff_showString
  3974                           ;		_a_m0_tOnOff_inc
  3975                           ;		_d7sm_set_88xx
  3976                           ;		_ucharToStr
  3977                           ; This function uses a non-reentrant model
  3978                           ; 
  3979  079D                     ___lbmod:
  3980                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3981                           ;___lbmod@dividend stored from wreg
  3982  079D  1283               	bcf	3,5	;RP0=0, select bank0
  3983  079E  00A0               	movwf	___lbmod@dividend
  3984  079F  3008               	movlw	8
  3985  07A0  00A1               	movwf	___lbmod@counter
  3986  07A1  01A2               	clrf	___lbmod@rem
  3987  07A2                     l30005719:
  3988  07A2  0820               	movf	___lbmod@dividend,w
  3989  07A3  00F1               	movwf	??___lbmod
  3990  07A4  3007               	movlw	7
  3991  07A5  1003               	clrc
  3992  07A6                     L42:
  3993  07A6  0CF1               	rrf	??___lbmod,f
  3994  07A7  3EFF               	addlw	-1
  3995  07A8  1003               	clrc
  3996  07A9  1D03               	skipz
  3997  07AA  2FA6               	goto	L42
  3998  07AB  0D22               	rlf	___lbmod@rem,w
  3999  07AC  0471               	iorwf	??___lbmod,w
  4000  07AD  00A2               	movwf	___lbmod@rem
  4001  07AE  1003               	clrc
  4002  07AF  0DA0               	rlf	___lbmod@dividend,f
  4003  07B0  0823               	movf	___lbmod@divisor,w
  4004  07B1  0222               	subwf	___lbmod@rem,w
  4005  07B2  1C03               	skipc
  4006  07B3  2FB6               	goto	l30005723
  4007  07B4  0823               	movf	___lbmod@divisor,w
  4008  07B5  02A2               	subwf	___lbmod@rem,f
  4009  07B6                     l30005723:
  4010  07B6  0BA1               	decfsz	___lbmod@counter,f
  4011  07B7  2FA2               	goto	l30005719
  4012  07B8  0822               	movf	___lbmod@rem,w
  4013  07B9  0008               	return
  4014  07BA                     __end_of___lbmod:
  4015  07BA                     __ptext1241:	; =============== function ___atdiv ends ============
  4016                           ; *************** function ___lbdiv *****************
  4017                           ; Defined at:
  4018                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\lbdiv.c"
  4019                           ; Parameters:    Size  Location     Type
  4020                           ;  dividend        1    wreg     unsigned char 
  4021                           ;  divisor         1    0[BANK0 ] unsigned char 
  4022                           ; Auto vars:     Size  Location     Type
  4023                           ;  dividend        1    0[COMMON] unsigned char 
  4024                           ;  quotient        1    2[COMMON] unsigned char 
  4025                           ;  counter         1    1[COMMON] unsigned char 
  4026                           ; Return value:  Size  Location     Type
  4027                           ;                  1    wreg      unsigned char 
  4028                           ; Registers used:
  4029                           ;		wreg, status,2, status,0
  4030                           ; Tracked objects:
  4031                           ;		On entry : 40/0
  4032                           ;		On exit  : 60/0
  4033                           ;		Unchanged: FFF9F/0
  4034                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4035                           ;      Locals:         3       1       0       0       0
  4036                           ;      Temp:     0
  4037                           ;      Total:    4
  4038                           ; This function calls:
  4039                           ;		Nothing
  4040                           ; This function is called by:
  4041                           ;		_a_showTime
  4042                           ;		_a_m0_tOnOff_inc
  4043                           ; This function uses a non-reentrant model
  4044                           ; 
  4045  07BA                     ___lbdiv:
  4046                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  4047                           ;___lbdiv@dividend stored from wreg
  4048  07BA  00F1               	movwf	___lbdiv@dividend
  4049  07BB  01F3               	clrf	___lbdiv@quotient
  4050  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  4051  07BD  0820               	movf	___lbdiv@divisor,w
  4052  07BE  1903               	btfsc	3,2
  4053  07BF  2FD4               	goto	l30005396
  4054  07C0  01F2               	clrf	___lbdiv@counter
  4055  07C1                     l30005389:
  4056  07C1  0AF2               	incf	___lbdiv@counter,f
  4057  07C2  1003               	clrc
  4058  07C3  1BA0               	btfsc	___lbdiv@divisor,7
  4059  07C4  2FC8               	goto	L36
  4060  07C5  0DA0               	rlf	___lbdiv@divisor,f
  4061  07C6  2FC1               	goto	l30005389
  4062  07C7                     l509:
  4063  07C7  1003               	clrc
  4064  07C8                     L36:
  4065  07C8  0DF3               	rlf	___lbdiv@quotient,f
  4066  07C9  0820               	movf	___lbdiv@divisor,w
  4067  07CA  0271               	subwf	___lbdiv@dividend,w
  4068  07CB  1C03               	skipc
  4069  07CC  2FD1               	goto	L35
  4070  07CD  0820               	movf	___lbdiv@divisor,w
  4071  07CE  02F1               	subwf	___lbdiv@dividend,f
  4072  07CF  1473               	bsf	___lbdiv@quotient,0
  4073  07D0  1003               	clrc
  4074  07D1                     L35:
  4075  07D1  0CA0               	rrf	___lbdiv@divisor,f
  4076  07D2  0BF2               	decfsz	___lbdiv@counter,f
  4077  07D3  2FC7               	goto	l509
  4078  07D4                     l30005396:
  4079  07D4  0873               	movf	___lbdiv@quotient,w
  4080  07D5  0008               	return
  4081  07D6                     __end_of___lbdiv:
  4082  07D6                     __ptext1236:	; =============== function ___wmul ends ============
  4083                           ; *************** function ___tmul *****************
  4084                           ; Defined at:
  4085                           ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\tmul.c"
  4086                           ; Parameters:    Size  Location     Type
  4087                           ;  multiplier      3    0[BANK0 ] unsigned um
  4088                           ;  multiplicand    3    3[BANK0 ] unsigned um
  4089                           ; Auto vars:     Size  Location     Type
  4090                           ;  product         3    0[COMMON] unsigned um
  4091                           ; Return value:  Size  Location     Type
  4092                           ;                  3    0[BANK0 ] unsigned um
  4093                           ; Registers used:
  4094                           ;		wreg, status,2, status,0
  4095                           ; Tracked objects:
  4096                           ;		On entry : 160/0
  4097                           ;		On exit  : 60/0
  4098                           ;		Unchanged: FFE9F/0
  4099                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4100                           ;      Locals:         3       6       0       0       0
  4101                           ;      Temp:     0
  4102                           ;      Total:    9
  4103                           ; This function calls:
  4104                           ;		Nothing
  4105                           ; This function is called by:
  4106                           ;		_a_m0_tOnOff_inc
  4107                           ; This function uses a non-reentrant model
  4108                           ; 
  4109  07D6                     ___tmul:
  4110                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  4111  07D6  01F1               	clrf	___tmul@product
  4112  07D7  01F2               	clrf	___tmul@product+1
  4113  07D8  01F3               	clrf	___tmul@product+2
  4114  07D9                     l806:
  4115  07D9  1C20               	btfss	___tmul@multiplier,0
  4116  07DA  2FE9               	goto	l30005756
  4117  07DB  0823               	movf	___tmul@multiplicand,w
  4118  07DC  07F1               	addwf	___tmul@product,f
  4119  07DD  0824               	movf	___tmul@multiplicand+1,w
  4120  07DE  1103               	clrz
  4121  07DF  1803               	skipnc
  4122  07E0  0A24               	incf	___tmul@multiplicand+1,w
  4123  07E1  1D03               	btfss	3,2
  4124  07E2  07F2               	addwf	___tmul@product+1,f
  4125  07E3  0825               	movf	___tmul@multiplicand+2,w
  4126  07E4  1103               	clrz
  4127  07E5  1803               	skipnc
  4128  07E6  0A25               	incf	___tmul@multiplicand+2,w
  4129  07E7  1D03               	btfss	3,2
  4130  07E8  07F3               	addwf	___tmul@product+2,f
  4131  07E9                     l30005756:
  4132  07E9  1003               	clrc
  4133  07EA  0DA3               	rlf	___tmul@multiplicand,f
  4134  07EB  0DA4               	rlf	___tmul@multiplicand+1,f
  4135  07EC  0DA5               	rlf	___tmul@multiplicand+2,f
  4136  07ED  1003               	clrc
  4137  07EE  0CA2               	rrf	___tmul@multiplier+2,f
  4138  07EF  0CA1               	rrf	___tmul@multiplier+1,f
  4139  07F0  0CA0               	rrf	___tmul@multiplier,f
  4140  07F1  0822               	movf	___tmul@multiplier+2,w
  4141  07F2  0421               	iorwf	___tmul@multiplier+1,w
  4142  07F3  0420               	iorwf	___tmul@multiplier,w
  4143  07F4  1D03               	skipz
  4144  07F5  2FD9               	goto	l806
  4145  07F6  0871               	movf	___tmul@product,w
  4146  07F7  00A0               	movwf	?___tmul
  4147  07F8  0872               	movf	___tmul@product+1,w
  4148  07F9  00A1               	movwf	?___tmul+1
  4149  07FA  0873               	movf	___tmul@product+2,w
  4150  07FB  00A2               	movwf	?___tmul+2
  4151  07FC  0008               	return
  4152  07FD                     __end_of___tmul:
  4153  07FD                     PL3:
  4154  07FD  1283               	bcf	3,5	;RP0=0, select bank0
  4155  07FE  1303               	bcf	3,6	;RP1=0, select bank0
  4156  07FF  0008               	return
  4157                           
  4158                           	psect	text1206
  4159  132B                     __ptext1206:	; =============== function _a_m0_nMem_set ends ============
  4160                           ; *************** function _a_m0_input_save *****************
  4161                           ; Defined at:
  4162                           ;		line 541 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4163                           ; Parameters:    Size  Location     Type
  4164                           ;		None
  4165                           ; Auto vars:     Size  Location     Type
  4166                           ;		None
  4167                           ; Return value:  Size  Location     Type
  4168                           ;		None               void
  4169                           ; Registers used:
  4170                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4171                           ; Tracked objects:
  4172                           ;		On entry : 60/0
  4173                           ;		On exit  : 60/0
  4174                           ;		Unchanged: FFE9F/0
  4175                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4176                           ;      Locals:         0       0       0       0       0
  4177                           ;      Temp:     0
  4178                           ;      Total:    0
  4179                           ; This function calls:
  4180                           ;		_eeprom_write
  4181                           ;		_a_m0_input
  4182                           ; This function is called by:
  4183                           ; This function uses a non-reentrant model
  4184                           ; 
  4185  132B                     _a_m0_input_save:	;fsm_actions.h: 540: void a_m0_input_save(void)
  4186                           ;fsm_actions.h: 541: {
  4187                           ;fsm_actions.h: 542: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  4188                           ; Regs used in _a_m0_input_save: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4189  132B  10D5               	bcf	_t0Mem+3,1
  4190  132C  30B1               	movlw	low (_t0DelayConstant+1)
  4191  132D  0084               	movwf	4
  4192  132E  3010               	movlw	high (_t0DelayConstant+1)
  4193  132F  160A  118A  2000   	fcall	stringtab
  4194  1332  00D4               	movwf	_t0Mem+2
  4195  1333  1155               	bcf	_t0Mem+3,2
  4196                           ;fsm_actions.h: 543: tmp_11.flag_inputSettingLedBlink = 0;
  4197  1334  11C4               	bcf	_tmp_11,3
  4198                           ;fsm_actions.h: 545: tmp_11.mem_input = tmp_11.menuCharAuxiliar;
  4199  1335  0845               	movf	_tmp_11+1,w
  4200  1336  0648               	xorwf	_tmp_11+4,w
  4201  1337  39F8               	andlw	-8
  4202  1338  0648               	xorwf	_tmp_11+4,w
  4203  1339  00C5               	movwf	_tmp_11+1
  4204                           ;fsm_actions.h: 546: { eeprom_write(EEADDR__00_00__INPUT,tmp_11.mem_input); };
  4205  133A  3907               	andlw	7
  4206  133B  00A1               	movwf	?_eeprom_write
  4207  133C  3000               	movlw	0
  4208  133D  120A  118A  2253   	fcall	_eeprom_write
      +       160A  118A         
  4209                           ;fsm_actions.h: 547: a_m0_input();
  4210  1342  2B43               	ljmp	l30005504
  4211  1343                     __end_of_a_m0_input_save:
  4212  1343                     __ptext1215:	; =============== function _a_input2ActionFp ends ============
  4213                           ; *************** function _a_m0_input *****************
  4214                           ; Defined at:
  4215                           ;		line 495 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4216                           ; Parameters:    Size  Location     Type
  4217                           ;		None
  4218                           ; Auto vars:     Size  Location     Type
  4219                           ;		None
  4220                           ; Return value:  Size  Location     Type
  4221                           ;		None               void
  4222                           ; Registers used:
  4223                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4224                           ; Tracked objects:
  4225                           ;		On entry : 0/0
  4226                           ;		On exit  : 60/0
  4227                           ;		Unchanged: FFE9F/0
  4228                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229                           ;      Locals:         0       0       0       0       0
  4230                           ;      Temp:     0
  4231                           ;      Total:    0
  4232                           ; This function calls:
  4233                           ;		_d7sm_puts_scroll
  4234                           ; This function is called by:
  4235                           ;		_a_m0_input_save
  4236                           ; This function uses a non-reentrant model
  4237                           ; 
  4238  1343                     _a_m0_input:	;fsm_actions.h: 494: void a_m0_input(void)
  4239                           ;fsm_actions.h: 495: {
  4240  1343                     l30005504:	; Regs used in _a_m0_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4241                           ;fsm_actions.h: 496: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  4242  1343  1283               	bcf	3,5	;RP0=0, select bank0
  4243  1344  1303               	bcf	3,6	;RP1=0, select bank0
  4244  1345  10D5               	bcf	_t0Mem+3,1
  4245  1346  30B1               	movlw	low (_t0DelayConstant+1)
  4246  1347  0084               	movwf	4
  4247  1348  3010               	movlw	high (_t0DelayConstant+1)
  4248  1349  160A  118A  2000   	fcall	stringtab
      +       160A  118A         
  4249  134E  00D4               	movwf	_t0Mem+2
  4250  134F  1155               	bcf	_t0Mem+3,2
  4251                           ;fsm_actions.h: 498: tmp_11.mainMenuState = TEXT__M0__INPUT;
  4252  1350  01C7               	clrf	_tmp_11+3
  4253  1351  0AC7               	incf	_tmp_11+3,f
  4254                           ;fsm_actions.h: 499: d7sm_puts_scroll((char *)menu_text_main[tmp_11.mainMenuState]);
  4255  1352  1003               	clrc
  4256  1353  0D47               	rlf	_tmp_11+3,w
  4257  1354  3EB5               	addlw	_menu_text_main& (0+255)
  4258  1355  0084               	movwf	4
  4259  1356  1783               	bsf	3,7	;select IRP bank3
  4260  1357  0800               	movf	0,w
  4261  1358  00A3               	movwf	?_d7sm_puts_scroll
  4262  1359  0A84               	incf	4,f
  4263  135A  0800               	movf	0,w
  4264  135B  00A4               	movwf	?_d7sm_puts_scroll+1
  4265  135C  120A  118A  2B54   	ljmp	l30005427
  4266  135F                     __end_of_a_m0_input:
  4267                           
  4268                           	psect	text1210
  4269  10D1                     __ptext1210:	; =============== function _a_m0_nMem_inc ends ============
  4270                           ; *************** function _a_m0_return *****************
  4271                           ; Defined at:
  4272                           ;		line 420 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4273                           ; Parameters:    Size  Location     Type
  4274                           ;		None
  4275                           ; Auto vars:     Size  Location     Type
  4276                           ;		None
  4277                           ; Return value:  Size  Location     Type
  4278                           ;		None               void
  4279                           ; Registers used:
  4280                           ;		status,2
  4281                           ; Tracked objects:
  4282                           ;		On entry : 60/0
  4283                           ;		On exit  : 60/0
  4284                           ;		Unchanged: FFF9F/0
  4285                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4286                           ;      Locals:         0       0       0       0       0
  4287                           ;      Temp:     0
  4288                           ;      Total:    0
  4289                           ; This function calls:
  4290                           ;		Nothing
  4291                           ; This function is called by:
  4292                           ; This function uses a non-reentrant model
  4293                           ; 
  4294  10D1                     _a_m0_return:	;fsm_actions.h: 419: void a_m0_return(void)
  4295                           ;fsm_actions.h: 420: {
  4296                           ;fsm_actions.h: 421: { t0Mem[T0_D7SM_SCROLL].prescaler=0; t0Mem[T0_D7SM_SCROLL].pause=1;
      +                           t0Mem[T0_D7SM_SCROLL].loop=0; };
  4297                           ; Regs used in _a_m0_return: [status,2]
  4298  10D1  01DA               	clrf	_t0Mem+8
  4299  10D2  155B               	bsf	_t0Mem+9,2
  4300  10D3  105B               	bcf	_t0Mem+9,0
  4301                           ;fsm_actions.h: 422: (t1Mem[T1_TIME].flag=1);
  4302  10D4  14DF               	bsf	_t1Mem+3,1
  4303                           ;fsm_actions.h: 424: tmp_11.flag_inputSettingLedBlink = 0;
  4304  10D5  11C4               	bcf	_tmp_11,3
  4305  10D6  0008               	return
  4306  10D7                     __end_of_a_m0_return:
  4307                           
  4308                           	psect	text1213
  4309  12A3                     __ptext1213:	; =============== function _a_m0_first_save ends ============
  4310                           ; *************** function _a_m0_first_inc *****************
  4311                           ; Defined at:
  4312                           ;		line 471 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4313                           ; Parameters:    Size  Location     Type
  4314                           ;		None
  4315                           ; Auto vars:     Size  Location     Type
  4316                           ;		None
  4317                           ; Return value:  Size  Location     Type
  4318                           ;		None               void
  4319                           ; Registers used:
  4320                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4321                           ; Tracked objects:
  4322                           ;		On entry : 60/0
  4323                           ;		On exit  : 60/0
  4324                           ;		Unchanged: FFE9F/0
  4325                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4326                           ;      Locals:         0       0       0       0       0
  4327                           ;      Temp:     0
  4328                           ;      Total:    0
  4329                           ; This function calls:
  4330                           ;		_a_m0_first_set
  4331                           ; This function is called by:
  4332                           ; This function uses a non-reentrant model
  4333                           ; 
  4334  12A3                     _a_m0_first_inc:	;fsm_actions.h: 470: void a_m0_first_inc(void)
  4335                           ;fsm_actions.h: 471: {
  4336                           ;fsm_actions.h: 472: tmp_11.menuCharAuxiliar = !tmp_11.menuCharAuxiliar;
  4337                           ; Regs used in _a_m0_first_inc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4338  12A3  0848               	movf	_tmp_11+4,w
  4339  12A4  3A00               	xorlw	0
  4340  12A5  3000               	movlw	0
  4341  12A6  1903               	skipnz
  4342  12A7  3001               	movlw	1
  4343  12A8  00C8               	movwf	_tmp_11+4
  4344                           ;fsm_actions.h: 473: a_m0_first_set();
  4345  12A9  2AAA               	ljmp	_a_m0_first_set
  4346  12AA                     __end_of_a_m0_first_inc:
  4347  12AA                     __ptext1211:	; =============== function _a_m0_return ends ============
  4348                           ; *************** function _a_m0_first_set *****************
  4349                           ; Defined at:
  4350                           ;		line 452 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4351                           ; Parameters:    Size  Location     Type
  4352                           ;		None
  4353                           ; Auto vars:     Size  Location     Type
  4354                           ;		None
  4355                           ; Return value:  Size  Location     Type
  4356                           ;		None               void
  4357                           ; Registers used:
  4358                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4359                           ; Tracked objects:
  4360                           ;		On entry : 60/0
  4361                           ;		On exit  : 60/0
  4362                           ;		Unchanged: FFE9F/0
  4363                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4364                           ;      Locals:         0       0       0       0       0
  4365                           ;      Temp:     0
  4366                           ;      Total:    0
  4367                           ; This function calls:
  4368                           ;		_d7sm_puts_scroll
  4369                           ; This function is called by:
  4370                           ;		_a_m0_first_inc
  4371                           ; This function uses a non-reentrant model
  4372                           ; 
  4373  12AA                     _a_m0_first_set:	;fsm_actions.h: 451: void a_m0_first_set(void)
  4374                           ;fsm_actions.h: 452: {
  4375                           ;fsm_actions.h: 453: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  4376                           ; Regs used in _a_m0_first_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4377  12AA  10D5               	bcf	_t0Mem+3,1
  4378  12AB  30B1               	movlw	low (_t0DelayConstant+1)
  4379  12AC  0084               	movwf	4
  4380  12AD  3010               	movlw	high (_t0DelayConstant+1)
  4381  12AE  160A  118A  2000   	fcall	stringtab
      +       160A  118A         
  4382  12B3  00D4               	movwf	_t0Mem+2
  4383  12B4  1155               	bcf	_t0Mem+3,2
  4384                           ;fsm_actions.h: 454: tmp_11.flag_inputSettingLedBlink = 1;
  4385  12B5  15C4               	bsf	_tmp_11,3
  4386                           ;fsm_actions.h: 456: if(estadoFsm==S__M0__FIRST)
  4387  12B6  0879               	movf	_estadoFsm,w
  4388  12B7  3A04               	xorlw	4
  4389  12B8  1D03               	skipz
  4390  12B9  2ABE               	goto	l30005499
  4391                           ;fsm_actions.h: 457: tmp_11.menuCharAuxiliar = tmp_11.mem_first;
  4392  12BA  01C8               	clrf	_tmp_11+4
  4393  12BB  1E45               	btfss	_tmp_11+1,4
  4394  12BC  2ABE               	goto	l30005499
  4395  12BD  0AC8               	incf	_tmp_11+4,f
  4396  12BE                     l30005499:
  4397                           ;fsm_actions.h: 459: if(tmp_11.menuCharAuxiliar) d7sm_puts_scroll((char *)"ON");
  4398  12BE  0848               	movf	_tmp_11+4,w
  4399  12BF  1903               	btfsc	3,2
  4400  12C0  2AC8               	goto	l30005501
  4401  12C1  30EC               	movlw	low (STR_10+6)
  4402  12C2  00A3               	movwf	?_d7sm_puts_scroll
  4403  12C3  3010               	movlw	high (STR_10+6)
  4404  12C4  00A4               	movwf	?_d7sm_puts_scroll+1
  4405  12C5  120A  118A  2B54   	ljmp	l30005427
  4406  12C8                     l30005501:
  4407                           ;fsm_actions.h: 460: else d7sm_puts_scroll((char *)"OFF");
  4408  12C8  30F5               	movlw	low (STR_11+6)
  4409  12C9  00A3               	movwf	?_d7sm_puts_scroll
  4410  12CA  3010               	movlw	high (STR_11+6)
  4411  12CB  00A4               	movwf	?_d7sm_puts_scroll+1
  4412  12CC  120A  118A  2B54   	ljmp	l30005427
  4413  12CF                     __end_of_a_m0_first_set:
  4414                           
  4415                           	psect	text1214
  4416  10AC                     __ptext1214:	; =============== function _a_m0_first_inc ends ============
  4417                           ; *************** function _a_input2ActionFp *****************
  4418                           ; Defined at:
  4419                           ;		line 224 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4420                           ; Parameters:    Size  Location     Type
  4421                           ;		None
  4422                           ; Auto vars:     Size  Location     Type
  4423                           ;		None
  4424                           ; Return value:  Size  Location     Type
  4425                           ;		None               void
  4426                           ; Registers used:
  4427                           ;		None
  4428                           ; Tracked objects:
  4429                           ;		On entry : 60/0
  4430                           ;		On exit  : 60/0
  4431                           ;		Unchanged: FFF9F/0
  4432                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4433                           ;      Locals:         0       0       0       0       0
  4434                           ;      Temp:     0
  4435                           ;      Total:    0
  4436                           ; This function calls:
  4437                           ;		Nothing
  4438                           ; This function is called by:
  4439                           ; This function uses a non-reentrant model
  4440                           ; 
  4441  10AC                     _a_input2ActionFp:	;fsm_actions.h: 223: void a_input2ActionFp(void)
  4442                           ;fsm_actions.h: 224: {
  4443                           ;fsm_actions.h: 225: RB3 = 0;
  4444                           ; Regs used in _a_input2ActionFp: []
  4445  10AC  1186               	bcf	6,3
  4446                           ;fsm_actions.h: 226: tmp_11.flag_showHyphens = 0;
  4447  10AD  10C4               	bcf	_tmp_11,1
  4448                           ;fsm_actions.h: 228: (t1Mem[T1_TIME].flag=1);
  4449  10AE  14DF               	bsf	_t1Mem+3,1
  4450  10AF  0008               	return
  4451  10B0                     __end_of_a_input2ActionFp:
  4452                           
  4453                           	psect	text1218
  4454  12CF                     __ptext1218:	; =============== function _a_m0_nMem ends ============
  4455                           ; *************** function _a_inputActionFn *****************
  4456                           ; Defined at:
  4457                           ;		line 133 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4458                           ; Parameters:    Size  Location     Type
  4459                           ;		None
  4460                           ; Auto vars:     Size  Location     Type
  4461                           ;		None
  4462                           ; Return value:  Size  Location     Type
  4463                           ;		None               void
  4464                           ; Registers used:
  4465                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  4466                           ; Tracked objects:
  4467                           ;		On entry : 60/0
  4468                           ;		On exit  : 60/0
  4469                           ;		Unchanged: FFE00/0
  4470                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4471                           ;      Locals:         1       0       0       0       0
  4472                           ;      Temp:     1
  4473                           ;      Total:    1
  4474                           ; This function calls:
  4475                           ;		Nothing
  4476                           ; This function is called by:
  4477                           ; This function uses a non-reentrant model
  4478                           ; 
  4479  12CF                     _a_inputActionFn:	;fsm_actions.h: 132: void a_inputActionFn(void)
  4480                           ;fsm_actions.h: 133: {
  4481                           ;fsm_actions.h: 134: RA3 = 1;
  4482                           ; Regs used in _a_inputActionFn: [wreg-fsr0h+status,2+status,0]
  4483  12CF  1585               	bsf	5,3
  4484  12D0  2AEB               	goto	l30005285
  4485  12D1                     l144:
  4486                           ;fsm_actions.h: 139: case M0_INPUT_PAUSE_OFF:
  4487                           ;fsm_actions.h: 140: (t1Mem[T1_TIME].pause=1);
  4488  12D1  155F               	bsf	_t1Mem+3,2
  4489                           ;fsm_actions.h: 141: tmp_11.flag_showTimeBlink = 1;
  4490  12D2  1744               	bsf	_tmp_11,6
  4491  12D3                     l30005283:
  4492                           ;fsm_actions.h: 143: case M0_INPUT_FUERZA:
  4493                           ;fsm_actions.h: 144: RB1 = tmp_11.mem_input%2;
  4494  12D3  0845               	movf	_tmp_11+1,w
  4495  12D4  3907               	andlw	7
  4496  12D5  00F1               	movwf	??_a_inputActionFn
  4497  12D6  0C71               	rrf	??_a_inputActionFn,w
  4498  12D7  1283               	bcf	3,5	;RP0=0, select bank0
  4499  12D8  1303               	bcf	3,6	;RP1=0, select bank0
  4500  12D9  1C03               	btfss	3,0
  4501  12DA  2ADD               	goto	L8
  4502  12DB  1486               	bsf	6,1
  4503  12DC  2ADE               	goto	l30005284
  4504  12DD                     L8:
  4505  12DD  1086               	bcf	6,1
  4506  12DE                     l30005284:
  4507                           ;fsm_actions.h: 151: tmp_11.flag_outForce = 1;
  4508  12DE  1644               	bsf	_tmp_11,4
  4509                           ;fsm_actions.h: 152: tmp_11.flag_outForceVal = RB1;
  4510  12DF  3000               	movlw	0
  4511  12E0  1886               	btfsc	6,1
  4512  12E1  3001               	movlw	1
  4513  12E2  00F1               	movwf	??_a_inputActionFn
  4514  12E3  0EF1               	swapf	??_a_inputActionFn,f
  4515  12E4  0DF1               	rlf	??_a_inputActionFn,f
  4516  12E5  0844               	movf	_tmp_11,w
  4517  12E6  0671               	xorwf	??_a_inputActionFn,w
  4518  12E7  39DF               	andlw	-33
  4519  12E8  0671               	xorwf	??_a_inputActionFn,w
  4520  12E9  00C4               	movwf	_tmp_11
  4521  12EA  0008               	return
  4522  12EB                     l30005285:
  4523  12EB  0845               	movf	_tmp_11+1,w
  4524  12EC  3907               	andlw	7
  4525  12ED  1903               	skipnz
  4526  12EE  0008               	return
  4527  12EF  3A01               	xorlw	1
  4528  12F0  1903               	skipnz
  4529  12F1  2AD1               	goto	l144
  4530  12F2  3A03               	xorlw	3
  4531  12F3  1903               	skipnz
  4532  12F4  2AD1               	goto	l144
  4533  12F5  3A01               	xorlw	1
  4534  12F6  1903               	skipnz
  4535  12F7  2AD3               	goto	l30005283
  4536  12F8  3A07               	xorlw	7
  4537  12F9  1D03               	btfss	3,2
  4538  12FA  0008               	return
  4539  12FB  2AD3               	goto	l30005283
  4540  12FC                     __end_of_a_inputActionFn:
  4541                           
  4542                           	psect	text1219
  4543  1265                     __ptext1219:	; =============== function _a_inputActionFn ends ============
  4544                           ; *************** function _a_input2ActionFn *****************
  4545                           ; Defined at:
  4546                           ;		line 184 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4547                           ; Parameters:    Size  Location     Type
  4548                           ;		None
  4549                           ; Auto vars:     Size  Location     Type
  4550                           ;		None
  4551                           ; Return value:  Size  Location     Type
  4552                           ;		None               void
  4553                           ; Registers used:
  4554                           ;		wreg, status,2, status,0
  4555                           ; Tracked objects:
  4556                           ;		On entry : 60/0
  4557                           ;		On exit  : 60/0
  4558                           ;		Unchanged: FFF9F/0
  4559                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4560                           ;      Locals:         0       0       0       0       0
  4561                           ;      Temp:     0
  4562                           ;      Total:    0
  4563                           ; This function calls:
  4564                           ;		Nothing
  4565                           ; This function is called by:
  4566                           ; This function uses a non-reentrant model
  4567                           ; 
  4568  1265                     _a_input2ActionFn:	;fsm_actions.h: 183: void a_input2ActionFn(void)
  4569                           ;fsm_actions.h: 184: {
  4570                           ;fsm_actions.h: 185: RB3 = 1;
  4571                           ; Regs used in _a_input2ActionFn: [wreg+status,2+status,0]
  4572  1265  1586               	bsf	6,3
  4573                           ;fsm_actions.h: 187: { t1Mem[T1_TIME].prescaler=0; };
  4574  1266  01DC               	clrf	_t1Mem
  4575  1267  01DD               	clrf	_t1Mem+1
  4576  1268  01DE               	clrf	_t1Mem+2
  4577                           ;fsm_actions.h: 188: RB1 = 0;
  4578  1269  1086               	bcf	6,1
  4579                           ;fsm_actions.h: 189: RA1 = 0;
  4580  126A  1085               	bcf	5,1
  4581                           ;fsm_actions.h: 190: tmp_11.p2eepromAddr = EEADDR__16_00__TON_OFF;
  4582  126B  3010               	movlw	16
  4583  126C  00CD               	movwf	_tmp_11+9
  4584                           ;fsm_actions.h: 193: if(!tmp_11.mem_first) tmp_11.p2eepromAddr += sizeof(short long);
  4585  126D  1A45               	btfsc	_tmp_11+1,4
  4586  126E  2A71               	goto	l30005248
  4587  126F  3003               	movlw	3
  4588  1270  07CD               	addwf	_tmp_11+9,f
  4589  1271                     l30005248:
  4590                           ;fsm_actions.h: 198: tmp_11.flag_showHyphens=1;
  4591  1271  14C4               	bsf	_tmp_11,1
  4592                           ;fsm_actions.h: 201: disp.d0_dp=0;
  4593  1272  1243               	bcf	_disp+5,4
  4594                           ;fsm_actions.h: 202: disp.d1_dp=0;
  4595  1273  12C3               	bcf	_disp+5,5
  4596                           ;fsm_actions.h: 203: disp.d2_dp=0;
  4597  1274  1343               	bcf	_disp+5,6
  4598                           ;fsm_actions.h: 204: disp.d3_dp=0;
  4599  1275  13C3               	bcf	_disp+5,7
  4600                           ;fsm_actions.h: 206: tmp_11.str[0]='R';
  4601  1276  3052               	movlw	82
  4602  1277  00CE               	movwf	_tmp_11+10
  4603                           ;fsm_actions.h: 207: tmp_11.str[1]='S';
  4604  1278  3053               	movlw	83
  4605  1279  00CF               	movwf	_tmp_11+11
  4606                           ;fsm_actions.h: 208: tmp_11.str[2]='t';
  4607  127A  3074               	movlw	116
  4608  127B  00D0               	movwf	_tmp_11+12
  4609                           ;fsm_actions.h: 209: tmp_11.str[3]=' ';
  4610  127C  3020               	movlw	32
  4611  127D  00D1               	movwf	_tmp_11+13
  4612                           ;fsm_actions.h: 210: disp.str=tmp_11.str;
  4613  127E  304E               	movlw	(_tmp_11+10)& (0+255)
  4614  127F  00BE               	movwf	_disp
  4615  1280  3080               	movlw	128
  4616  1281  00BF               	movwf	_disp+1
  4617  1282  0008               	return
  4618  1283                     __end_of_a_input2ActionFn:
  4619                           
  4620                           	psect	text1220
  4621  10B5                     __ptext1220:	; =============== function _a_input2ActionFn ends ============
  4622                           ; *************** function _a_showTimerIdOff *****************
  4623                           ; Defined at:
  4624                           ;		line 321 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4625                           ; Parameters:    Size  Location     Type
  4626                           ;		None
  4627                           ; Auto vars:     Size  Location     Type
  4628                           ;		None
  4629                           ; Return value:  Size  Location     Type
  4630                           ;		None               void
  4631                           ; Registers used:
  4632                           ;		status,2
  4633                           ; Tracked objects:
  4634                           ;		On entry : 60/0
  4635                           ;		On exit  : 60/0
  4636                           ;		Unchanged: FFF9F/0
  4637                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4638                           ;      Locals:         0       0       0       0       0
  4639                           ;      Temp:     0
  4640                           ;      Total:    0
  4641                           ; This function calls:
  4642                           ;		Nothing
  4643                           ; This function is called by:
  4644                           ; This function uses a non-reentrant model
  4645                           ; 
  4646  10B5                     _a_showTimerIdOff:	;fsm_actions.h: 320: void a_showTimerIdOff(void)
  4647                           ;fsm_actions.h: 321: {
  4648                           ;fsm_actions.h: 322: tmp_11.flag_showTimerId=0;
  4649                           ; Regs used in _a_showTimerIdOff: [status,2]
  4650  10B5  1044               	bcf	_tmp_11,0
  4651                           ;fsm_actions.h: 323: { t0Mem[T0_D7SM_SCROLL].prescaler=0; t0Mem[T0_D7SM_SCROLL].pause=1;
      +                           t0Mem[T0_D7SM_SCROLL].loop=0; };
  4652  10B6  01DA               	clrf	_t0Mem+8
  4653  10B7  155B               	bsf	_t0Mem+9,2
  4654  10B8  105B               	bcf	_t0Mem+9,0
  4655  10B9  0008               	return
  4656  10BA                     __end_of_a_showTimerIdOff:
  4657                           
  4658                           	psect	text1223
  4659  1283                     __ptext1223:	; =============== function _a_showTime ends ============
  4660                           ; *************** function _a_inputActionFp *****************
  4661                           ; Defined at:
  4662                           ;		line 160 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4663                           ; Parameters:    Size  Location     Type
  4664                           ;		None
  4665                           ; Auto vars:     Size  Location     Type
  4666                           ;		None
  4667                           ; Return value:  Size  Location     Type
  4668                           ;		None               void
  4669                           ; Registers used:
  4670                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  4671                           ; Tracked objects:
  4672                           ;		On entry : 60/0
  4673                           ;		On exit  : 60/0
  4674                           ;		Unchanged: FFE00/0
  4675                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4676                           ;      Locals:         0       0       0       0       0
  4677                           ;      Temp:     0
  4678                           ;      Total:    0
  4679                           ; This function calls:
  4680                           ;		Nothing
  4681                           ; This function is called by:
  4682                           ; This function uses a non-reentrant model
  4683                           ; 
  4684  1283                     _a_inputActionFp:	;fsm_actions.h: 159: void a_inputActionFp(void)
  4685                           ;fsm_actions.h: 160: {
  4686                           ;fsm_actions.h: 161: RA3 = 0;
  4687                           ; Regs used in _a_inputActionFp: [wreg-fsr0h+status,2+status,0]
  4688  1283  1185               	bcf	5,3
  4689  1284  2A92               	goto	l30005288
  4690  1285                     l152:
  4691                           ;fsm_actions.h: 166: case M0_INPUT_PAUSE_OFF:
  4692                           ;fsm_actions.h: 167: (t1Mem[T1_TIME].pause=0);
  4693  1285  115F               	bcf	_t1Mem+3,2
  4694                           ;fsm_actions.h: 168: tmp_11.flag_showTimeBlink = 0;
  4695  1286  1344               	bcf	_tmp_11,6
  4696  1287                     l154:
  4697                           ;fsm_actions.h: 170: case M0_INPUT_FUERZA:
  4698                           ;fsm_actions.h: 171: RB1 = tmp_11.p2eepromAddr%2;
  4699  1287  1C4D               	btfss	_tmp_11+9,0
  4700  1288  2A8D               	goto	u5890
  4701  1289  1283               	bcf	3,5	;RP0=0, select bank0
  4702  128A  1303               	bcf	3,6	;RP1=0, select bank0
  4703  128B  1486               	bsf	6,1
  4704  128C  2A90               	goto	u5904
  4705  128D                     u5890:
  4706  128D  1283               	bcf	3,5	;RP0=0, select bank0
  4707  128E  1303               	bcf	3,6	;RP1=0, select bank0
  4708  128F  1086               	bcf	6,1
  4709  1290                     u5904:
  4710                           ;fsm_actions.h: 174: tmp_11.flag_outForce = 0;
  4711  1290  1244               	bcf	_tmp_11,4
  4712  1291  0008               	return
  4713  1292                     l30005288:
  4714  1292  0845               	movf	_tmp_11+1,w
  4715  1293  3907               	andlw	7
  4716  1294  1903               	skipnz
  4717  1295  0008               	return
  4718  1296  3A01               	xorlw	1
  4719  1297  1903               	skipnz
  4720  1298  2A85               	goto	l152
  4721  1299  3A03               	xorlw	3
  4722  129A  1903               	skipnz
  4723  129B  2A85               	goto	l152
  4724  129C  3A01               	xorlw	1
  4725  129D  1903               	skipnz
  4726  129E  2A87               	goto	l154
  4727  129F  3A07               	xorlw	7
  4728  12A0  1D03               	btfss	3,2
  4729  12A1  0008               	return
  4730  12A2  2A87               	goto	l154
  4731  12A3                     __end_of_a_inputActionFp:
  4732                           
  4733                           	psect	text1224
  4734  0015                     __ptext1224:	; =============== function _a_inputActionFp ends ============
  4735                           ; *************** function _a_doNothing *****************
  4736                           ; Defined at:
  4737                           ;		line 39 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4738                           ; Parameters:    Size  Location     Type
  4739                           ;		None
  4740                           ; Auto vars:     Size  Location     Type
  4741                           ;		None
  4742                           ; Return value:  Size  Location     Type
  4743                           ;		None               void
  4744                           ; Registers used:
  4745                           ;		None
  4746                           ; Tracked objects:
  4747                           ;		On entry : 60/0
  4748                           ;		On exit  : 60/0
  4749                           ;		Unchanged: FFFFFF9F/0
  4750                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4751                           ;      Locals:         0       0       0       0       0
  4752                           ;      Temp:     0
  4753                           ;      Total:    0
  4754                           ; This function calls:
  4755                           ;		Nothing
  4756                           ; This function is called by:
  4757                           ; This function uses a non-reentrant model
  4758                           ; 
  4759  0015                     _a_doNothing:	;fsm_actions.h: 39: void a_doNothing(void) {}
  4760                           ; Regs used in _a_doNothing: []
  4761  0015  0008               	return
  4762  0016                     __end_of_a_doNothing:
  4763                           
  4764                           	psect	text1225
  4765  1144                     __ptext1225:	; =============== function _a_doNothing ends ============
  4766                           ; *************** function _a_showHyphensOn *****************
  4767                           ; Defined at:
  4768                           ;		line 285 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4769                           ; Parameters:    Size  Location     Type
  4770                           ;		None
  4771                           ; Auto vars:     Size  Location     Type
  4772                           ;		None
  4773                           ; Return value:  Size  Location     Type
  4774                           ;		None               void
  4775                           ; Registers used:
  4776                           ;		wreg, status,2, status,0
  4777                           ; Tracked objects:
  4778                           ;		On entry : 60/0
  4779                           ;		On exit  : 60/0
  4780                           ;		Unchanged: FFF9F/0
  4781                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4782                           ;      Locals:         0       0       0       0       0
  4783                           ;      Temp:     0
  4784                           ;      Total:    0
  4785                           ; This function calls:
  4786                           ;		Nothing
  4787                           ; This function is called by:
  4788                           ; This function uses a non-reentrant model
  4789                           ; 
  4790  1144                     _a_showHyphensOn:	;fsm_actions.h: 284: void a_showHyphensOn(void)
  4791                           ;fsm_actions.h: 285: {
  4792                           ;fsm_actions.h: 286: tmp_11.flag_showHyphens=1;
  4793                           ; Regs used in _a_showHyphensOn: [wreg+status,2+status,0]
  4794  1144  14C4               	bsf	_tmp_11,1
  4795                           ;fsm_actions.h: 295: disp.d0_dp=0;
  4796  1145  1243               	bcf	_disp+5,4
  4797                           ;fsm_actions.h: 296: disp.d1_dp=0;
  4798  1146  12C3               	bcf	_disp+5,5
  4799                           ;fsm_actions.h: 297: disp.d2_dp=0;
  4800  1147  1343               	bcf	_disp+5,6
  4801                           ;fsm_actions.h: 298: disp.d3_dp=0;
  4802  1148  13C3               	bcf	_disp+5,7
  4803                           ;fsm_actions.h: 300: tmp_11.str[0]='-';
  4804  1149  302D               	movlw	45
  4805  114A  00CE               	movwf	_tmp_11+10
  4806                           ;fsm_actions.h: 301: tmp_11.str[1]='-';
  4807  114B  00CF               	movwf	_tmp_11+11
  4808                           ;fsm_actions.h: 302: tmp_11.str[2]='-';
  4809  114C  00D0               	movwf	_tmp_11+12
  4810                           ;fsm_actions.h: 303: tmp_11.str[3]='-';
  4811  114D  00D1               	movwf	_tmp_11+13
  4812                           ;fsm_actions.h: 304: disp.str=tmp_11.str;
  4813  114E  304E               	movlw	(_tmp_11+10)& (0+255)
  4814  114F  00BE               	movwf	_disp
  4815  1150  3080               	movlw	128
  4816  1151  00BF               	movwf	_disp+1
  4817  1152  0008               	return
  4818  1153                     __end_of_a_showHyphensOn:
  4819                           
  4820                           	psect	text1226
  4821  10A1                     __ptext1226:	; =============== function _a_showHyphensOn ends ============
  4822                           ; *************** function _a_showHyphensOff *****************
  4823                           ; Defined at:
  4824                           ;		line 312 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4825                           ; Parameters:    Size  Location     Type
  4826                           ;		None
  4827                           ; Auto vars:     Size  Location     Type
  4828                           ;		None
  4829                           ; Return value:  Size  Location     Type
  4830                           ;		None               void
  4831                           ; Registers used:
  4832                           ;		None
  4833                           ; Tracked objects:
  4834                           ;		On entry : 60/0
  4835                           ;		On exit  : 60/0
  4836                           ;		Unchanged: FFF9F/0
  4837                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4838                           ;      Locals:         0       0       0       0       0
  4839                           ;      Temp:     0
  4840                           ;      Total:    0
  4841                           ; This function calls:
  4842                           ;		Nothing
  4843                           ; This function is called by:
  4844                           ; This function uses a non-reentrant model
  4845                           ; 
  4846  10A1                     _a_showHyphensOff:	;fsm_actions.h: 311: void a_showHyphensOff(void)
  4847                           ;fsm_actions.h: 312: {
  4848                           ;fsm_actions.h: 313: tmp_11.flag_showHyphens=0;
  4849                           ; Regs used in _a_showHyphensOff: []
  4850  10A1  10C4               	bcf	_tmp_11,1
  4851  10A2  0008               	return
  4852  10A3                     __end_of_a_showHyphensOff:
  4853                           
  4854                           	psect	text1229
  4855  1129                     __ptext1229:	; =============== function _a_m0_first ends ============
  4856                           ; *************** function _a_testDisplaySetup *****************
  4857                           ; Defined at:
  4858                           ;		line 45 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4859                           ; Parameters:    Size  Location     Type
  4860                           ;		None
  4861                           ; Auto vars:     Size  Location     Type
  4862                           ;		None
  4863                           ; Return value:  Size  Location     Type
  4864                           ;		None               void
  4865                           ; Registers used:
  4866                           ;		wreg, fsr0l, fsr0h, pclath
  4867                           ; Tracked objects:
  4868                           ;		On entry : 60/0
  4869                           ;		On exit  : 60/0
  4870                           ;		Unchanged: FFE9F/0
  4871                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4872                           ;      Locals:         0       0       0       0       0
  4873                           ;      Temp:     0
  4874                           ;      Total:    0
  4875                           ; This function calls:
  4876                           ;		Nothing
  4877                           ; This function is called by:
  4878                           ; This function uses a non-reentrant model
  4879                           ; 
  4880  1129                     _a_testDisplaySetup:	;fsm_actions.h: 44: void a_testDisplaySetup(void)
  4881                           ;fsm_actions.h: 45: {
  4882                           ;fsm_actions.h: 46: { t0Mem[T0_TESTDISPLAY].flag=0; t0Mem[T0_TESTDISPLAY].prescaler=t0De
      +                          layConstant[T0_TESTDISPLAY]; t0Mem[T0_TESTDISPLAY].pause=0; };
  4883                           ; Regs used in _a_testDisplaySetup: [wreg-fsr0h+pclath]
  4884  1129  10D3               	bcf	_t0Mem+1,1
  4885  112A  30B0               	movlw	low _t0DelayConstant
  4886  112B  0084               	movwf	4
  4887  112C  3010               	movlw	high _t0DelayConstant
  4888  112D  160A  118A  2000   	fcall	stringtab
      +       160A  118A         
  4889  1132  00D2               	movwf	_t0Mem
  4890  1133  1153               	bcf	_t0Mem+1,2
  4891  1134  0008               	return
  4892  1135                     __end_of_a_testDisplaySetup:
  4893                           
  4894                           	psect	text1230
  4895  0889                     __ptext1230:	; =============== function _a_testDisplaySetup ends ============
  4896                           ; *************** function _a_temporizar *****************
  4897                           ; Defined at:
  4898                           ;		line 81 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  4899                           ; Parameters:    Size  Location     Type
  4900                           ;		None
  4901                           ; Auto vars:     Size  Location     Type
  4902                           ;		None
  4903                           ; Return value:  Size  Location     Type
  4904                           ;		None               void
  4905                           ; Registers used:
  4906                           ;		wreg, status,2, status,0, pclath, cstack
  4907                           ; Tracked objects:
  4908                           ;		On entry : 60/0
  4909                           ;		On exit  : 60/0
  4910                           ;		Unchanged: FFE00/0
  4911                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4912                           ;      Locals:         0       3       0       0       0
  4913                           ;      Temp:     3
  4914                           ;      Total:    3
  4915                           ; This function calls:
  4916                           ;		_eeprom_read
  4917                           ;		___wmul
  4918                           ;		___awmod
  4919                           ; This function is called by:
  4920                           ; This function uses a non-reentrant model
  4921                           ; 
  4922  0889                     _a_temporizar:	;fsm_actions.h: 80: void a_temporizar(void)
  4923                           ;fsm_actions.h: 81: {
  4924  0889  218E               	call	PL4	;select bank 3
  4925                           ;fsm_actions.h: 82: { t1DelayConstant[T1_TIME]=0x0000L; t1DelayConstant[T1_TIME]|=(long)
      +                          eeprom_read(tmp_11.p2eepromAddr+0)<<(8*2); t1DelayConstant[T1_TIME]|=(long)eeprom_read(t
      +                          mp_11.p2eepromAddr+1)<<(8*1); t1DelayConstant[T1_TIME]|=(long)eeprom_read(tmp_11.p2eepro
      +                          mAddr+
  4926                           ; Regs used in _a_temporizar: [wreg+status,2+status,0+pclath+cstack]
  4927  088A  01C3               	clrf	_t1DelayConstant^(0+384)
  4928  088B  01C4               	clrf	(_t1DelayConstant+1)^(0+384)
  4929  088C  01C5               	clrf	(_t1DelayConstant+2)^(0+384)
  4930  088D  2191               	call	PL5	;select bank 0
  4931  088E  084D               	movf	_tmp_11+9,w
  4932  088F  2379  120A  158A   	fcall	_eeprom_read
  4933  0892  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0893  00A6               	movwf	??_a_temporizar+2
  4935  0894  01A5               	clrf	??_a_temporizar+1
  4936  0895  01A4               	clrf	??_a_temporizar
  4937  0896  0824               	movf	??_a_temporizar,w
  4938  0897  218E               	call	PL4	;select bank 3
  4939  0898  04C3               	iorwf	_t1DelayConstant^(0+384),f
  4940  0899  2191               	call	PL5	;select bank 0
  4941  089A  0825               	movf	??_a_temporizar+1,w
  4942  089B  218E               	call	PL4	;select bank 3
  4943  089C  04C4               	iorwf	(_t1DelayConstant+1)^(0+384),f
  4944  089D  2191               	call	PL5	;select bank 0
  4945  089E  0826               	movf	??_a_temporizar+2,w
  4946  089F  218E               	call	PL4	;select bank 3
  4947  08A0  04C5               	iorwf	(_t1DelayConstant+2)^(0+384),f
  4948  08A1  2191               	call	PL5	;select bank 0
  4949  08A2  0A4D               	incf	_tmp_11+9,w
  4950  08A3  2379  120A  158A   	fcall	_eeprom_read
  4951  08A6  1303               	bcf	3,6	;RP1=0, select bank0
  4952  08A7  00A4               	movwf	??_a_temporizar
  4953  08A8  01A5               	clrf	??_a_temporizar+1
  4954  08A9  01A6               	clrf	??_a_temporizar+2
  4955  08AA  0825               	movf	??_a_temporizar+1,w
  4956  08AB  00A6               	movwf	??_a_temporizar+2
  4957  08AC  0824               	movf	??_a_temporizar,w
  4958  08AD  00A5               	movwf	??_a_temporizar+1
  4959  08AE  01A4               	clrf	??_a_temporizar
  4960  08AF  0824               	movf	??_a_temporizar,w
  4961  08B0  218E               	call	PL4	;select bank 3
  4962  08B1  04C3               	iorwf	_t1DelayConstant^(0+384),f
  4963  08B2  2191               	call	PL5	;select bank 0
  4964  08B3  0825               	movf	??_a_temporizar+1,w
  4965  08B4  218E               	call	PL4	;select bank 3
  4966  08B5  04C4               	iorwf	(_t1DelayConstant+1)^(0+384),f
  4967  08B6  2191               	call	PL5	;select bank 0
  4968  08B7  0826               	movf	??_a_temporizar+2,w
  4969  08B8  218E               	call	PL4	;select bank 3
  4970  08B9  04C5               	iorwf	(_t1DelayConstant+2)^(0+384),f
  4971  08BA  2191               	call	PL5	;select bank 0
  4972  08BB  084D               	movf	_tmp_11+9,w
  4973  08BC  3E02               	addlw	2
  4974  08BD  2379  120A  158A   	fcall	_eeprom_read
  4975  08C0  1303               	bcf	3,6	;RP1=0, select bank0
  4976  08C1  00A4               	movwf	??_a_temporizar
  4977  08C2  01A5               	clrf	??_a_temporizar+1
  4978  08C3  01A6               	clrf	??_a_temporizar+2
  4979  08C4  218E               	call	PL4	;select bank 3
  4980  08C5  04C3               	iorwf	_t1DelayConstant^(0+384),f
  4981  08C6  2191               	call	PL5	;select bank 0
  4982  08C7  0825               	movf	??_a_temporizar+1,w
  4983  08C8  218E               	call	PL4	;select bank 3
  4984  08C9  04C4               	iorwf	(_t1DelayConstant+1)^(0+384),f
  4985  08CA  2191               	call	PL5	;select bank 0
  4986  08CB  0826               	movf	??_a_temporizar+2,w
  4987  08CC  218E               	call	PL4	;select bank 3
  4988  08CD  04C5               	iorwf	(_t1DelayConstant+2)^(0+384),f
  4989  08CE  2191               	call	PL5	;select bank 0
  4990                           ;fsm_actions.h: 85: if(tmp_11.mem_first)
  4991  08CF  1E45               	btfss	_tmp_11+1,4
  4992  08D0  28EC               	goto	l30005744
  4993                           ;fsm_actions.h: 87: {
  4994                           ;fsm_actions.h: 88: tmp_11.p2eepromAddr+=sizeof(short long);
  4995  08D1  3003               	movlw	3
  4996  08D2  07CD               	addwf	_tmp_11+9,f
  4997                           ;fsm_actions.h: 90: if( tmp_11.p2eepromAddr==
  4998                           ;fsm_actions.h: 91: EEADDR__16_00__TON_OFF+sizeof(short long)*tmp_11.mem_cantMemorias)
  4999  08D3  0846               	movf	_tmp_11+2,w
  5000  08D4  00A0               	movwf	?___wmul
  5001  08D5  01A1               	clrf	?___wmul+1
  5002  08D6  3003               	movlw	3
  5003  08D7  00A2               	movwf	?___wmul+2
  5004  08D8  01A3               	clrf	?___wmul+3
  5005  08D9  213C  120A  158A   	fcall	___wmul
  5006  08DC  1383               	bcf	3,7	;select IRP bank0
  5007  08DD  0820               	movf	?___wmul,w
  5008  08DE  3E10               	addlw	16
  5009  08DF  00A4               	movwf	??_a_temporizar
  5010  08E0  0821               	movf	?___wmul+1,w
  5011  08E1  1803               	skipnc
  5012  08E2  3E01               	addlw	1
  5013  08E3  3E00               	addlw	0
  5014  08E4  00A5               	movwf	??_a_temporizar+1
  5015  08E5  084D               	movf	_tmp_11+9,w
  5016  08E6  0624               	xorwf	??_a_temporizar,w
  5017  08E7  0425               	iorwf	??_a_temporizar+1,w
  5018  08E8  1D03               	skipz
  5019  08E9  291B               	goto	l132
  5020                           ;fsm_actions.h: 92: tmp_11.p2eepromAddr=EEADDR__16_00__TON_OFF;
  5021  08EA  3010               	movlw	16
  5022  08EB  291A               	goto	L14
  5023  08EC                     l30005744:
  5024                           ;fsm_actions.h: 96: else
  5025                           ;fsm_actions.h: 97: {
  5026                           ;fsm_actions.h: 98: if( (tmp_11.p2eepromAddr-EEADDR__16_00__TON_OFF)%
  5027                           ;fsm_actions.h: 99: (2*(char)sizeof(short long)))
  5028  08EC  084D               	movf	_tmp_11+9,w
  5029  08ED  3EF0               	addlw	240
  5030  08EE  00A0               	movwf	?___awmod
  5031  08EF  30FF               	movlw	255
  5032  08F0  1803               	skipnc
  5033  08F1  3000               	movlw	256
  5034  08F2  00A1               	movwf	?___awmod+1
  5035  08F3  3006               	movlw	6
  5036  08F4  00A2               	movwf	?___awmod+2
  5037  08F5  01A3               	clrf	?___awmod+3
  5038  08F6  2155  120A  158A   	fcall	___awmod
  5039  08F9  1383               	bcf	3,7	;select IRP bank0
  5040  08FA  0821               	movf	?___awmod+1,w
  5041  08FB  0420               	iorwf	?___awmod,w
  5042  08FC  1903               	skipnz
  5043  08FD  2901               	goto	l30005746
  5044                           ;fsm_actions.h: 100: tmp_11.p2eepromAddr -= sizeof(short long);
  5045  08FE  3003               	movlw	3
  5046  08FF  02CD               	subwf	_tmp_11+9,f
  5047  0900  2903               	goto	l30005747
  5048  0901                     l30005746:
  5049                           ;fsm_actions.h: 101: else
  5050                           ;fsm_actions.h: 102: tmp_11.p2eepromAddr += 2*sizeof(short long);
  5051  0901  3006               	movlw	6
  5052  0902  07CD               	addwf	_tmp_11+9,f
  5053  0903                     l30005747:
  5054                           ;fsm_actions.h: 104: if( tmp_11.p2eepromAddr==
  5055                           ;fsm_actions.h: 105: EEADDR__16_00__TON_OFF+sizeof(short long)*tmp_11.mem_cantMemorias)
  5056  0903  0846               	movf	_tmp_11+2,w
  5057  0904  00A0               	movwf	?___wmul
  5058  0905  01A1               	clrf	?___wmul+1
  5059  0906  3003               	movlw	3
  5060  0907  00A2               	movwf	?___wmul+2
  5061  0908  01A3               	clrf	?___wmul+3
  5062  0909  213C  120A  158A   	fcall	___wmul
  5063  090C  0820               	movf	?___wmul,w
  5064  090D  3E10               	addlw	16
  5065  090E  00A4               	movwf	??_a_temporizar
  5066  090F  0821               	movf	?___wmul+1,w
  5067  0910  1803               	skipnc
  5068  0911  3E01               	addlw	1
  5069  0912  3E00               	addlw	0
  5070  0913  00A5               	movwf	??_a_temporizar+1
  5071  0914  084D               	movf	_tmp_11+9,w
  5072  0915  0624               	xorwf	??_a_temporizar,w
  5073  0916  0425               	iorwf	??_a_temporizar+1,w
  5074  0917  1D03               	skipz
  5075  0918  291B               	goto	l132
  5076                           ;fsm_actions.h: 106: tmp_11.p2eepromAddr = EEADDR__16_00__TON_OFF+sizeof(short long);
  5077  0919  3013               	movlw	19
  5078  091A                     L14:
  5079  091A  00CD               	movwf	_tmp_11+9
  5080  091B                     l132:
  5081  091B  218E               	call	PL4	;select bank 3
  5082                           ;fsm_actions.h: 109: }
  5083                           ;fsm_actions.h: 111: if(t1DelayConstant[T1_TIME])
  5084  091C  0845               	movf	(_t1DelayConstant+2)^(0+384),w
  5085  091D  0444               	iorwf	(_t1DelayConstant+1)^(0+384),w
  5086  091E  0443               	iorwf	_t1DelayConstant^(0+384),w
  5087  091F  2191               	call	PL5	;select bank 0
  5088                           ;fsm_actions.h: 112: {
  5089                           ;fsm_actions.h: 113: { t1Mem[T1_TIME].flag=0; t1Mem[T1_TIME].prescaler=t1DelayConstant[T
      +                          1_TIME]; t1Mem[T1_TIME].pause=0; };
  5090  0920  1903               	skipnz
  5091  0921  293A               	goto	L15
  5092  0922  10DF               	bcf	_t1Mem+3,1
  5093  0923  218E               	call	PL4	;select bank 3
  5094  0924  0843               	movf	_t1DelayConstant^(0+384),w
  5095  0925  2191               	call	PL5	;select bank 0
  5096  0926  00DC               	movwf	_t1Mem
  5097  0927  218E               	call	PL4	;select bank 3
  5098  0928  0844               	movf	(_t1DelayConstant+1)^(0+384),w
  5099  0929  2191               	call	PL5	;select bank 0
  5100  092A  00DD               	movwf	_t1Mem+1
  5101  092B  218E               	call	PL4	;select bank 3
  5102  092C  0845               	movf	(_t1DelayConstant+2)^(0+384),w
  5103  092D  2191               	call	PL5	;select bank 0
  5104  092E  00DE               	movwf	_t1Mem+2
  5105  092F  115F               	bcf	_t1Mem+3,2
  5106                           ;fsm_actions.h: 115: if(!tmp_11.flag_outForce)
  5107  0930  1A44               	btfsc	_tmp_11,4
  5108  0931  0008               	return
  5109                           ;fsm_actions.h: 117: {
  5110                           ;fsm_actions.h: 118: RB1 = tmp_11.p2eepromAddr%2;
  5111  0932  1C4D               	btfss	_tmp_11+9,0
  5112  0933  2937               	goto	u6750
  5113  0934  2191               	call	PL5	;select bank 0
  5114  0935  1486               	bsf	6,1
  5115  0936  0008               	return
  5116  0937                     u6750:
  5117  0937  2191               	call	PL5	;select bank 0
  5118  0938  1086               	bcf	6,1
  5119  0939  0008               	return
  5120  093A                     L15:	;fsm_actions.h: 123: else
  5121                           ;fsm_actions.h: 124: {
  5122                           ;fsm_actions.h: 125: (t1Mem[T1_TIME].flag=1);
  5123  093A  14DF               	bsf	_t1Mem+3,1
  5124  093B  0008               	return
  5125  093C                     __end_of_a_temporizar:
  5126  093C                     __ptext1235:	; =============== function _eeprom_read ends ============
  5127                           ; *************** function ___wmul *****************
  5128                           ; Defined at:
  5129                           ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\wmul.c"
  5130                           ; Parameters:    Size  Location     Type
  5131                           ;  multiplier      2    0[BANK0 ] unsigned int 
  5132                           ;  multiplicand    2    2[BANK0 ] unsigned int 
  5133                           ; Auto vars:     Size  Location     Type
  5134                           ;  product         2    0[COMMON] unsigned int 
  5135                           ; Return value:  Size  Location     Type
  5136                           ;                  2    0[BANK0 ] unsigned int 
  5137                           ; Registers used:
  5138                           ;		wreg, status,2, status,0
  5139                           ; Tracked objects:
  5140                           ;		On entry : 60/0
  5141                           ;		On exit  : 60/0
  5142                           ;		Unchanged: FFF9F/0
  5143                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5144                           ;      Locals:         2       4       0       0       0
  5145                           ;      Temp:     0
  5146                           ;      Total:    6
  5147                           ; This function calls:
  5148                           ;		Nothing
  5149                           ; This function is called by:
  5150                           ;		_main
  5151                           ;		_a_temporizar
  5152                           ; This function uses a non-reentrant model
  5153                           ; 
  5154  093C                     ___wmul:
  5155                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5156  093C  01F1               	clrf	___wmul@product
  5157  093D  01F2               	clrf	___wmul@product+1
  5158  093E                     l30006054:
  5159  093E  1C20               	btfss	___wmul@multiplier,0
  5160  093F  2946               	goto	l30006056
  5161  0940  0822               	movf	___wmul@multiplicand,w
  5162  0941  07F1               	addwf	___wmul@product,f
  5163  0942  1803               	skipnc
  5164  0943  0AF2               	incf	___wmul@product+1,f
  5165  0944  0823               	movf	___wmul@multiplicand+1,w
  5166  0945  07F2               	addwf	___wmul@product+1,f
  5167  0946                     l30006056:
  5168  0946  1003               	clrc
  5169  0947  0DA2               	rlf	___wmul@multiplicand,f
  5170  0948  0DA3               	rlf	___wmul@multiplicand+1,f
  5171  0949  1003               	clrc
  5172  094A  0CA1               	rrf	___wmul@multiplier+1,f
  5173  094B  0CA0               	rrf	___wmul@multiplier,f
  5174  094C  0821               	movf	___wmul@multiplier+1,w
  5175  094D  0420               	iorwf	___wmul@multiplier,w
  5176  094E  1D03               	skipz
  5177  094F  293E               	goto	l30006054
  5178  0950  0872               	movf	___wmul@product+1,w
  5179  0951  00A1               	movwf	?___wmul+1
  5180  0952  0871               	movf	___wmul@product,w
  5181  0953  00A0               	movwf	?___wmul
  5182  0954  0008               	return
  5183  0955                     __end_of___wmul:
  5184  0955                     __ptext1238:	; =============== function _a_m0_tOnOff_showString ends ============
  5185                           ; *************** function ___awmod *****************
  5186                           ; Defined at:
  5187                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\awmod.c"
  5188                           ; Parameters:    Size  Location     Type
  5189                           ;  dividend        2    0[BANK0 ] int 
  5190                           ;  divisor         2    2[BANK0 ] int 
  5191                           ; Auto vars:     Size  Location     Type
  5192                           ;  sign            1    0[COMMON] unsigned char 
  5193                           ;  counter         1    1[COMMON] unsigned char 
  5194                           ; Return value:  Size  Location     Type
  5195                           ;                  2    0[BANK0 ] int 
  5196                           ; Registers used:
  5197                           ;		wreg, status,2, status,0
  5198                           ; Tracked objects:
  5199                           ;		On entry : 60/0
  5200                           ;		On exit  : 60/0
  5201                           ;		Unchanged: FFF9F/0
  5202                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5203                           ;      Locals:         2       4       0       0       0
  5204                           ;      Temp:     0
  5205                           ;      Total:    6
  5206                           ; This function calls:
  5207                           ;		Nothing
  5208                           ; This function is called by:
  5209                           ;		_a_temporizar
  5210                           ; This function uses a non-reentrant model
  5211                           ; 
  5212  0955                     ___awmod:
  5213                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5214  0955  01F1               	clrf	___awmod@sign
  5215  0956  1FA1               	btfss	___awmod@dividend+1,7
  5216  0957  295F               	goto	l30004801
  5217  0958  09A0               	comf	___awmod@dividend,f
  5218  0959  09A1               	comf	___awmod@dividend+1,f
  5219  095A  0AA0               	incf	___awmod@dividend,f
  5220  095B  1903               	skipnz
  5221  095C  0AA1               	incf	___awmod@dividend+1,f
  5222  095D  01F1               	clrf	___awmod@sign
  5223  095E  0AF1               	incf	___awmod@sign,f
  5224  095F                     l30004801:
  5225  095F  1FA3               	btfss	___awmod@divisor+1,7
  5226  0960  2966               	goto	l30004803
  5227  0961  09A2               	comf	___awmod@divisor,f
  5228  0962  09A3               	comf	___awmod@divisor+1,f
  5229  0963  0AA2               	incf	___awmod@divisor,f
  5230  0964  1903               	skipnz
  5231  0965  0AA3               	incf	___awmod@divisor+1,f
  5232  0966                     l30004803:
  5233  0966  0823               	movf	___awmod@divisor+1,w
  5234  0967  0422               	iorwf	___awmod@divisor,w
  5235  0968  1903               	skipnz
  5236  0969  2985               	goto	l30004811
  5237  096A  01F2               	clrf	___awmod@counter
  5238  096B                     L30:
  5239  096B  0AF2               	incf	___awmod@counter,f
  5240  096C  1BA3               	btfsc	___awmod@divisor+1,7
  5241  096D  2972               	goto	l30004807
  5242  096E  1003               	clrc
  5243  096F  0DA2               	rlf	___awmod@divisor,f
  5244  0970  0DA3               	rlf	___awmod@divisor+1,f
  5245  0971  296B               	goto	L30
  5246  0972                     l30004807:
  5247  0972  0823               	movf	___awmod@divisor+1,w
  5248  0973  0221               	subwf	___awmod@dividend+1,w
  5249  0974  1D03               	skipz
  5250  0975  2978               	goto	u3845
  5251  0976  0822               	movf	___awmod@divisor,w
  5252  0977  0220               	subwf	___awmod@dividend,w
  5253  0978                     u3845:
  5254  0978  1C03               	skipc
  5255  0979  2981               	goto	L31
  5256  097A  0822               	movf	___awmod@divisor,w
  5257  097B  02A0               	subwf	___awmod@dividend,f
  5258  097C  0823               	movf	___awmod@divisor+1,w
  5259  097D  1C03               	skipc
  5260  097E  03A1               	decf	___awmod@dividend+1,f
  5261  097F  02A1               	subwf	___awmod@dividend+1,f
  5262  0980  1003               	clrc
  5263  0981                     L31:
  5264  0981  0CA3               	rrf	___awmod@divisor+1,f
  5265  0982  0CA2               	rrf	___awmod@divisor,f
  5266  0983  0BF2               	decfsz	___awmod@counter,f
  5267  0984  2972               	goto	l30004807
  5268  0985                     l30004811:
  5269  0985  0871               	movf	___awmod@sign,w
  5270  0986  1903               	btfsc	3,2
  5271  0987  0008               	return
  5272  0988  09A0               	comf	___awmod@dividend,f
  5273  0989  09A1               	comf	___awmod@dividend+1,f
  5274  098A  0AA0               	incf	___awmod@dividend,f
  5275  098B  1903               	skipnz
  5276  098C  0AA1               	incf	___awmod@dividend+1,f
  5277  098D  0008               	return
  5278  098E                     __end_of___awmod:
  5279  098E                     PL4:
  5280  098E  1683               	bsf	3,5	;RP0=1, select bank3
  5281  098F  1703               	bsf	3,6	;RP1=1, select bank3
  5282  0990  0008               	return
  5283  0991                     PL5:
  5284  0991  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0992  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0993  0008               	return
  5287  0994                     __ptext1201:	; =============== function _a_m0_tOnOff_save ends ============
  5288                           ; *************** function _a_m0_tOnOff_set *****************
  5289                           ; Defined at:
  5290                           ;		line 712 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  5291                           ; Parameters:    Size  Location     Type
  5292                           ;		None
  5293                           ; Auto vars:     Size  Location     Type
  5294                           ;  p2s             2   21[BANK0 ] PTR const unsigned char 
  5295                           ;		 -> STR_16(3), STR_15(3), STR_14(3), 
  5296                           ;  num             1   23[BANK0 ] unsigned char 
  5297                           ;  titila          1   20[BANK0 ] unsigned char 
  5298                           ; Return value:  Size  Location     Type
  5299                           ;		None               void
  5300                           ; Registers used:
  5301                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5302                           ; Tracked objects:
  5303                           ;		On entry : 60/0
  5304                           ;		On exit  : 60/0
  5305                           ;		Unchanged: FFE9F/0
  5306                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5307                           ;      Locals:         0       7       0       0       0
  5308                           ;      Temp:     3
  5309                           ;      Total:    7
  5310                           ; This function calls:
  5311                           ;		_eeprom_read
  5312                           ;		___atdiv
  5313                           ;		___atmod
  5314                           ;		_d7sm_set_88xx
  5315                           ; This function is called by:
  5316                           ; This function uses a non-reentrant model
  5317                           ; 
  5318  0994                     _a_m0_tOnOff_set:	;fsm_actions.h: 711: void a_m0_tOnOff_set(void)
  5319                           ;fsm_actions.h: 712: {
  5320                           ;fsm_actions.h: 713: char titila;
  5321                           ;fsm_actions.h: 714: unsigned char num;
  5322                           ;fsm_actions.h: 715: const char *p2s;
  5323                           ;fsm_actions.h: 717: { t0Mem[T0_MENU_RETURN].flag=0; t0Mem[T0_MENU_RETURN].prescaler=t0D
      +                          elayConstant[T0_MENU_RETURN]; t0Mem[T0_MENU_RETURN].pause=0; };
  5324                           ; Regs used in _a_m0_tOnOff_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5325  0994  10D5               	bcf	_t0Mem+3,1
  5326  0995  30B1               	movlw	low (_t0DelayConstant+1)
  5327  0996  0084               	movwf	4
  5328  0997  3010               	movlw	high (_t0DelayConstant+1)
  5329  0998  160A  118A  2000   	fcall	stringtab
      +       120A  158A         
  5330  099D  00D4               	movwf	_t0Mem+2
  5331  099E  1155               	bcf	_t0Mem+3,2
  5332                           ;fsm_actions.h: 718: tmp_11.flag_inputSettingLedBlink = 1;
  5333  099F  15C4               	bsf	_tmp_11,3
  5334  09A0  29F9               	goto	l30005614
  5335  09A1                     l237:
  5336                           ;fsm_actions.h: 724: { tmp_11.menuShortLongAuxiliar=0x0000L; tmp_11.menuShortLongAuxilia
      +                          r|=(long)eeprom_read((EEADDR__16_00__TON_OFF + tmp_11.mainMenuState*sizeof(short long))+
      +                          0)<<(8*2); tmp_11.menuShortLongAuxiliar|=(long)eeprom_read((EEADDR__16_00__TON_OFF + tmp
      +                          _11.mai
  5337  09A1  01C9               	clrf	_tmp_11+5
  5338  09A2  01CA               	clrf	_tmp_11+6
  5339  09A3  01CB               	clrf	_tmp_11+7
  5340  09A4  0847               	movf	_tmp_11+3,w
  5341  09A5  0747               	addwf	_tmp_11+3,w
  5342  09A6  0747               	addwf	_tmp_11+3,w
  5343  09A7  3E10               	addlw	16
  5344  09A8  2379  120A  158A   	fcall	_eeprom_read
  5345  09AB  1303               	bcf	3,6	;RP1=0, select bank0
  5346  09AC  00B3               	movwf	??_a_m0_tOnOff_set+2
  5347  09AD  01B2               	clrf	??_a_m0_tOnOff_set+1
  5348  09AE  01B1               	clrf	??_a_m0_tOnOff_set
  5349  09AF  0831               	movf	??_a_m0_tOnOff_set,w
  5350  09B0  04C9               	iorwf	_tmp_11+5,f
  5351  09B1  0832               	movf	??_a_m0_tOnOff_set+1,w
  5352  09B2  04CA               	iorwf	_tmp_11+6,f
  5353  09B3  0833               	movf	??_a_m0_tOnOff_set+2,w
  5354  09B4  04CB               	iorwf	_tmp_11+7,f
  5355  09B5  0847               	movf	_tmp_11+3,w
  5356  09B6  0747               	addwf	_tmp_11+3,w
  5357  09B7  0747               	addwf	_tmp_11+3,w
  5358  09B8  3E11               	addlw	17
  5359  09B9  2379  120A  158A   	fcall	_eeprom_read
  5360  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  5361  09BD  00B1               	movwf	??_a_m0_tOnOff_set
  5362  09BE  01B2               	clrf	??_a_m0_tOnOff_set+1
  5363  09BF  01B3               	clrf	??_a_m0_tOnOff_set+2
  5364  09C0  0832               	movf	??_a_m0_tOnOff_set+1,w
  5365  09C1  00B3               	movwf	??_a_m0_tOnOff_set+2
  5366  09C2  0831               	movf	??_a_m0_tOnOff_set,w
  5367  09C3  00B2               	movwf	??_a_m0_tOnOff_set+1
  5368  09C4  01B1               	clrf	??_a_m0_tOnOff_set
  5369  09C5  0831               	movf	??_a_m0_tOnOff_set,w
  5370  09C6  04C9               	iorwf	_tmp_11+5,f
  5371  09C7  0832               	movf	??_a_m0_tOnOff_set+1,w
  5372  09C8  04CA               	iorwf	_tmp_11+6,f
  5373  09C9  0833               	movf	??_a_m0_tOnOff_set+2,w
  5374  09CA  04CB               	iorwf	_tmp_11+7,f
  5375  09CB  0847               	movf	_tmp_11+3,w
  5376  09CC  0747               	addwf	_tmp_11+3,w
  5377  09CD  0747               	addwf	_tmp_11+3,w
  5378  09CE  3E12               	addlw	18
  5379  09CF  2379  120A  158A   	fcall	_eeprom_read
  5380  09D2  1303               	bcf	3,6	;RP1=0, select bank0
  5381  09D3  00B1               	movwf	??_a_m0_tOnOff_set
  5382  09D4  01B2               	clrf	??_a_m0_tOnOff_set+1
  5383  09D5  01B3               	clrf	??_a_m0_tOnOff_set+2
  5384  09D6  04C9               	iorwf	_tmp_11+5,f
  5385  09D7  0832               	movf	??_a_m0_tOnOff_set+1,w
  5386  09D8  04CA               	iorwf	_tmp_11+6,f
  5387  09D9  0833               	movf	??_a_m0_tOnOff_set+2,w
  5388  09DA  04CB               	iorwf	_tmp_11+7,f
  5389                           ;fsm_actions.h: 731: tmp_11.menuShortLongAuxiliar/=4;
  5390  09DB  3005               	movlw	5
  5391  09DC  3E44               	addlw	_tmp_11& (0+255)
  5392  09DD  0084               	movwf	4
  5393  09DE  1383               	bcf	3,7	;select IRP bank0
  5394  09DF  0800               	movf	0,w
  5395  09E0  00AB               	movwf	?___atdiv
  5396  09E1  0A84               	incf	4,f
  5397  09E2  0800               	movf	0,w
  5398  09E3  00AC               	movwf	?___atdiv+1
  5399  09E4  0A84               	incf	4,f
  5400  09E5  0800               	movf	0,w
  5401  09E6  00AD               	movwf	?___atdiv+2
  5402  09E7  3004               	movlw	4
  5403  09E8  00AE               	movwf	?___atdiv+3
  5404  09E9  01AF               	clrf	?___atdiv+4
  5405  09EA  01B0               	clrf	?___atdiv+5
  5406  09EB  228B  120A  158A   	fcall	___atdiv
  5407  09EE  082B               	movf	?___atdiv,w
  5408  09EF  00C9               	movwf	_tmp_11+5
  5409  09F0  082C               	movf	?___atdiv+1,w
  5410  09F1  00CA               	movwf	_tmp_11+6
  5411  09F2  082D               	movf	?___atdiv+2,w
  5412  09F3  00CB               	movwf	_tmp_11+7
  5413  09F4                     l30005612:
  5414                           ;fsm_actions.h: 733: case S__M0__TON_OFF__SET_MM_1:
  5415                           ;fsm_actions.h: 734: case S__M0__TON_OFF__SET_SS_1:
  5416                           ;fsm_actions.h: 735: titila=0;
  5417  09F4  01B4               	clrf	a_m0_tOnOff_set@titila
  5418  09F5  2A6D               	goto	l30005622
  5419  09F6                     l243:
  5420                           ;fsm_actions.h: 738: case S__M0__TON_OFF__SET_MM_0:
  5421                           ;fsm_actions.h: 739: case S__M0__TON_OFF__SET_SS_0:
  5422                           ;fsm_actions.h: 740: titila=1;
  5423  09F6  01B4               	clrf	a_m0_tOnOff_set@titila
  5424  09F7  0AB4               	incf	a_m0_tOnOff_set@titila,f
  5425  09F8  2A6D               	goto	l30005622
  5426  09F9                     l30005614:
  5427  09F9  0879               	movf	_estadoFsm,w
  5428  09FA  3A0A               	xorlw	10
  5429  09FB  1903               	skipnz
  5430  09FC  29A1               	goto	l237
  5431  09FD  3A01               	xorlw	1
  5432  09FE  1903               	skipnz
  5433  09FF  29F6               	goto	l243
  5434  0A00  3A07               	xorlw	7
  5435  0A01  1903               	skipnz
  5436  0A02  29F4               	goto	l30005612
  5437  0A03  3A01               	xorlw	1
  5438  0A04  1903               	skipnz
  5439  0A05  29F6               	goto	l243
  5440  0A06  3A03               	xorlw	3
  5441  0A07  1903               	skipnz
  5442  0A08  29F4               	goto	l30005612
  5443  0A09  3A01               	xorlw	1
  5444  0A0A  1903               	skipnz
  5445  0A0B  29F6               	goto	l243
  5446  0A0C  3A1F               	xorlw	31
  5447  0A0D  1903               	skipnz
  5448  0A0E  29F4               	goto	l30005612
  5449  0A0F  2A6D               	goto	l30005622
  5450  0A10                     l30005615:
  5451                           ;fsm_actions.h: 747: case S__M0__TON_OFF__SET_SS_1:
  5452                           ;fsm_actions.h: 748: case S__M0__TON_OFF__SET_HH_0:
  5453                           ;fsm_actions.h: 749: num=tmp_11.menuShortLongAuxiliar/3600;
  5454  0A10  3005               	movlw	5
  5455  0A11  3E44               	addlw	_tmp_11& (0+255)
  5456  0A12  0084               	movwf	4
  5457  0A13  1383               	bcf	3,7	;select IRP bank0
  5458  0A14  0800               	movf	0,w
  5459  0A15  00AB               	movwf	?___atdiv
  5460  0A16  0A84               	incf	4,f
  5461  0A17  0800               	movf	0,w
  5462  0A18  00AC               	movwf	?___atdiv+1
  5463  0A19  0A84               	incf	4,f
  5464  0A1A  0800               	movf	0,w
  5465  0A1B  00AD               	movwf	?___atdiv+2
  5466  0A1C  3010               	movlw	16
  5467  0A1D  00AE               	movwf	?___atdiv+3
  5468  0A1E  300E               	movlw	14
  5469  0A1F  00AF               	movwf	?___atdiv+4
  5470  0A20  01B0               	clrf	?___atdiv+5
  5471  0A21  228B  120A  158A   	fcall	___atdiv
  5472  0A24  082B               	movf	?___atdiv,w
  5473  0A25  00B7               	movwf	a_m0_tOnOff_set@num
  5474                           ;fsm_actions.h: 750: p2s=" h";
  5475  0A26  30A9               	movlw	low STR_17
  5476  0A27  00B5               	movwf	a_m0_tOnOff_set@p2s
  5477  0A28  3010               	movlw	high STR_17
  5478  0A29  2A6B               	goto	L2
  5479  0A2A                     l30005617:
  5480                           ;fsm_actions.h: 753: case S__M0__TON_OFF__SET_MM_0:
  5481                           ;fsm_actions.h: 755: num=(tmp_11.menuShortLongAuxiliar%3600)/60;
  5482  0A2A  3005               	movlw	5
  5483  0A2B  3E44               	addlw	_tmp_11& (0+255)
  5484  0A2C  0084               	movwf	4
  5485  0A2D  1383               	bcf	3,7	;select IRP bank0
  5486  0A2E  0800               	movf	0,w
  5487  0A2F  00A0               	movwf	?___atmod
  5488  0A30  0A84               	incf	4,f
  5489  0A31  0800               	movf	0,w
  5490  0A32  00A1               	movwf	?___atmod+1
  5491  0A33  0A84               	incf	4,f
  5492  0A34  0800               	movf	0,w
  5493  0A35  00A2               	movwf	?___atmod+2
  5494  0A36  3010               	movlw	16
  5495  0A37  00A3               	movwf	?___atmod+3
  5496  0A38  300E               	movlw	14
  5497  0A39  00A4               	movwf	?___atmod+4
  5498  0A3A  01A5               	clrf	?___atmod+5
  5499  0A3B  22E8  120A  158A   	fcall	___atmod
  5500  0A3E  1383               	bcf	3,7	;select IRP bank0
  5501  0A3F  0820               	movf	?___atmod,w
  5502  0A40  00AB               	movwf	?___atdiv
  5503  0A41  0821               	movf	?___atmod+1,w
  5504  0A42  00AC               	movwf	?___atdiv+1
  5505  0A43  0822               	movf	?___atmod+2,w
  5506  0A44  00AD               	movwf	?___atdiv+2
  5507  0A45  303C               	movlw	60
  5508  0A46  00AE               	movwf	?___atdiv+3
  5509  0A47  01AF               	clrf	?___atdiv+4
  5510  0A48  01B0               	clrf	?___atdiv+5
  5511  0A49  228B  120A  158A   	fcall	___atdiv
  5512  0A4C  082B               	movf	?___atdiv,w
  5513  0A4D  00B7               	movwf	a_m0_tOnOff_set@num
  5514                           ;fsm_actions.h: 756: p2s=" m";
  5515  0A4E  30A3               	movlw	low STR_18
  5516  0A4F  00B5               	movwf	a_m0_tOnOff_set@p2s
  5517  0A50  3010               	movlw	high STR_18
  5518  0A51  2A6B               	goto	L2
  5519  0A52                     l30005619:
  5520                           ;fsm_actions.h: 759: case S__M0__TON_OFF__SET_SS_0:
  5521                           ;fsm_actions.h: 760: num=tmp_11.menuShortLongAuxiliar%60;
  5522  0A52  3005               	movlw	5
  5523  0A53  3E44               	addlw	_tmp_11& (0+255)
  5524  0A54  0084               	movwf	4
  5525  0A55  1383               	bcf	3,7	;select IRP bank0
  5526  0A56  0800               	movf	0,w
  5527  0A57  00A0               	movwf	?___atmod
  5528  0A58  0A84               	incf	4,f
  5529  0A59  0800               	movf	0,w
  5530  0A5A  00A1               	movwf	?___atmod+1
  5531  0A5B  0A84               	incf	4,f
  5532  0A5C  0800               	movf	0,w
  5533  0A5D  00A2               	movwf	?___atmod+2
  5534  0A5E  303C               	movlw	60
  5535  0A5F  00A3               	movwf	?___atmod+3
  5536  0A60  01A4               	clrf	?___atmod+4
  5537  0A61  01A5               	clrf	?___atmod+5
  5538  0A62  22E8  120A  158A   	fcall	___atmod
  5539  0A65  1383               	bcf	3,7	;select IRP bank0
  5540  0A66  0820               	movf	?___atmod,w
  5541  0A67  00B7               	movwf	a_m0_tOnOff_set@num
  5542                           ;fsm_actions.h: 761: p2s=" s";
  5543  0A68  30A6               	movlw	low STR_19
  5544  0A69  00B5               	movwf	a_m0_tOnOff_set@p2s
  5545  0A6A  3010               	movlw	high STR_19
  5546  0A6B                     L2:
  5547  0A6B  00B6               	movwf	a_m0_tOnOff_set@p2s+1
  5548  0A6C  2A83               	goto	l30005623
  5549  0A6D                     l30005622:
  5550  0A6D  0879               	movf	_estadoFsm,w
  5551  0A6E  3A0A               	xorlw	10
  5552  0A6F  1903               	skipnz
  5553  0A70  2A10               	goto	l30005615
  5554  0A71  3A01               	xorlw	1
  5555  0A72  1903               	skipnz
  5556  0A73  2A10               	goto	l30005615
  5557  0A74  3A07               	xorlw	7
  5558  0A75  1903               	skipnz
  5559  0A76  2A2A               	goto	l30005617
  5560  0A77  3A01               	xorlw	1
  5561  0A78  1903               	skipnz
  5562  0A79  2A2A               	goto	l30005617
  5563  0A7A  3A03               	xorlw	3
  5564  0A7B  1903               	skipnz
  5565  0A7C  2A52               	goto	l30005619
  5566  0A7D  3A01               	xorlw	1
  5567  0A7E  1903               	skipnz
  5568  0A7F  2A52               	goto	l30005619
  5569  0A80  3A1F               	xorlw	31
  5570  0A81  1903               	skipnz
  5571  0A82  2A10               	goto	l30005615
  5572  0A83                     l30005623:
  5573                           ;fsm_actions.h: 765: d7sm_set_88xx(titila,num,p2s);
  5574  0A83  0837               	movf	a_m0_tOnOff_set@num,w
  5575  0A84  00AD               	movwf	?_d7sm_set_88xx
  5576  0A85  0836               	movf	a_m0_tOnOff_set@p2s+1,w
  5577  0A86  00AF               	movwf	?_d7sm_set_88xx+2
  5578  0A87  0835               	movf	a_m0_tOnOff_set@p2s,w
  5579  0A88  00AE               	movwf	?_d7sm_set_88xx+1
  5580  0A89  0834               	movf	a_m0_tOnOff_set@titila,w
  5581  0A8A  2B92               	ljmp	_d7sm_set_88xx
  5582  0A8B                     __end_of_a_m0_tOnOff_set:
  5583  0A8B                     __ptext1240:	; =============== function _eeprom_write ends ============
  5584                           ; *************** function ___atdiv *****************
  5585                           ; Defined at:
  5586                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\atdiv.c"
  5587                           ; Parameters:    Size  Location     Type
  5588                           ;  dividend        3   11[BANK0 ] m
  5589                           ;  divisor         3   14[BANK0 ] m
  5590                           ; Auto vars:     Size  Location     Type
  5591                           ;  quotient        3    8[BANK0 ] m
  5592                           ;  sign            1    7[BANK0 ] unsigned char 
  5593                           ;  counter         1    6[BANK0 ] unsigned char 
  5594                           ; Return value:  Size  Location     Type
  5595                           ;                  3   11[BANK0 ] m
  5596                           ; Registers used:
  5597                           ;		wreg, status,2, status,0
  5598                           ; Tracked objects:
  5599                           ;		On entry : 60/0
  5600                           ;		On exit  : 60/0
  5601                           ;		Unchanged: FFF9F/0
  5602                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5603                           ;      Locals:         0      11       0       0       0
  5604                           ;      Temp:     0
  5605                           ;      Total:   11
  5606                           ; This function calls:
  5607                           ; This function is called by:
  5608                           ;		_a_showTime
  5609                           ;		_a_m0_tOnOff_set
  5610                           ;		_a_m0_tOnOff_inc
  5611                           ; This function uses a non-reentrant model
  5612                           ; 
  5613  0A8B                     ___atdiv:
  5614                           ; Regs used in ___atdiv: [wreg+status,2+status,0]
  5615  0A8B  01A7               	clrf	___atdiv@sign
  5616  0A8C  1FB0               	btfss	___atdiv@divisor+2,7
  5617  0A8D  2A98               	goto	l762
  5618  0A8E  09AE               	comf	___atdiv@divisor,f
  5619  0A8F  09AF               	comf	___atdiv@divisor+1,f
  5620  0A90  09B0               	comf	___atdiv@divisor+2,f
  5621  0A91  0AAE               	incf	___atdiv@divisor,f
  5622  0A92  1903               	skipnz
  5623  0A93  0AAF               	incf	___atdiv@divisor+1,f
  5624  0A94  1903               	skipnz
  5625  0A95  0AB0               	incf	___atdiv@divisor+2,f
  5626  0A96  01A7               	clrf	___atdiv@sign
  5627  0A97  0AA7               	incf	___atdiv@sign,f
  5628  0A98                     l762:
  5629  0A98  1FAD               	btfss	___atdiv@dividend+2,7
  5630  0A99  2AA4               	goto	l30005765
  5631  0A9A  09AB               	comf	___atdiv@dividend,f
  5632  0A9B  09AC               	comf	___atdiv@dividend+1,f
  5633  0A9C  09AD               	comf	___atdiv@dividend+2,f
  5634  0A9D  0AAB               	incf	___atdiv@dividend,f
  5635  0A9E  1903               	skipnz
  5636  0A9F  0AAC               	incf	___atdiv@dividend+1,f
  5637  0AA0  1903               	skipnz
  5638  0AA1  0AAD               	incf	___atdiv@dividend+2,f
  5639  0AA2  3001               	movlw	1
  5640  0AA3  06A7               	xorwf	___atdiv@sign,f
  5641  0AA4                     l30005765:
  5642  0AA4  01A8               	clrf	___atdiv@quotient
  5643  0AA5  01A9               	clrf	___atdiv@quotient+1
  5644  0AA6  01AA               	clrf	___atdiv@quotient+2
  5645  0AA7  0830               	movf	___atdiv@divisor+2,w
  5646  0AA8  042F               	iorwf	___atdiv@divisor+1,w
  5647  0AA9  042E               	iorwf	___atdiv@divisor,w
  5648  0AAA  1903               	skipnz
  5649  0AAB  2AD6               	goto	l30005776
  5650  0AAC  01A6               	clrf	___atdiv@counter
  5651  0AAD                     L32:
  5652  0AAD  0AA6               	incf	___atdiv@counter,f
  5653  0AAE  1003               	clrc
  5654  0AAF  1BB0               	btfsc	___atdiv@divisor+2,7
  5655  0AB0  2AB6               	goto	L34
  5656  0AB1  0DAE               	rlf	___atdiv@divisor,f
  5657  0AB2  0DAF               	rlf	___atdiv@divisor+1,f
  5658  0AB3  0DB0               	rlf	___atdiv@divisor+2,f
  5659  0AB4  2AAD               	goto	L32
  5660  0AB5                     l30005770:
  5661  0AB5  1003               	clrc
  5662  0AB6                     L34:
  5663  0AB6  0DA8               	rlf	___atdiv@quotient,f
  5664  0AB7  0DA9               	rlf	___atdiv@quotient+1,f
  5665  0AB8  0DAA               	rlf	___atdiv@quotient+2,f
  5666  0AB9  0830               	movf	___atdiv@divisor+2,w
  5667  0ABA  022D               	subwf	___atdiv@dividend+2,w
  5668  0ABB  1D03               	skipz
  5669  0ABC  2AC3               	goto	u6845
  5670  0ABD  082F               	movf	___atdiv@divisor+1,w
  5671  0ABE  022C               	subwf	___atdiv@dividend+1,w
  5672  0ABF  1D03               	skipz
  5673  0AC0  2AC3               	goto	u6845
  5674  0AC1  082E               	movf	___atdiv@divisor,w
  5675  0AC2  022B               	subwf	___atdiv@dividend,w
  5676  0AC3                     u6845:
  5677  0AC3  1C03               	skipc
  5678  0AC4  2AD1               	goto	L33
  5679  0AC5  082E               	movf	___atdiv@divisor,w
  5680  0AC6  02AB               	subwf	___atdiv@dividend,f
  5681  0AC7  082F               	movf	___atdiv@divisor+1,w
  5682  0AC8  1C03               	skipc
  5683  0AC9  0F2F               	incfsz	___atdiv@divisor+1,w
  5684  0ACA  02AC               	subwf	___atdiv@dividend+1,f
  5685  0ACB  0830               	movf	___atdiv@divisor+2,w
  5686  0ACC  1C03               	skipc
  5687  0ACD  0A30               	incf	___atdiv@divisor+2,w
  5688  0ACE  02AD               	subwf	___atdiv@dividend+2,f
  5689  0ACF  1428               	bsf	___atdiv@quotient,0
  5690  0AD0  1003               	clrc
  5691  0AD1                     L33:
  5692  0AD1  0CB0               	rrf	___atdiv@divisor+2,f
  5693  0AD2  0CAF               	rrf	___atdiv@divisor+1,f
  5694  0AD3  0CAE               	rrf	___atdiv@divisor,f
  5695  0AD4  0BA6               	decfsz	___atdiv@counter,f
  5696  0AD5  2AB5               	goto	l30005770
  5697  0AD6                     l30005776:
  5698  0AD6  0827               	movf	___atdiv@sign,w
  5699  0AD7  1903               	btfsc	3,2
  5700  0AD8  2AE1               	goto	l30005778
  5701  0AD9  09A8               	comf	___atdiv@quotient,f
  5702  0ADA  09A9               	comf	___atdiv@quotient+1,f
  5703  0ADB  09AA               	comf	___atdiv@quotient+2,f
  5704  0ADC  0AA8               	incf	___atdiv@quotient,f
  5705  0ADD  1903               	skipnz
  5706  0ADE  0AA9               	incf	___atdiv@quotient+1,f
  5707  0ADF  1903               	skipnz
  5708  0AE0  0AAA               	incf	___atdiv@quotient+2,f
  5709  0AE1                     l30005778:
  5710  0AE1  0828               	movf	___atdiv@quotient,w
  5711  0AE2  00AB               	movwf	?___atdiv
  5712  0AE3  0829               	movf	___atdiv@quotient+1,w
  5713  0AE4  00AC               	movwf	?___atdiv+1
  5714  0AE5  082A               	movf	___atdiv@quotient+2,w
  5715  0AE6  00AD               	movwf	?___atdiv+2
  5716  0AE7  0008               	return
  5717  0AE8                     __end_of___atdiv:
  5718  0AE8                     __ptext1243:	; =============== function _d7sm_set_88xx ends ============
  5719                           ; *************** function ___atmod *****************
  5720                           ; Defined at:
  5721                           ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\atmod.c"
  5722                           ; Parameters:    Size  Location     Type
  5723                           ;  dividend        3    0[BANK0 ] m
  5724                           ;  divisor         3    3[BANK0 ] m
  5725                           ; Auto vars:     Size  Location     Type
  5726                           ;  sign            1    0[COMMON] unsigned char 
  5727                           ;  counter         1    1[COMMON] unsigned char 
  5728                           ; Return value:  Size  Location     Type
  5729                           ;                  3    0[BANK0 ] m
  5730                           ; Registers used:
  5731                           ;		wreg, status,2, status,0
  5732                           ; Tracked objects:
  5733                           ;		On entry : 160/0
  5734                           ;		On exit  : 60/0
  5735                           ;		Unchanged: FFE9F/0
  5736                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5737                           ;      Locals:         2       6       0       0       0
  5738                           ;      Temp:     0
  5739                           ;      Total:    8
  5740                           ; This function calls:
  5741                           ; This function is called by:
  5742                           ;		_a_showTime
  5743                           ;		_a_m0_tOnOff_set
  5744                           ;		_a_m0_tOnOff_inc
  5745                           ; This function uses a non-reentrant model
  5746                           ; 
  5747  0AE8                     ___atmod:
  5748                           ; Regs used in ___atmod: [wreg+status,2+status,0]
  5749  0AE8  01F1               	clrf	___atmod@sign
  5750  0AE9  1FA2               	btfss	___atmod@dividend+2,7
  5751  0AEA  2AF5               	goto	l774
  5752  0AEB  09A0               	comf	___atmod@dividend,f
  5753  0AEC  09A1               	comf	___atmod@dividend+1,f
  5754  0AED  09A2               	comf	___atmod@dividend+2,f
  5755  0AEE  0AA0               	incf	___atmod@dividend,f
  5756  0AEF  1903               	skipnz
  5757  0AF0  0AA1               	incf	___atmod@dividend+1,f
  5758  0AF1  1903               	skipnz
  5759  0AF2  0AA2               	incf	___atmod@dividend+2,f
  5760  0AF3  01F1               	clrf	___atmod@sign
  5761  0AF4  0AF1               	incf	___atmod@sign,f
  5762  0AF5                     l774:
  5763  0AF5  1FA5               	btfss	___atmod@divisor+2,7
  5764  0AF6  2AFF               	goto	l30005596
  5765  0AF7  09A3               	comf	___atmod@divisor,f
  5766  0AF8  09A4               	comf	___atmod@divisor+1,f
  5767  0AF9  09A5               	comf	___atmod@divisor+2,f
  5768  0AFA  0AA3               	incf	___atmod@divisor,f
  5769  0AFB  1903               	skipnz
  5770  0AFC  0AA4               	incf	___atmod@divisor+1,f
  5771  0AFD  1903               	skipnz
  5772  0AFE  0AA5               	incf	___atmod@divisor+2,f
  5773  0AFF                     l30005596:
  5774  0AFF  0825               	movf	___atmod@divisor+2,w
  5775  0B00  0424               	iorwf	___atmod@divisor+1,w
  5776  0B01  0423               	iorwf	___atmod@divisor,w
  5777  0B02  1903               	skipnz
  5778  0B03  2B29               	goto	l30005604
  5779  0B04  01F2               	clrf	___atmod@counter
  5780  0B05                     L37:
  5781  0B05  0AF2               	incf	___atmod@counter,f
  5782  0B06  1BA5               	btfsc	___atmod@divisor+2,7
  5783  0B07  2B0D               	goto	l30005600
  5784  0B08  1003               	clrc
  5785  0B09  0DA3               	rlf	___atmod@divisor,f
  5786  0B0A  0DA4               	rlf	___atmod@divisor+1,f
  5787  0B0B  0DA5               	rlf	___atmod@divisor+2,f
  5788  0B0C  2B05               	goto	L37
  5789  0B0D                     l30005600:
  5790  0B0D  0825               	movf	___atmod@divisor+2,w
  5791  0B0E  0222               	subwf	___atmod@dividend+2,w
  5792  0B0F  1D03               	skipz
  5793  0B10  2B17               	goto	u6435
  5794  0B11  0824               	movf	___atmod@divisor+1,w
  5795  0B12  0221               	subwf	___atmod@dividend+1,w
  5796  0B13  1D03               	skipz
  5797  0B14  2B17               	goto	u6435
  5798  0B15  0823               	movf	___atmod@divisor,w
  5799  0B16  0220               	subwf	___atmod@dividend,w
  5800  0B17                     u6435:
  5801  0B17  1C03               	skipc
  5802  0B18  2B24               	goto	L38
  5803  0B19  0823               	movf	___atmod@divisor,w
  5804  0B1A  02A0               	subwf	___atmod@dividend,f
  5805  0B1B  0824               	movf	___atmod@divisor+1,w
  5806  0B1C  1C03               	skipc
  5807  0B1D  0F24               	incfsz	___atmod@divisor+1,w
  5808  0B1E  02A1               	subwf	___atmod@dividend+1,f
  5809  0B1F  0825               	movf	___atmod@divisor+2,w
  5810  0B20  1C03               	skipc
  5811  0B21  0A25               	incf	___atmod@divisor+2,w
  5812  0B22  02A2               	subwf	___atmod@dividend+2,f
  5813  0B23  1003               	clrc
  5814  0B24                     L38:
  5815  0B24  0CA5               	rrf	___atmod@divisor+2,f
  5816  0B25  0CA4               	rrf	___atmod@divisor+1,f
  5817  0B26  0CA3               	rrf	___atmod@divisor,f
  5818  0B27  0BF2               	decfsz	___atmod@counter,f
  5819  0B28  2B0D               	goto	l30005600
  5820  0B29                     l30005604:
  5821  0B29  0871               	movf	___atmod@sign,w
  5822  0B2A  1903               	btfsc	3,2
  5823  0B2B  0008               	return
  5824  0B2C  09A0               	comf	___atmod@dividend,f
  5825  0B2D  09A1               	comf	___atmod@dividend+1,f
  5826  0B2E  09A2               	comf	___atmod@dividend+2,f
  5827  0B2F  0AA0               	incf	___atmod@dividend,f
  5828  0B30  1903               	skipnz
  5829  0B31  0AA1               	incf	___atmod@dividend+1,f
  5830  0B32  1903               	skipnz
  5831  0B33  0AA2               	incf	___atmod@dividend+2,f
  5832  0B34  0008               	return
  5833  0B35                     __end_of___atmod:
  5834  0B35                     __ptext1227:	; =============== function _a_showHyphensOff ends ============
  5835                           ; *************** function _a_initializeDevice *****************
  5836                           ; Defined at:
  5837                           ;		line 56 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_actions.h"
  5838                           ; Parameters:    Size  Location     Type
  5839                           ;		None
  5840                           ; Auto vars:     Size  Location     Type
  5841                           ;		None
  5842                           ; Return value:  Size  Location     Type
  5843                           ;		None               void
  5844                           ; Registers used:
  5845                           ;		wreg, status,2, status,0, pclath, cstack
  5846                           ; Tracked objects:
  5847                           ;		On entry : 60/0
  5848                           ;		On exit  : 60/0
  5849                           ;		Unchanged: FFE00/0
  5850                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5851                           ;      Locals:         1       0       0       0       0
  5852                           ;      Temp:     1
  5853                           ;      Total:    1
  5854                           ; This function calls:
  5855                           ;		_eeprom_read
  5856                           ; This function is called by:
  5857                           ; This function uses a non-reentrant model
  5858                           ; 
  5859  0B35                     _a_initializeDevice:	;fsm_actions.h: 55: void a_initializeDevice(void)
  5860                           ;fsm_actions.h: 56: {
  5861                           ;fsm_actions.h: 57: tmp_11.flag_locked=RB6;
  5862                           ; Regs used in _a_initializeDevice: [wreg+status,2+status,0+pclath+cstack]
  5863  0B35  3000               	movlw	0
  5864  0B36  1B06               	btfsc	6,6
  5865  0B37  3001               	movlw	1
  5866  0B38  00F3               	movwf	??_a_initializeDevice
  5867  0B39  0DF3               	rlf	??_a_initializeDevice,f
  5868  0B3A  0DF3               	rlf	??_a_initializeDevice,f
  5869  0B3B  0844               	movf	_tmp_11,w
  5870  0B3C  0673               	xorwf	??_a_initializeDevice,w
  5871  0B3D  39FB               	andlw	-5
  5872  0B3E  0673               	xorwf	??_a_initializeDevice,w
  5873  0B3F  00C4               	movwf	_tmp_11
  5874                           ;fsm_actions.h: 58: RB5=!tmp_11.flag_locked;
  5875  0B40  1944               	btfsc	_tmp_11,2
  5876  0B41  2B46               	goto	u6660
  5877  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  5878  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  5879  0B44  1686               	bsf	6,5
  5880  0B45  2B49               	goto	l30005731
  5881  0B46                     u6660:
  5882  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  5883  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  5884  0B48  1286               	bcf	6,5
  5885  0B49                     l30005731:
  5886                           ;fsm_actions.h: 61: { tmp_11.mem_input=eeprom_read(EEADDR__00_00__INPUT); };
  5887  0B49  3000               	movlw	0
  5888  0B4A  2379  120A  158A   	fcall	_eeprom_read
  5889  0B4D  00F3               	movwf	??_a_initializeDevice
  5890  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  5891  0B4F  0645               	xorwf	_tmp_11+1,w
  5892  0B50  39F8               	andlw	-8
  5893  0B51  0673               	xorwf	??_a_initializeDevice,w
  5894  0B52  00C5               	movwf	_tmp_11+1
  5895                           ;fsm_actions.h: 62: { tmp_11.mem_visor_parpadeo=eeprom_read(EEADDR__01_00__VISOR_PARPADE
      +                          O); };
  5896  0B53  3001               	movlw	1
  5897  0B54  2379  120A  158A   	fcall	_eeprom_read
  5898  0B57  00F3               	movwf	??_a_initializeDevice
  5899  0B58  0DF3               	rlf	??_a_initializeDevice,f
  5900  0B59  0DF3               	rlf	??_a_initializeDevice,f
  5901  0B5A  0DF3               	rlf	??_a_initializeDevice,f
  5902  0B5B  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0B5C  0845               	movf	_tmp_11+1,w
  5904  0B5D  0673               	xorwf	??_a_initializeDevice,w
  5905  0B5E  39F7               	andlw	-9
  5906  0B5F  0673               	xorwf	??_a_initializeDevice,w
  5907  0B60  00C5               	movwf	_tmp_11+1
  5908                           ;fsm_actions.h: 63: { tmp_11.mem_cantMemorias=eeprom_read(EEADDR__02_00__NMEM); };
  5909  0B61  3002               	movlw	2
  5910  0B62  2379  120A  158A   	fcall	_eeprom_read
  5911  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  5912  0B66  00C6               	movwf	_tmp_11+2
  5913                           ;fsm_actions.h: 64: { tmp_11.mem_first=eeprom_read(EEADDR__04_00__FIRST); };
  5914  0B67  3004               	movlw	4
  5915  0B68  2379  120A  158A   	fcall	_eeprom_read
  5916  0B6B  00F3               	movwf	??_a_initializeDevice
  5917  0B6C  0EF3               	swapf	??_a_initializeDevice,f
  5918  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  5919  0B6E  0845               	movf	_tmp_11+1,w
  5920  0B6F  0673               	xorwf	??_a_initializeDevice,w
  5921  0B70  39EF               	andlw	-17
  5922  0B71  0673               	xorwf	??_a_initializeDevice,w
  5923  0B72  00C5               	movwf	_tmp_11+1
  5924                           ;fsm_actions.h: 66: if(!tmp_11.mem_first) tmp_11.p2eepromAddr += sizeof(short long);
  5925  0B73  1A45               	btfsc	_tmp_11+1,4
  5926  0B74  2B77               	goto	l30005737
  5927  0B75  3003               	movlw	3
  5928  0B76  07CD               	addwf	_tmp_11+9,f
  5929  0B77                     l30005737:
  5930                           ;fsm_actions.h: 69: (t1Mem[T1_TIME].flag=1);
  5931  0B77  14DF               	bsf	_t1Mem+3,1
  5932  0B78  0008               	return
  5933  0B79                     __end_of_a_initializeDevice:
  5934  0B79                     __ptext1234:	; =============== function _driver_ledSet ends ============
  5935                           ; *************** function _eeprom_read *****************
  5936                           ; Defined at:
  5937                           ;		line 8 in file "eeread.c"
  5938                           ; Parameters:    Size  Location     Type
  5939                           ;  addr            1    wreg     unsigned char 
  5940                           ; Auto vars:     Size  Location     Type
  5941                           ;  addr            1    0[BANK0 ] unsigned char 
  5942                           ; Return value:  Size  Location     Type
  5943                           ;                  1    wreg      unsigned char 
  5944                           ; Registers used:
  5945                           ;		wreg, status,2, status,0
  5946                           ; Tracked objects:
  5947                           ;		On entry : 60/0
  5948                           ;		On exit  : 60/40
  5949                           ;		Unchanged: FFF9F/0
  5950                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5951                           ;      Locals:         2       1       0       0       0
  5952                           ;      Temp:     2
  5953                           ;      Total:    3
  5954                           ; This function calls:
  5955                           ;		Nothing
  5956                           ; This function is called by:
  5957                           ;		_a_initializeDevice
  5958                           ;		_a_temporizar
  5959                           ;		_a_m0_tOnOff_set
  5960                           ; This function uses a non-reentrant model
  5961                           ; 
  5962  0B79                     _eeprom_read:
  5963                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5964                           ;eeprom_read@addr stored from wreg
  5965  0B79  00A0               	movwf	eeprom_read@addr
  5966  0B7A                     l462:
  5967  0B7A  1683               	bsf	3,5	;RP0=1, select bank3
  5968  0B7B  1703               	bsf	3,6	;RP1=1, select bank3
  5969  0B7C  188C               	btfsc	12,1
  5970  0B7D  2B7A               	goto	l462
  5971  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  5972  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  5973  0B80  0820               	movf	eeprom_read@addr,w
  5974  0B81  1703               	bsf	3,6	;RP1=1, select bank2
  5975  0B82  008D               	movwf	13	;volatile
  5976  0B83  303F               	movlw	63
  5977  0B84  1683               	bsf	3,5	;RP0=1, select bank3
  5978  0B85  058C               	andwf	12,f	;volatile
  5979  0B86  140C               	bsf	12,0
  5980  0B87  1003               	clrc
  5981  0B88  180C               	btfsc	12,0
  5982  0B89  1403               	setc
  5983  0B8A  3000               	movlw	0
  5984  0B8B  1803               	skipnc
  5985  0B8C  3001               	movlw	1
  5986  0B8D  00F1               	movwf	??_eeprom_read
  5987  0B8E  01F2               	clrf	??_eeprom_read+1
  5988  0B8F  1283               	bcf	3,5	;RP0=0, select bank2
  5989  0B90  080C               	movf	12,w	;volatile
  5990  0B91  0008               	return
  5991  0B92                     __end_of_eeprom_read:
  5992  0B92                     __ptext1242:	; =============== function ___lbdiv ends ============
  5993                           ; *************** function _d7sm_set_88xx *****************
  5994                           ; Defined at:
  5995                           ;		line 213 in file "F:\fgr\16gb\libSwPic\libSwPic\disp7segMux\20220922\d7sm.c"
  5996                           ; Parameters:    Size  Location     Type
  5997                           ;  nTitila         1    wreg     unsigned char 
  5998                           ;  number          1   13[BANK0 ] unsigned char 
  5999                           ;  unitText        2   14[BANK0 ] PTR const unsigned char 
  6000                           ;		 -> STR_17(3), STR_18(3), STR_19(3), STR_16(3), 
  6001                           ;		 -> STR_15(3), STR_14(3), 
  6002                           ; Auto vars:     Size  Location     Type
  6003                           ;  nTitila         1    8[BANK0 ] unsigned char 
  6004                           ;  n               1   12[BANK0 ] unsigned char 
  6005                           ;  i               1   11[BANK0 ] unsigned char 
  6006                           ;  s               1   10[BANK0 ] PTR unsigned char 
  6007                           ;		 -> d7sm_buffer(8), 
  6008                           ;  str             1    9[BANK0 ] PTR unsigned char 
  6009                           ;		 -> d7sm_buffer(8), 
  6010                           ; Return value:  Size  Location     Type
  6011                           ;		None               void
  6012                           ; Registers used:
  6013                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6014                           ; Tracked objects:
  6015                           ;		On entry : 40/0
  6016                           ;		On exit  : 60/0
  6017                           ;		Unchanged: FFE9F/0
  6018                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6019                           ;      Locals:         2       8       0       0       0
  6020                           ;      Temp:     2
  6021                           ;      Total:   10
  6022                           ; This function calls:
  6023                           ;		___lbmod
  6024                           ;		___awdiv
  6025                           ; This function is called by:
  6026                           ;		_a_m0_tOnOff_set
  6027                           ;		_a_m0_tOnOff_inc
  6028                           ; This function uses a non-reentrant model
  6029                           ; 
  6030  0B92                     _d7sm_set_88xx:	;d7sm.c: 211: void d7sm_set_88xx(char nTitila, unsigned char number,
  6031                           ;d7sm.c: 212: const char* unitText)
  6032                           ;d7sm.c: 213: {
  6033                           ; Regs used in _d7sm_set_88xx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6034                           ;d7sm_set_88xx@nTitila stored from wreg
  6035  0B92  1283               	bcf	3,5	;RP0=0, select bank0
  6036  0B93  00A8               	movwf	d7sm_set_88xx@nTitila
  6037                           ;d7sm.c: 214: char i, *str=&d7sm_buffer[0];
  6038  0B94  30BB               	movlw	_d7sm_buffer& (0+255)
  6039  0B95  00A9               	movwf	d7sm_set_88xx@str
  6040                           ;d7sm.c: 216: { t0Mem[T0_D7SM_SCROLL].prescaler=0; t0Mem[T0_D7SM_SCROLL].pause=1; t0Mem[
      +                          T0_D7SM_SCROLL].loop=0; };
  6041  0B96  01DA               	clrf	_t0Mem+8
  6042  0B97  155B               	bsf	_t0Mem+9,2
  6043  0B98  105B               	bcf	_t0Mem+9,0
  6044                           ;d7sm.c: 217: disp.strOffs=4;
  6045  0B99  3004               	movlw	4
  6046  0B9A  00C0               	movwf	_disp+2
  6047                           ;d7sm.c: 218: disp.strLen=4;
  6048  0B9B  00C1               	movwf	_disp+3
  6049                           ;d7sm.c: 222: { char i,n=number,*s=str; s+=2-1; for(i=0;i<2;i++) { *(s--)='0'+(n%10); n/
      +                          =10; } };
  6050  0B9C  082D               	movf	d7sm_set_88xx@number,w
  6051  0B9D  00AC               	movwf	d7sm_set_88xx@n
  6052  0B9E  0829               	movf	d7sm_set_88xx@str,w
  6053  0B9F  00AA               	movwf	d7sm_set_88xx@s
  6054  0BA0  0AAA               	incf	d7sm_set_88xx@s,f
  6055  0BA1  01AB               	clrf	d7sm_set_88xx@i_2805
  6056  0BA2                     l30005708:
  6057  0BA2  082A               	movf	d7sm_set_88xx@s,w
  6058  0BA3  0084               	movwf	4
  6059  0BA4  300A               	movlw	10
  6060  0BA5  00A3               	movwf	?___lbmod
  6061  0BA6  082C               	movf	d7sm_set_88xx@n,w
  6062  0BA7  120A  118A  279D   	fcall	___lbmod
  6063  0BAA  3E30               	addlw	48
  6064  0BAB  1783               	bsf	3,7	;select IRP bank2
  6065  0BAC  0080               	movwf	0
  6066  0BAD  03AA               	decf	d7sm_set_88xx@s,f
  6067  0BAE  082C               	movf	d7sm_set_88xx@n,w
  6068  0BAF  00A4               	movwf	?___awdiv
  6069  0BB0  01A5               	clrf	?___awdiv+1
  6070  0BB1  300A               	movlw	10
  6071  0BB2  00A6               	movwf	?___awdiv+2
  6072  0BB3  01A7               	clrf	?___awdiv+3
  6073  0BB4  120A  118A  2422   	fcall	___awdiv
      +       120A  158A         
  6074  0BB9  1383               	bcf	3,7	;select IRP bank0
  6075  0BBA  0824               	movf	?___awdiv,w
  6076  0BBB  00AC               	movwf	d7sm_set_88xx@n
  6077  0BBC  0AAB               	incf	d7sm_set_88xx@i_2805,f
  6078  0BBD  3002               	movlw	2
  6079  0BBE  022B               	subwf	d7sm_set_88xx@i_2805,w
  6080  0BBF  1C03               	skipc
  6081  0BC0  2BA2               	goto	l30005708
  6082                           ;d7sm.c: 224: d7sm_buffer[2]=unitText[0];
  6083  0BC1  082E               	movf	d7sm_set_88xx@unitText,w
  6084  0BC2  0084               	movwf	4
  6085  0BC3  082F               	movf	d7sm_set_88xx@unitText+1,w
  6086  0BC4  160A  118A  2000   	fcall	stringtab
  6087  0BC7  1683               	bsf	3,5	;RP0=1, select bank3
  6088  0BC8  1703               	bsf	3,6	;RP1=1, select bank3
  6089  0BC9  00BD               	movwf	(_d7sm_buffer^(0+384)+2)
  6090                           ;d7sm.c: 225: d7sm_buffer[3]=unitText[1];
  6091  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0BCC  082F               	movf	d7sm_set_88xx@unitText+1,w
  6094  0BCD  00F3               	movwf	??_d7sm_set_88xx+1
  6095  0BCE  082E               	movf	d7sm_set_88xx@unitText,w
  6096  0BCF  00F2               	movwf	??_d7sm_set_88xx
  6097  0BD0  3E01               	addlw	1
  6098  0BD1  0084               	movwf	4
  6099  0BD2  0873               	movf	??_d7sm_set_88xx+1,w
  6100  0BD3  1803               	skipnc
  6101  0BD4  0A73               	incf	??_d7sm_set_88xx+1,w
  6102  0BD5  160A  118A  2000   	fcall	stringtab
      +       120A  158A         
  6103  0BDA  1683               	bsf	3,5	;RP0=1, select bank3
  6104  0BDB  1703               	bsf	3,6	;RP1=1, select bank3
  6105  0BDC  00BE               	movwf	(_d7sm_buffer^(0+384)+3)
  6106                           ;d7sm.c: 226: disp.str=d7sm_buffer;
  6107  0BDD  30BB               	movlw	_d7sm_buffer& (0+255)
  6108  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  6109  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  6110  0BE0  00BE               	movwf	_disp
  6111  0BE1  3081               	movlw	129
  6112  0BE2  00BF               	movwf	_disp+1
  6113  0BE3  2BEE               	goto	l30005716
  6114  0BE4                     l391:
  6115                           ;d7sm.c: 231: disp.d0_titila=0;
  6116  0BE4  1043               	bcf	_disp+5,0
  6117                           ;d7sm.c: 232: disp.d1_titila=0;
  6118  0BE5  10C3               	bcf	_disp+5,1
  6119                           ;d7sm.c: 233: disp.d2_titila=1;
  6120  0BE6  1543               	bsf	_disp+5,2
  6121                           ;d7sm.c: 234: disp.d3_titila=0;
  6122  0BE7  11C3               	bcf	_disp+5,3
  6123  0BE8  0008               	return
  6124  0BE9                     l392:
  6125                           ;d7sm.c: 237: disp.d0_titila=0;
  6126  0BE9  1043               	bcf	_disp+5,0
  6127                           ;d7sm.c: 238: disp.d1_titila=0;
  6128  0BEA  10C3               	bcf	_disp+5,1
  6129                           ;d7sm.c: 239: disp.d2_titila=0;
  6130  0BEB  1143               	bcf	_disp+5,2
  6131                           ;d7sm.c: 240: disp.d3_titila=1;
  6132  0BEC  15C3               	bsf	_disp+5,3
  6133  0BED  0008               	return
  6134  0BEE                     l30005716:
  6135  0BEE  0828               	movf	d7sm_set_88xx@nTitila,w
  6136  0BEF  3A00               	xorlw	0
  6137  0BF0  1903               	skipnz
  6138  0BF1  2BE4               	goto	l391
  6139  0BF2  3A01               	xorlw	1
  6140  0BF3  1D03               	btfss	3,2
  6141  0BF4  0008               	return
  6142  0BF5  2BE9               	goto	l392
  6143  0BF6                     __end_of_d7sm_set_88xx:
  6144                           
  6145                           	psect	text1231
  6146  135F                     __ptext1231:	; =============== function _a_temporizar ends ============
  6147                           ; *************** function _systemInit *****************
  6148                           ; Defined at:
  6149                           ;		line 20 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\system.c"
  6150                           ; Parameters:    Size  Location     Type
  6151                           ;		None
  6152                           ; Auto vars:     Size  Location     Type
  6153                           ;		None
  6154                           ; Return value:  Size  Location     Type
  6155                           ;		None               void
  6156                           ; Registers used:
  6157                           ;		wreg, status,2
  6158                           ; Tracked objects:
  6159                           ;		On entry : 17F/0
  6160                           ;		On exit  : 17F/0
  6161                           ;		Unchanged: FFE80/0
  6162                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6163                           ;      Locals:         0       0       0       0       0
  6164                           ;      Temp:     0
  6165                           ;      Total:    0
  6166                           ; This function calls:
  6167                           ;		Nothing
  6168                           ; This function is called by:
  6169                           ;		_main
  6170                           ; This function uses a non-reentrant model
  6171                           ; 
  6172  135F                     _systemInit:	;system.c: 19: void systemInit(void)
  6173                           ;system.c: 20: {
  6174                           ;system.c: 21: { IRCF0=1; IRCF1=1; IRCF2=1; };
  6175                           ; Regs used in _systemInit: [wreg+status,2]
  6176  135F  1683               	bsf	3,5	;RP0=1, select bank1
  6177  1360  160F               	bsf	15,4
  6178  1361  168F               	bsf	15,5
  6179  1362  170F               	bsf	15,6
  6180                           ;system.c: 23: CCP1M0=0;
  6181  1363  1283               	bcf	3,5	;RP0=0, select bank0
  6182  1364  1017               	bcf	23,0
  6183                           ;system.c: 24: CCP1M1=0;
  6184  1365  1097               	bcf	23,1
  6185                           ;system.c: 25: CCP1M2=0;
  6186  1366  1117               	bcf	23,2
  6187                           ;system.c: 26: CCP1M3=0;
  6188  1367  1197               	bcf	23,3
  6189                           ;system.c: 28: CCP2M0=0;
  6190  1368  101D               	bcf	29,0
  6191                           ;system.c: 29: CCP2M1=0;
  6192  1369  109D               	bcf	29,1
  6193                           ;system.c: 30: CCP2M2=0;
  6194  136A  111D               	bcf	29,2
  6195                           ;system.c: 31: CCP2M3=0;
  6196  136B  119D               	bcf	29,3
  6197                           ;system.c: 35: { TMR1CS=0; T1SYNC=1; T1OSCEN=0; T1CKPS0=1; T1CKPS1=1; TMR1ON=1; { TMR1L=
      +                          ((unsigned char)((3036UL>>(8*0))&0xFF)); TMR1H=((unsigned char)((3036UL>>(8*1))&0xFF)); 
      +                          }; };
  6198  136C  1090               	bcf	16,1
  6199  136D  1510               	bsf	16,2
  6200  136E  1190               	bcf	16,3
  6201  136F  1610               	bsf	16,4
  6202  1370  1690               	bsf	16,5
  6203  1371  1410               	bsf	16,0
  6204  1372  30DC               	movlw	220
  6205  1373  008E               	movwf	14	;volatile
  6206  1374  300B               	movlw	11
  6207  1375  008F               	movwf	15	;volatile
  6208                           ;system.c: 36: { PSA=0; T0CS=0; PS0=1; PS1=1; PS2=1; { TMR0=248UL; }; };
  6209  1376  1683               	bsf	3,5	;RP0=1, select bank1
  6210  1377  1181               	bcf	1,3
  6211  1378  1281               	bcf	1,5
  6212  1379  1401               	bsf	1,0
  6213  137A  1481               	bsf	1,1
  6214  137B  1501               	bsf	1,2
  6215  137C  30F8               	movlw	248
  6216  137D  1283               	bcf	3,5	;RP0=0, select bank0
  6217  137E  0081               	movwf	1	;volatile
  6218                           ;system.c: 38: { ANS0=0; ANS1=0; ANS2=0; ANS3=0; ANS4=0; };
  6219  137F  1683               	bsf	3,5	;RP0=1, select bank3
  6220  1380  1703               	bsf	3,6	;RP1=1, select bank3
  6221  1381  1008               	bcf	8,0
  6222  1382  1088               	bcf	8,1
  6223  1383  1108               	bcf	8,2
  6224  1384  1188               	bcf	8,3
  6225  1385  1208               	bcf	8,4
  6226                           ;system.c: 40: RBPU=0;
  6227  1386  1303               	bcf	3,6	;RP1=0, select bank1
  6228  1387  1381               	bcf	1,7
  6229                           ;system.c: 41: WPUB6=0;
  6230  1388  1315               	bcf	21,6
  6231                           ;system.c: 43: ANSEL=0;
  6232  1389  1703               	bsf	3,6	;RP1=1, select bank3
  6233  138A  0188               	clrf	8
  6234                           ;system.c: 44: ANSELH=0;
  6235  138B  0189               	clrf	9
  6236                           ;system.c: 46: { TRISB1=0; TRISB5=0; TRISB4=0; TRISB3=0; TRISA3=0; TRISA1=0; TRISC1=0; T
      +                          RISA4=0; TRISC0=0; TRISC7=0; TRISA5=0; TRISA7=0; TRISC3=0; TRISA6=0; TRISC4=0; TRISC6=0;
      +                           TRISC5=0; TRISC2=0; TRISA0=1; TRISA2=1; TRISE3=1; };
  6237  138C  1303               	bcf	3,6	;RP1=0, select bank1
  6238  138D  1086               	bcf	6,1
  6239  138E  1286               	bcf	6,5
  6240  138F  1206               	bcf	6,4
  6241  1390  1186               	bcf	6,3
  6242  1391  1185               	bcf	5,3
  6243  1392  1085               	bcf	5,1
  6244  1393  1087               	bcf	7,1
  6245  1394  1205               	bcf	5,4
  6246  1395  1007               	bcf	7,0
  6247  1396  1387               	bcf	7,7
  6248  1397  1285               	bcf	5,5
  6249  1398  1385               	bcf	5,7
  6250  1399  1187               	bcf	7,3
  6251  139A  1305               	bcf	5,6
  6252  139B  1207               	bcf	7,4
  6253  139C  1307               	bcf	7,6
  6254  139D  1287               	bcf	7,5
  6255  139E  1107               	bcf	7,2
  6256  139F  1405               	bsf	5,0
  6257  13A0  1505               	bsf	5,2
  6258  13A1  1589               	bsf	9,3
  6259                           ;system.c: 47: { PORTA=0XFF; PORTB=0XFF; PORTC=0XFF; PORTE=0XFF; RB1=0; RB5=0; RB4=1; RB
      +                          3=0; RA3=0; RA1=0; RC1=0; RA4=0; RC0=0; RC7=0; }
  6260  13A2  30FF               	movlw	255
  6261  13A3  1283               	bcf	3,5	;RP0=0, select bank0
  6262  13A4  0085               	movwf	5	;volatile
  6263  13A5  0086               	movwf	6	;volatile
  6264  13A6  0087               	movwf	7	;volatile
  6265  13A7  0089               	movwf	9	;volatile
  6266  13A8  1086               	bcf	6,1
  6267  13A9  1286               	bcf	6,5
  6268  13AA  1606               	bsf	6,4
  6269  13AB  1186               	bcf	6,3
  6270  13AC  1185               	bcf	5,3
  6271  13AD  1085               	bcf	5,1
  6272  13AE  1087               	bcf	7,1
  6273  13AF  1205               	bcf	5,4
  6274  13B0  1007               	bcf	7,0
  6275  13B1  1387               	bcf	7,7
  6276                           ;system.c: 49: {TMR1IE=1;};
  6277  13B2  1683               	bsf	3,5	;RP0=1, select bank1
  6278  13B3  140C               	bsf	12,0
  6279                           ;system.c: 50: {T0IE=1;};
  6280  13B4  1283               	bcf	3,5	;RP0=0, select bank0
  6281  13B5  168B               	bsf	11,5
  6282                           ;system.c: 52: {PEIE=1;};
  6283  13B6  170B               	bsf	11,6
  6284                           ;system.c: 53: {GIE=1;};
  6285  13B7  178B               	bsf	11,7
  6286  13B8  0008               	return
  6287  13B9                     __end_of_systemInit:
  6288                           
  6289                           	psect	text1232
  6290  0BF6                     __ptext1232:	; =============== function _systemInit ends ============
  6291                           ; *************** function _fsmGetEvent *****************
  6292                           ; Defined at:
  6293                           ;		line 22 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\fsm_events.h"
  6294                           ; Parameters:    Size  Location     Type
  6295                           ;		None
  6296                           ; Auto vars:     Size  Location     Type
  6297                           ;  event           1   76[BANK1 ] unsigned char 
  6298                           ; Return value:  Size  Location     Type
  6299                           ;                  1    wreg      unsigned char 
  6300                           ; Registers used:
  6301                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  6302                           ; Tracked objects:
  6303                           ;		On entry : 60/60
  6304                           ;		On exit  : 60/20
  6305                           ;		Unchanged: FFF9F/0
  6306                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6307                           ;      Locals:         2       0      77       0       0
  6308                           ;      Temp:     2
  6309                           ;      Total:   79
  6310                           ; This function calls:
  6311                           ;		Nothing
  6312                           ; This function is called by:
  6313                           ;		_main
  6314                           ; This function uses a non-reentrant model
  6315                           ; 
  6316  0BF6                     _fsmGetEvent:	;fsm_events.h: 21: char fsmGetEvent(void)
  6317                           ;fsm_events.h: 22: {
  6318                           ;fsm_events.h: 23: char event=EV_TABLE_END;
  6319                           ; Regs used in _fsmGetEvent: [wreg-fsr0h+status,2+status,0]
  6320  0BF6  300F               	movlw	15
  6321  0BF7  1303               	bcf	3,6	;RP1=0, select bank1
  6322  0BF8  00EC               	movwf	fsmGetEvent@event^(0+128)
  6323  0BF9  2FC9               	goto	l30006050
  6324  0BFA                     l30005798:
  6325                           ;fsm_events.h: 33: if((t0Mem[T0_TESTDISPLAY].flag?!(t0Mem[T0_TESTDISPLAY].flag=0):0)) ev
      +                          ent = EV_TESTDISPLAY_TIMEOUT;
  6326  0BFA  01D4               	clrf	_fsmGetEvent$1681^(0+128)
  6327  0BFB  01D5               	clrf	(_fsmGetEvent$1681+1)^(0+128)
  6328  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  6329  0BFD  1CD3               	btfss	_t0Mem+1,1
  6330  0BFE  2C0A               	goto	l30005801
  6331  0BFF  0853               	movf	_t0Mem+1,w
  6332  0C00  39FD               	andlw	-3
  6333  0C01  00D3               	movwf	_t0Mem+1
  6334  0C02  0C53               	rrf	_t0Mem+1,w
  6335  0C03  3901               	andlw	1
  6336  0C04  3000               	movlw	0
  6337  0C05  1903               	skipnz
  6338  0C06  3001               	movlw	1
  6339  0C07  1683               	bsf	3,5	;RP0=1, select bank1
  6340  0C08  00D4               	movwf	_fsmGetEvent$1681^(0+128)
  6341  0C09  01D5               	clrf	(_fsmGetEvent$1681+1)^(0+128)
  6342  0C0A                     l30005801:
  6343  0C0A  1683               	bsf	3,5	;RP0=1, select bank1
  6344  0C0B  0855               	movf	(_fsmGetEvent$1681+1)^(0+128),w
  6345  0C0C  0454               	iorwf	_fsmGetEvent$1681^(0+128),w
  6346  0C0D  1903               	skipnz
  6347  0C0E  2FFD               	goto	l30006051
  6348  0C0F  01EC               	clrf	fsmGetEvent@event^(0+128)
  6349  0C10  2FFD               	goto	l30006051
  6350  0C11                     l30005803:
  6351                           ;fsm_events.h: 37: if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer.kId=
      +                          =IN1_FORCE?!(kPinBuffer.flag=0):0)) event = EV_IN_FN;
  6352  0C11  01D2               	clrf	_fsmGetEvent$1682^(0+128)
  6353  0C12  01D3               	clrf	(_fsmGetEvent$1682+1)^(0+128)
  6354  0C13  1AFA               	btfsc	_kPinBuffer,5
  6355  0C14  1B7A               	btfsc	_kPinBuffer,6
  6356  0C15  2C27               	goto	l30005808
  6357  0C16  087A               	movf	_kPinBuffer,w
  6358  0C17  391F               	andlw	31
  6359  0C18  3A03               	xorlw	3
  6360  0C19  1D03               	skipz
  6361  0C1A  2C27               	goto	l30005808
  6362  0C1B  087A               	movf	_kPinBuffer,w
  6363  0C1C  39DF               	andlw	-33
  6364  0C1D  00FA               	movwf	_kPinBuffer
  6365  0C1E  0E7A               	swapf	_kPinBuffer,w
  6366  0C1F  00F1               	movwf	??_fsmGetEvent
  6367  0C20  0C71               	rrf	??_fsmGetEvent,w
  6368  0C21  3901               	andlw	1
  6369  0C22  3000               	movlw	0
  6370  0C23  1903               	skipnz
  6371  0C24  3001               	movlw	1
  6372  0C25  00D2               	movwf	_fsmGetEvent$1682^(0+128)
  6373  0C26  01D3               	clrf	(_fsmGetEvent$1682+1)^(0+128)
  6374  0C27                     l30005808:
  6375  0C27  0853               	movf	(_fsmGetEvent$1682+1)^(0+128),w
  6376  0C28  0452               	iorwf	_fsmGetEvent$1682^(0+128),w
  6377  0C29  1903               	skipnz
  6378  0C2A  2C2D               	goto	l30005810
  6379  0C2B  300C               	movlw	12
  6380  0C2C  2F4B               	goto	L27
  6381  0C2D                     l30005810:
  6382                           ;fsm_events.h: 38: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_P && kPinBuffer
      +                          .kId==IN1_FORCE?!(kPinBuffer.flag=0):0)) event = EV_IN_FP;
  6383  0C2D  01D8               	clrf	_fsmGetEvent$1683^(0+128)
  6384  0C2E  01D9               	clrf	(_fsmGetEvent$1683+1)^(0+128)
  6385  0C2F  1AFA               	btfsc	_kPinBuffer,5
  6386  0C30  1F7A               	btfss	_kPinBuffer,6
  6387  0C31  2C43               	goto	l30005815
  6388  0C32  087A               	movf	_kPinBuffer,w
  6389  0C33  391F               	andlw	31
  6390  0C34  3A03               	xorlw	3
  6391  0C35  1D03               	skipz
  6392  0C36  2C43               	goto	l30005815
  6393  0C37  087A               	movf	_kPinBuffer,w
  6394  0C38  39DF               	andlw	-33
  6395  0C39  00FA               	movwf	_kPinBuffer
  6396  0C3A  0E7A               	swapf	_kPinBuffer,w
  6397  0C3B  00F1               	movwf	??_fsmGetEvent
  6398  0C3C  0C71               	rrf	??_fsmGetEvent,w
  6399  0C3D  3901               	andlw	1
  6400  0C3E  3000               	movlw	0
  6401  0C3F  1903               	skipnz
  6402  0C40  3001               	movlw	1
  6403  0C41  00D8               	movwf	_fsmGetEvent$1683^(0+128)
  6404  0C42  01D9               	clrf	(_fsmGetEvent$1683+1)^(0+128)
  6405  0C43                     l30005815:
  6406  0C43  0859               	movf	(_fsmGetEvent$1683+1)^(0+128),w
  6407  0C44  0458               	iorwf	_fsmGetEvent$1683^(0+128),w
  6408  0C45  1903               	skipnz
  6409  0C46  2C49               	goto	l30005817
  6410  0C47  300B               	movlw	11
  6411  0C48  2F4B               	goto	L27
  6412  0C49                     l30005817:
  6413                           ;fsm_events.h: 39: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0))
  6414  0C49  01D6               	clrf	_fsmGetEvent$1684^(0+128)
  6415  0C4A  01D7               	clrf	(_fsmGetEvent$1684+1)^(0+128)
  6416  0C4B  1AFA               	btfsc	_kPinBuffer,5
  6417  0C4C  1B7A               	btfsc	_kPinBuffer,6
  6418  0C4D  2C5E               	goto	l30005822
  6419  0C4E  087A               	movf	_kPinBuffer,w
  6420  0C4F  391F               	andlw	31
  6421  0C50  1D03               	skipz
  6422  0C51  2C5E               	goto	l30005822
  6423  0C52  087A               	movf	_kPinBuffer,w
  6424  0C53  39DF               	andlw	-33
  6425  0C54  00FA               	movwf	_kPinBuffer
  6426  0C55  0E7A               	swapf	_kPinBuffer,w
  6427  0C56  00F1               	movwf	??_fsmGetEvent
  6428  0C57  0C71               	rrf	??_fsmGetEvent,w
  6429  0C58  3901               	andlw	1
  6430  0C59  3000               	movlw	0
  6431  0C5A  1903               	skipnz
  6432  0C5B  3001               	movlw	1
  6433  0C5C  00D6               	movwf	_fsmGetEvent$1684^(0+128)
  6434  0C5D  01D7               	clrf	(_fsmGetEvent$1684+1)^(0+128)
  6435  0C5E                     l30005822:
  6436  0C5E  0857               	movf	(_fsmGetEvent$1684+1)^(0+128),w
  6437  0C5F  0456               	iorwf	_fsmGetEvent$1684^(0+128),w
  6438  0C60  1903               	skipnz
  6439  0C61  2C69               	goto	l30005826
  6440                           ;fsm_events.h: 40: {
  6441                           ;fsm_events.h: 41: if(tmp_11.flag_locked) event = EV_KM_FN_LOCKED;
  6442  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  6443  0C63  1D44               	btfss	_tmp_11,2
  6444  0C64  2C67               	goto	l30005825
  6445  0C65  3004               	movlw	4
  6446  0C66  2F4A               	goto	L29
  6447  0C67                     l30005825:
  6448                           ;fsm_events.h: 42: else event = EV_KM;
  6449  0C67  3003               	movlw	3
  6450  0C68  2F4A               	goto	L29
  6451  0C69                     l30005826:
  6452                           ;fsm_events.h: 44: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_P && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0))
  6453  0C69  01D0               	clrf	_fsmGetEvent$1685^(0+128)
  6454  0C6A  01D1               	clrf	(_fsmGetEvent$1685+1)^(0+128)
  6455  0C6B  1AFA               	btfsc	_kPinBuffer,5
  6456  0C6C  1F7A               	btfss	_kPinBuffer,6
  6457  0C6D  2C7E               	goto	l30005831
  6458  0C6E  087A               	movf	_kPinBuffer,w
  6459  0C6F  391F               	andlw	31
  6460  0C70  1D03               	skipz
  6461  0C71  2C7E               	goto	l30005831
  6462  0C72  087A               	movf	_kPinBuffer,w
  6463  0C73  39DF               	andlw	-33
  6464  0C74  00FA               	movwf	_kPinBuffer
  6465  0C75  0E7A               	swapf	_kPinBuffer,w
  6466  0C76  00F1               	movwf	??_fsmGetEvent
  6467  0C77  0C71               	rrf	??_fsmGetEvent,w
  6468  0C78  3901               	andlw	1
  6469  0C79  3000               	movlw	0
  6470  0C7A  1903               	skipnz
  6471  0C7B  3001               	movlw	1
  6472  0C7C  00D0               	movwf	_fsmGetEvent$1685^(0+128)
  6473  0C7D  01D1               	clrf	(_fsmGetEvent$1685+1)^(0+128)
  6474  0C7E                     l30005831:
  6475  0C7E  0851               	movf	(_fsmGetEvent$1685+1)^(0+128),w
  6476  0C7F  0450               	iorwf	_fsmGetEvent$1685^(0+128),w
  6477  0C80  1903               	skipnz
  6478  0C81  2C87               	goto	l30005834
  6479                           ;fsm_events.h: 45: {
  6480                           ;fsm_events.h: 46: if(tmp_11.flag_locked) event = EV_KM_FP_LOCKED;
  6481  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  6482  0C83  1D44               	btfss	_tmp_11,2
  6483  0C84  2FFD               	goto	l30006051
  6484  0C85  3005               	movlw	5
  6485  0C86  2F4A               	goto	L29
  6486  0C87                     l30005834:
  6487                           ;fsm_events.h: 48: else if((t1Mem[T1_TIME].flag?!(t1Mem[T1_TIME].flag=0):0)) event = EV_
      +                          T1_TIME_TIMEOUT;
  6488  0C87  01CA               	clrf	_fsmGetEvent$1690^(0+128)
  6489  0C88  01CB               	clrf	(_fsmGetEvent$1690+1)^(0+128)
  6490  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  6491  0C8A  1CDF               	btfss	_t1Mem+3,1
  6492  0C8B  2C97               	goto	l30005837
  6493  0C8C  085F               	movf	_t1Mem+3,w
  6494  0C8D  39FD               	andlw	-3
  6495  0C8E  00DF               	movwf	_t1Mem+3
  6496  0C8F  0C5F               	rrf	_t1Mem+3,w
  6497  0C90  3901               	andlw	1
  6498  0C91  3000               	movlw	0
  6499  0C92  1903               	skipnz
  6500  0C93  3001               	movlw	1
  6501  0C94  1683               	bsf	3,5	;RP0=1, select bank1
  6502  0C95  00CA               	movwf	_fsmGetEvent$1690^(0+128)
  6503  0C96  01CB               	clrf	(_fsmGetEvent$1690+1)^(0+128)
  6504  0C97                     l30005837:
  6505  0C97  1683               	bsf	3,5	;RP0=1, select bank1
  6506  0C98  084B               	movf	(_fsmGetEvent$1690+1)^(0+128),w
  6507  0C99  044A               	iorwf	_fsmGetEvent$1690^(0+128),w
  6508  0C9A  1903               	skipnz
  6509  0C9B  2C9F               	goto	l30005839
  6510  0C9C  01EC               	clrf	fsmGetEvent@event^(0+128)
  6511  0C9D  0AEC               	incf	fsmGetEvent@event^(0+128),f
  6512  0C9E  2FFD               	goto	l30006051
  6513  0C9F                     l30005839:
  6514                           ;fsm_events.h: 49: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT_FN;
  6515  0C9F  01C8               	clrf	_fsmGetEvent$1691^(0+128)
  6516  0CA0  01C9               	clrf	(_fsmGetEvent$1691+1)^(0+128)
  6517  0CA1  1AFA               	btfsc	_kPinBuffer,5
  6518  0CA2  1B7A               	btfsc	_kPinBuffer,6
  6519  0CA3  2CB5               	goto	l30005844
  6520  0CA4  087A               	movf	_kPinBuffer,w
  6521  0CA5  391F               	andlw	31
  6522  0CA6  3A02               	xorlw	2
  6523  0CA7  1D03               	skipz
  6524  0CA8  2CB5               	goto	l30005844
  6525  0CA9  087A               	movf	_kPinBuffer,w
  6526  0CAA  39DF               	andlw	-33
  6527  0CAB  00FA               	movwf	_kPinBuffer
  6528  0CAC  0E7A               	swapf	_kPinBuffer,w
  6529  0CAD  00F1               	movwf	??_fsmGetEvent
  6530  0CAE  0C71               	rrf	??_fsmGetEvent,w
  6531  0CAF  3901               	andlw	1
  6532  0CB0  3000               	movlw	0
  6533  0CB1  1903               	skipnz
  6534  0CB2  3001               	movlw	1
  6535  0CB3  00C8               	movwf	_fsmGetEvent$1691^(0+128)
  6536  0CB4  01C9               	clrf	(_fsmGetEvent$1691+1)^(0+128)
  6537  0CB5                     l30005844:
  6538  0CB5  0849               	movf	(_fsmGetEvent$1691+1)^(0+128),w
  6539  0CB6  0448               	iorwf	_fsmGetEvent$1691^(0+128),w
  6540  0CB7  1903               	skipnz
  6541  0CB8  2CBB               	goto	l30005846
  6542  0CB9  300A               	movlw	10
  6543  0CBA  2F4B               	goto	L27
  6544  0CBB                     l30005846:
  6545                           ;fsm_events.h: 50: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_P && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT_FP;
  6546  0CBB  01CE               	clrf	_fsmGetEvent$1692^(0+128)
  6547  0CBC  01CF               	clrf	(_fsmGetEvent$1692+1)^(0+128)
  6548  0CBD  1AFA               	btfsc	_kPinBuffer,5
  6549  0CBE  1F7A               	btfss	_kPinBuffer,6
  6550  0CBF  2CD1               	goto	l30005851
  6551  0CC0  087A               	movf	_kPinBuffer,w
  6552  0CC1  391F               	andlw	31
  6553  0CC2  3A02               	xorlw	2
  6554  0CC3  1D03               	skipz
  6555  0CC4  2CD1               	goto	l30005851
  6556  0CC5  087A               	movf	_kPinBuffer,w
  6557  0CC6  39DF               	andlw	-33
  6558  0CC7  00FA               	movwf	_kPinBuffer
  6559  0CC8  0E7A               	swapf	_kPinBuffer,w
  6560  0CC9  00F1               	movwf	??_fsmGetEvent
  6561  0CCA  0C71               	rrf	??_fsmGetEvent,w
  6562  0CCB  3901               	andlw	1
  6563  0CCC  3000               	movlw	0
  6564  0CCD  1903               	skipnz
  6565  0CCE  3001               	movlw	1
  6566  0CCF  00CE               	movwf	_fsmGetEvent$1692^(0+128)
  6567  0CD0  01CF               	clrf	(_fsmGetEvent$1692+1)^(0+128)
  6568  0CD1                     l30005851:
  6569  0CD1  084F               	movf	(_fsmGetEvent$1692+1)^(0+128),w
  6570  0CD2  044E               	iorwf	_fsmGetEvent$1692^(0+128),w
  6571  0CD3  1903               	skipnz
  6572  0CD4  2CD7               	goto	l30005853
  6573  0CD5  3009               	movlw	9
  6574  0CD6  2F4B               	goto	L27
  6575  0CD7                     l30005853:
  6576                           ;fsm_events.h: 51: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==IN2_RST?!(kPinBuffer.flag=0):0)) event = EV_IN2_FN;
  6577  0CD7  01CC               	clrf	_fsmGetEvent$1693^(0+128)
  6578  0CD8  01CD               	clrf	(_fsmGetEvent$1693+1)^(0+128)
  6579  0CD9  1AFA               	btfsc	_kPinBuffer,5
  6580  0CDA  1B7A               	btfsc	_kPinBuffer,6
  6581  0CDB  2CED               	goto	l30005858
  6582  0CDC  087A               	movf	_kPinBuffer,w
  6583  0CDD  391F               	andlw	31
  6584  0CDE  3A04               	xorlw	4
  6585  0CDF  1D03               	skipz
  6586  0CE0  2CED               	goto	l30005858
  6587  0CE1  087A               	movf	_kPinBuffer,w
  6588  0CE2  39DF               	andlw	-33
  6589  0CE3  00FA               	movwf	_kPinBuffer
  6590  0CE4  0E7A               	swapf	_kPinBuffer,w
  6591  0CE5  00F1               	movwf	??_fsmGetEvent
  6592  0CE6  0C71               	rrf	??_fsmGetEvent,w
  6593  0CE7  3901               	andlw	1
  6594  0CE8  3000               	movlw	0
  6595  0CE9  1903               	skipnz
  6596  0CEA  3001               	movlw	1
  6597  0CEB  00CC               	movwf	_fsmGetEvent$1693^(0+128)
  6598  0CEC  01CD               	clrf	(_fsmGetEvent$1693+1)^(0+128)
  6599  0CED                     l30005858:
  6600  0CED  084D               	movf	(_fsmGetEvent$1693+1)^(0+128),w
  6601  0CEE  044C               	iorwf	_fsmGetEvent$1693^(0+128),w
  6602  0CEF  1903               	skipnz
  6603  0CF0  2FFD               	goto	l30006051
  6604  0CF1  300E               	movlw	14
  6605  0CF2  2F4B               	goto	L27
  6606  0CF3                     l30005860:
  6607                           ;fsm_events.h: 55: if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_P && kPinBuffer.kId=
      +                          =IN2_RST?!(kPinBuffer.flag=0):0)) event = EV_IN2_FP;
  6608  0CF3  01E6               	clrf	_fsmGetEvent$1694^(0+128)
  6609  0CF4  01E7               	clrf	(_fsmGetEvent$1694+1)^(0+128)
  6610  0CF5  1AFA               	btfsc	_kPinBuffer,5
  6611  0CF6  1F7A               	btfss	_kPinBuffer,6
  6612  0CF7  2D09               	goto	l30005865
  6613  0CF8  087A               	movf	_kPinBuffer,w
  6614  0CF9  391F               	andlw	31
  6615  0CFA  3A04               	xorlw	4
  6616  0CFB  1D03               	skipz
  6617  0CFC  2D09               	goto	l30005865
  6618  0CFD  087A               	movf	_kPinBuffer,w
  6619  0CFE  39DF               	andlw	-33
  6620  0CFF  00FA               	movwf	_kPinBuffer
  6621  0D00  0E7A               	swapf	_kPinBuffer,w
  6622  0D01  00F1               	movwf	??_fsmGetEvent
  6623  0D02  0C71               	rrf	??_fsmGetEvent,w
  6624  0D03  3901               	andlw	1
  6625  0D04  3000               	movlw	0
  6626  0D05  1903               	skipnz
  6627  0D06  3001               	movlw	1
  6628  0D07  00E6               	movwf	_fsmGetEvent$1694^(0+128)
  6629  0D08  01E7               	clrf	(_fsmGetEvent$1694+1)^(0+128)
  6630  0D09                     l30005865:
  6631  0D09  0867               	movf	(_fsmGetEvent$1694+1)^(0+128),w
  6632  0D0A  0466               	iorwf	_fsmGetEvent$1694^(0+128),w
  6633  0D0B  1903               	skipnz
  6634  0D0C  2FFD               	goto	l30006051
  6635  0D0D  300D               	movlw	13
  6636  0D0E  2F4B               	goto	L27
  6637  0D0F                     l30005867:
  6638                           ;fsm_events.h: 59: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  6639  0D0F  01E4               	clrf	_fsmGetEvent$1695^(0+128)
  6640  0D10  01E5               	clrf	(_fsmGetEvent$1695+1)^(0+128)
  6641  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  6642  0D12  1CD5               	btfss	_t0Mem+3,1
  6643  0D13  2D1F               	goto	l30005870
  6644  0D14  0855               	movf	_t0Mem+3,w
  6645  0D15  39FD               	andlw	-3
  6646  0D16  00D5               	movwf	_t0Mem+3
  6647  0D17  0C55               	rrf	_t0Mem+3,w
  6648  0D18  3901               	andlw	1
  6649  0D19  3000               	movlw	0
  6650  0D1A  1903               	skipnz
  6651  0D1B  3001               	movlw	1
  6652  0D1C  1683               	bsf	3,5	;RP0=1, select bank1
  6653  0D1D  00E4               	movwf	_fsmGetEvent$1695^(0+128)
  6654  0D1E  01E5               	clrf	(_fsmGetEvent$1695+1)^(0+128)
  6655  0D1F                     l30005870:
  6656  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
  6657  0D20  0865               	movf	(_fsmGetEvent$1695+1)^(0+128),w
  6658  0D21  0464               	iorwf	_fsmGetEvent$1695^(0+128),w
  6659  0D22  1903               	skipnz
  6660  0D23  2D26               	goto	l30005872
  6661  0D24                     l30005871:
  6662  0D24  3002               	movlw	2
  6663  0D25  2F4B               	goto	L27
  6664  0D26                     l30005872:
  6665                           ;fsm_events.h: 60: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  6666  0D26  01EA               	clrf	_fsmGetEvent$1696^(0+128)
  6667  0D27  01EB               	clrf	(_fsmGetEvent$1696+1)^(0+128)
  6668  0D28  1AFA               	btfsc	_kPinBuffer,5
  6669  0D29  1B7A               	btfsc	_kPinBuffer,6
  6670  0D2A  2D3B               	goto	l30005877
  6671  0D2B  087A               	movf	_kPinBuffer,w
  6672  0D2C  391F               	andlw	31
  6673  0D2D  1D03               	skipz
  6674  0D2E  2D3B               	goto	l30005877
  6675  0D2F  087A               	movf	_kPinBuffer,w
  6676  0D30  39DF               	andlw	-33
  6677  0D31  00FA               	movwf	_kPinBuffer
  6678  0D32  0E7A               	swapf	_kPinBuffer,w
  6679  0D33  00F1               	movwf	??_fsmGetEvent
  6680  0D34  0C71               	rrf	??_fsmGetEvent,w
  6681  0D35  3901               	andlw	1
  6682  0D36  3000               	movlw	0
  6683  0D37  1903               	skipnz
  6684  0D38  3001               	movlw	1
  6685  0D39  00EA               	movwf	_fsmGetEvent$1696^(0+128)
  6686  0D3A  01EB               	clrf	(_fsmGetEvent$1696+1)^(0+128)
  6687  0D3B                     l30005877:
  6688  0D3B  086B               	movf	(_fsmGetEvent$1696+1)^(0+128),w
  6689  0D3C  046A               	iorwf	_fsmGetEvent$1696^(0+128),w
  6690  0D3D  1D03               	btfss	3,2
  6691  0D3E  2C67               	goto	l30005825
  6692                           ;fsm_events.h: 61: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  6693  0D3F  01E8               	clrf	_fsmGetEvent$1697^(0+128)
  6694  0D40  01E9               	clrf	(_fsmGetEvent$1697+1)^(0+128)
  6695  0D41  1AFA               	btfsc	_kPinBuffer,5
  6696  0D42  1B7A               	btfsc	_kPinBuffer,6
  6697  0D43  2D55               	goto	l30005884
  6698  0D44  087A               	movf	_kPinBuffer,w
  6699  0D45  391F               	andlw	31
  6700  0D46  3A02               	xorlw	2
  6701  0D47  1D03               	skipz
  6702  0D48  2D55               	goto	l30005884
  6703  0D49  087A               	movf	_kPinBuffer,w
  6704  0D4A  39DF               	andlw	-33
  6705  0D4B  00FA               	movwf	_kPinBuffer
  6706  0D4C  0E7A               	swapf	_kPinBuffer,w
  6707  0D4D  00F1               	movwf	??_fsmGetEvent
  6708  0D4E  0C71               	rrf	??_fsmGetEvent,w
  6709  0D4F  3901               	andlw	1
  6710  0D50  3000               	movlw	0
  6711  0D51  1903               	skipnz
  6712  0D52  3001               	movlw	1
  6713  0D53  00E8               	movwf	_fsmGetEvent$1697^(0+128)
  6714  0D54  01E9               	clrf	(_fsmGetEvent$1697+1)^(0+128)
  6715  0D55                     l30005884:
  6716  0D55  0869               	movf	(_fsmGetEvent$1697+1)^(0+128),w
  6717  0D56  0468               	iorwf	_fsmGetEvent$1697^(0+128),w
  6718  0D57                     L28:
  6719  0D57  1903               	skipnz
  6720  0D58  2FFD               	goto	l30006051
  6721  0D59                     l30005885:
  6722  0D59  3008               	movlw	8
  6723  0D5A  2F4B               	goto	L27
  6724  0D5B                     l30005886:
  6725                           ;fsm_events.h: 65: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  6726  0D5B  01E2               	clrf	_fsmGetEvent$1698^(0+128)
  6727  0D5C  01E3               	clrf	(_fsmGetEvent$1698+1)^(0+128)
  6728  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  6729  0D5E  1CD5               	btfss	_t0Mem+3,1
  6730  0D5F  2D6B               	goto	l30005889
  6731  0D60  0855               	movf	_t0Mem+3,w
  6732  0D61  39FD               	andlw	-3
  6733  0D62  00D5               	movwf	_t0Mem+3
  6734  0D63  0C55               	rrf	_t0Mem+3,w
  6735  0D64  3901               	andlw	1
  6736  0D65  3000               	movlw	0
  6737  0D66  1903               	skipnz
  6738  0D67  3001               	movlw	1
  6739  0D68  1683               	bsf	3,5	;RP0=1, select bank1
  6740  0D69  00E2               	movwf	_fsmGetEvent$1698^(0+128)
  6741  0D6A  01E3               	clrf	(_fsmGetEvent$1698+1)^(0+128)
  6742  0D6B                     l30005889:
  6743  0D6B  1683               	bsf	3,5	;RP0=1, select bank1
  6744  0D6C  0863               	movf	(_fsmGetEvent$1698+1)^(0+128),w
  6745  0D6D  0462               	iorwf	_fsmGetEvent$1698^(0+128),w
  6746  0D6E  1D03               	btfss	3,2
  6747  0D6F  2D24               	goto	l30005871
  6748                           ;fsm_events.h: 66: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P1_SET?!(kPinBuffer.flag=0):0)) event = EV_K_SET;
  6749  0D70  01DC               	clrf	_fsmGetEvent$1699^(0+128)
  6750  0D71  01DD               	clrf	(_fsmGetEvent$1699+1)^(0+128)
  6751  0D72  1AFA               	btfsc	_kPinBuffer,5
  6752  0D73  1B7A               	btfsc	_kPinBuffer,6
  6753  0D74  2D86               	goto	l30005896
  6754  0D75  087A               	movf	_kPinBuffer,w
  6755  0D76  391F               	andlw	31
  6756  0D77  3A01               	xorlw	1
  6757  0D78  1D03               	skipz
  6758  0D79  2D86               	goto	l30005896
  6759  0D7A  087A               	movf	_kPinBuffer,w
  6760  0D7B  39DF               	andlw	-33
  6761  0D7C  00FA               	movwf	_kPinBuffer
  6762  0D7D  0E7A               	swapf	_kPinBuffer,w
  6763  0D7E  00F1               	movwf	??_fsmGetEvent
  6764  0D7F  0C71               	rrf	??_fsmGetEvent,w
  6765  0D80  3901               	andlw	1
  6766  0D81  3000               	movlw	0
  6767  0D82  1903               	skipnz
  6768  0D83  3001               	movlw	1
  6769  0D84  00DC               	movwf	_fsmGetEvent$1699^(0+128)
  6770  0D85  01DD               	clrf	(_fsmGetEvent$1699+1)^(0+128)
  6771  0D86                     l30005896:
  6772  0D86  085D               	movf	(_fsmGetEvent$1699+1)^(0+128),w
  6773  0D87  045C               	iorwf	_fsmGetEvent$1699^(0+128),w
  6774  0D88  1903               	skipnz
  6775  0D89  2D8C               	goto	l30005898
  6776  0D8A                     l30005897:
  6777  0D8A  3007               	movlw	7
  6778  0D8B  2F4B               	goto	L27
  6779  0D8C                     l30005898:
  6780                           ;fsm_events.h: 67: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  6781  0D8C  01DA               	clrf	_fsmGetEvent$1700^(0+128)
  6782  0D8D  01DB               	clrf	(_fsmGetEvent$1700+1)^(0+128)
  6783  0D8E  1AFA               	btfsc	_kPinBuffer,5
  6784  0D8F  1B7A               	btfsc	_kPinBuffer,6
  6785  0D90  2DA1               	goto	l30005903
  6786  0D91  087A               	movf	_kPinBuffer,w
  6787  0D92  391F               	andlw	31
  6788  0D93  1D03               	skipz
  6789  0D94  2DA1               	goto	l30005903
  6790  0D95  087A               	movf	_kPinBuffer,w
  6791  0D96  39DF               	andlw	-33
  6792  0D97  00FA               	movwf	_kPinBuffer
  6793  0D98  0E7A               	swapf	_kPinBuffer,w
  6794  0D99  00F1               	movwf	??_fsmGetEvent
  6795  0D9A  0C71               	rrf	??_fsmGetEvent,w
  6796  0D9B  3901               	andlw	1
  6797  0D9C  3000               	movlw	0
  6798  0D9D  1903               	skipnz
  6799  0D9E  3001               	movlw	1
  6800  0D9F  00DA               	movwf	_fsmGetEvent$1700^(0+128)
  6801  0DA0  01DB               	clrf	(_fsmGetEvent$1700+1)^(0+128)
  6802  0DA1                     l30005903:
  6803  0DA1  085B               	movf	(_fsmGetEvent$1700+1)^(0+128),w
  6804  0DA2  045A               	iorwf	_fsmGetEvent$1700^(0+128),w
  6805  0DA3  1D03               	btfss	3,2
  6806  0DA4  2C67               	goto	l30005825
  6807                           ;fsm_events.h: 68: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  6808  0DA5  01E0               	clrf	_fsmGetEvent$1701^(0+128)
  6809  0DA6  01E1               	clrf	(_fsmGetEvent$1701+1)^(0+128)
  6810  0DA7  1AFA               	btfsc	_kPinBuffer,5
  6811  0DA8  1B7A               	btfsc	_kPinBuffer,6
  6812  0DA9  2DBB               	goto	l30005910
  6813  0DAA  087A               	movf	_kPinBuffer,w
  6814  0DAB  391F               	andlw	31
  6815  0DAC  3A02               	xorlw	2
  6816  0DAD  1D03               	skipz
  6817  0DAE  2DBB               	goto	l30005910
  6818  0DAF  087A               	movf	_kPinBuffer,w
  6819  0DB0  39DF               	andlw	-33
  6820  0DB1  00FA               	movwf	_kPinBuffer
  6821  0DB2  0E7A               	swapf	_kPinBuffer,w
  6822  0DB3  00F1               	movwf	??_fsmGetEvent
  6823  0DB4  0C71               	rrf	??_fsmGetEvent,w
  6824  0DB5  3901               	andlw	1
  6825  0DB6  3000               	movlw	0
  6826  0DB7  1903               	skipnz
  6827  0DB8  3001               	movlw	1
  6828  0DB9  00E0               	movwf	_fsmGetEvent$1701^(0+128)
  6829  0DBA  01E1               	clrf	(_fsmGetEvent$1701+1)^(0+128)
  6830  0DBB                     l30005910:
  6831  0DBB  0861               	movf	(_fsmGetEvent$1701+1)^(0+128),w
  6832  0DBC  0460               	iorwf	_fsmGetEvent$1701^(0+128),w
  6833  0DBD  2D57               	goto	L28
  6834  0DBE                     l30005912:
  6835                           ;fsm_events.h: 72: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  6836  0DBE  01DE               	clrf	_fsmGetEvent$1702^(0+128)
  6837  0DBF  01DF               	clrf	(_fsmGetEvent$1702+1)^(0+128)
  6838  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  6839  0DC1  1CD5               	btfss	_t0Mem+3,1
  6840  0DC2  2DCE               	goto	l30005915
  6841  0DC3  0855               	movf	_t0Mem+3,w
  6842  0DC4  39FD               	andlw	-3
  6843  0DC5  00D5               	movwf	_t0Mem+3
  6844  0DC6  0C55               	rrf	_t0Mem+3,w
  6845  0DC7  3901               	andlw	1
  6846  0DC8  3000               	movlw	0
  6847  0DC9  1903               	skipnz
  6848  0DCA  3001               	movlw	1
  6849  0DCB  1683               	bsf	3,5	;RP0=1, select bank1
  6850  0DCC  00DE               	movwf	_fsmGetEvent$1702^(0+128)
  6851  0DCD  01DF               	clrf	(_fsmGetEvent$1702+1)^(0+128)
  6852  0DCE                     l30005915:
  6853  0DCE  1683               	bsf	3,5	;RP0=1, select bank1
  6854  0DCF  085F               	movf	(_fsmGetEvent$1702+1)^(0+128),w
  6855  0DD0  045E               	iorwf	_fsmGetEvent$1702^(0+128),w
  6856  0DD1  1D03               	btfss	3,2
  6857  0DD2  2D24               	goto	l30005871
  6858                           ;fsm_events.h: 73: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  6859  0DD3  01C6               	clrf	_fsmGetEvent$1703^(0+128)
  6860  0DD4  01C7               	clrf	(_fsmGetEvent$1703+1)^(0+128)
  6861  0DD5  1AFA               	btfsc	_kPinBuffer,5
  6862  0DD6  1B7A               	btfsc	_kPinBuffer,6
  6863  0DD7  2DE8               	goto	l30005922
  6864  0DD8  087A               	movf	_kPinBuffer,w
  6865  0DD9  391F               	andlw	31
  6866  0DDA  1D03               	skipz
  6867  0DDB  2DE8               	goto	l30005922
  6868  0DDC  087A               	movf	_kPinBuffer,w
  6869  0DDD  39DF               	andlw	-33
  6870  0DDE  00FA               	movwf	_kPinBuffer
  6871  0DDF  0E7A               	swapf	_kPinBuffer,w
  6872  0DE0  00F1               	movwf	??_fsmGetEvent
  6873  0DE1  0C71               	rrf	??_fsmGetEvent,w
  6874  0DE2  3901               	andlw	1
  6875  0DE3  3000               	movlw	0
  6876  0DE4  1903               	skipnz
  6877  0DE5  3001               	movlw	1
  6878  0DE6  00C6               	movwf	_fsmGetEvent$1703^(0+128)
  6879  0DE7  01C7               	clrf	(_fsmGetEvent$1703+1)^(0+128)
  6880  0DE8                     l30005922:
  6881  0DE8  0847               	movf	(_fsmGetEvent$1703+1)^(0+128),w
  6882  0DE9  0446               	iorwf	_fsmGetEvent$1703^(0+128),w
  6883  0DEA  1D03               	btfss	3,2
  6884  0DEB  2C67               	goto	l30005825
  6885                           ;fsm_events.h: 74: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  6886  0DEC  01AC               	clrf	_fsmGetEvent$1704^(0+128)
  6887  0DED  01AD               	clrf	(_fsmGetEvent$1704+1)^(0+128)
  6888  0DEE  1AFA               	btfsc	_kPinBuffer,5
  6889  0DEF  1B7A               	btfsc	_kPinBuffer,6
  6890  0DF0  2E02               	goto	l30005929
  6891  0DF1  087A               	movf	_kPinBuffer,w
  6892  0DF2  391F               	andlw	31
  6893  0DF3  3A02               	xorlw	2
  6894  0DF4  1D03               	skipz
  6895  0DF5  2E02               	goto	l30005929
  6896  0DF6  087A               	movf	_kPinBuffer,w
  6897  0DF7  39DF               	andlw	-33
  6898  0DF8  00FA               	movwf	_kPinBuffer
  6899  0DF9  0E7A               	swapf	_kPinBuffer,w
  6900  0DFA  00F1               	movwf	??_fsmGetEvent
  6901  0DFB  0C71               	rrf	??_fsmGetEvent,w
  6902  0DFC  3901               	andlw	1
  6903  0DFD  3000               	movlw	0
  6904  0DFE  1903               	skipnz
  6905  0DFF  3001               	movlw	1
  6906  0E00  00AC               	movwf	_fsmGetEvent$1704^(0+128)
  6907  0E01  01AD               	clrf	(_fsmGetEvent$1704+1)^(0+128)
  6908  0E02                     l30005929:
  6909  0E02  082D               	movf	(_fsmGetEvent$1704+1)^(0+128),w
  6910  0E03  042C               	iorwf	_fsmGetEvent$1704^(0+128),w
  6911  0E04  2D57               	goto	L28
  6912  0E05                     l30005931:
  6913                           ;fsm_events.h: 78: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  6914  0E05  01AA               	clrf	_fsmGetEvent$1705^(0+128)
  6915  0E06  01AB               	clrf	(_fsmGetEvent$1705+1)^(0+128)
  6916  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0E08  1CD5               	btfss	_t0Mem+3,1
  6918  0E09  2E15               	goto	l30005934
  6919  0E0A  0855               	movf	_t0Mem+3,w
  6920  0E0B  39FD               	andlw	-3
  6921  0E0C  00D5               	movwf	_t0Mem+3
  6922  0E0D  0C55               	rrf	_t0Mem+3,w
  6923  0E0E  3901               	andlw	1
  6924  0E0F  3000               	movlw	0
  6925  0E10  1903               	skipnz
  6926  0E11  3001               	movlw	1
  6927  0E12  1683               	bsf	3,5	;RP0=1, select bank1
  6928  0E13  00AA               	movwf	_fsmGetEvent$1705^(0+128)
  6929  0E14  01AB               	clrf	(_fsmGetEvent$1705+1)^(0+128)
  6930  0E15                     l30005934:
  6931  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  6932  0E16  082B               	movf	(_fsmGetEvent$1705+1)^(0+128),w
  6933  0E17  042A               	iorwf	_fsmGetEvent$1705^(0+128),w
  6934  0E18  1D03               	btfss	3,2
  6935  0E19  2D24               	goto	l30005871
  6936                           ;fsm_events.h: 79: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P1_SET?!(kPinBuffer.flag=0):0)) event = EV_K_SET;
  6937  0E1A  01B0               	clrf	_fsmGetEvent$1706^(0+128)
  6938  0E1B  01B1               	clrf	(_fsmGetEvent$1706+1)^(0+128)
  6939  0E1C  1AFA               	btfsc	_kPinBuffer,5
  6940  0E1D  1B7A               	btfsc	_kPinBuffer,6
  6941  0E1E  2E30               	goto	l30005941
  6942  0E1F  087A               	movf	_kPinBuffer,w
  6943  0E20  391F               	andlw	31
  6944  0E21  3A01               	xorlw	1
  6945  0E22  1D03               	skipz
  6946  0E23  2E30               	goto	l30005941
  6947  0E24  087A               	movf	_kPinBuffer,w
  6948  0E25  39DF               	andlw	-33
  6949  0E26  00FA               	movwf	_kPinBuffer
  6950  0E27  0E7A               	swapf	_kPinBuffer,w
  6951  0E28  00F1               	movwf	??_fsmGetEvent
  6952  0E29  0C71               	rrf	??_fsmGetEvent,w
  6953  0E2A  3901               	andlw	1
  6954  0E2B  3000               	movlw	0
  6955  0E2C  1903               	skipnz
  6956  0E2D  3001               	movlw	1
  6957  0E2E  00B0               	movwf	_fsmGetEvent$1706^(0+128)
  6958  0E2F  01B1               	clrf	(_fsmGetEvent$1706+1)^(0+128)
  6959  0E30                     l30005941:
  6960  0E30  0831               	movf	(_fsmGetEvent$1706+1)^(0+128),w
  6961  0E31  0430               	iorwf	_fsmGetEvent$1706^(0+128),w
  6962  0E32  1D03               	btfss	3,2
  6963  0E33  2D8A               	goto	l30005897
  6964                           ;fsm_events.h: 80: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  6965  0E34  01AE               	clrf	_fsmGetEvent$1707^(0+128)
  6966  0E35  01AF               	clrf	(_fsmGetEvent$1707+1)^(0+128)
  6967  0E36  1AFA               	btfsc	_kPinBuffer,5
  6968  0E37  1B7A               	btfsc	_kPinBuffer,6
  6969  0E38  2E49               	goto	l30005948
  6970  0E39  087A               	movf	_kPinBuffer,w
  6971  0E3A  391F               	andlw	31
  6972  0E3B  1D03               	skipz
  6973  0E3C  2E49               	goto	l30005948
  6974  0E3D  087A               	movf	_kPinBuffer,w
  6975  0E3E  39DF               	andlw	-33
  6976  0E3F  00FA               	movwf	_kPinBuffer
  6977  0E40  0E7A               	swapf	_kPinBuffer,w
  6978  0E41  00F1               	movwf	??_fsmGetEvent
  6979  0E42  0C71               	rrf	??_fsmGetEvent,w
  6980  0E43  3901               	andlw	1
  6981  0E44  3000               	movlw	0
  6982  0E45  1903               	skipnz
  6983  0E46  3001               	movlw	1
  6984  0E47  00AE               	movwf	_fsmGetEvent$1707^(0+128)
  6985  0E48  01AF               	clrf	(_fsmGetEvent$1707+1)^(0+128)
  6986  0E49                     l30005948:
  6987  0E49  082F               	movf	(_fsmGetEvent$1707+1)^(0+128),w
  6988  0E4A  042E               	iorwf	_fsmGetEvent$1707^(0+128),w
  6989  0E4B  1D03               	btfss	3,2
  6990  0E4C  2C67               	goto	l30005825
  6991                           ;fsm_events.h: 81: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  6992  0E4D  01A8               	clrf	_fsmGetEvent$1708^(0+128)
  6993  0E4E  01A9               	clrf	(_fsmGetEvent$1708+1)^(0+128)
  6994  0E4F  1AFA               	btfsc	_kPinBuffer,5
  6995  0E50  1B7A               	btfsc	_kPinBuffer,6
  6996  0E51  2E63               	goto	l30005955
  6997  0E52  087A               	movf	_kPinBuffer,w
  6998  0E53  391F               	andlw	31
  6999  0E54  3A02               	xorlw	2
  7000  0E55  1D03               	skipz
  7001  0E56  2E63               	goto	l30005955
  7002  0E57  087A               	movf	_kPinBuffer,w
  7003  0E58  39DF               	andlw	-33
  7004  0E59  00FA               	movwf	_kPinBuffer
  7005  0E5A  0E7A               	swapf	_kPinBuffer,w
  7006  0E5B  00F1               	movwf	??_fsmGetEvent
  7007  0E5C  0C71               	rrf	??_fsmGetEvent,w
  7008  0E5D  3901               	andlw	1
  7009  0E5E  3000               	movlw	0
  7010  0E5F  1903               	skipnz
  7011  0E60  3001               	movlw	1
  7012  0E61  00A8               	movwf	_fsmGetEvent$1708^(0+128)
  7013  0E62  01A9               	clrf	(_fsmGetEvent$1708+1)^(0+128)
  7014  0E63                     l30005955:
  7015  0E63  0829               	movf	(_fsmGetEvent$1708+1)^(0+128),w
  7016  0E64  0428               	iorwf	_fsmGetEvent$1708^(0+128),w
  7017  0E65  2D57               	goto	L28
  7018  0E66                     l30005957:
  7019                           ;fsm_events.h: 85: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  7020  0E66  01A2               	clrf	_fsmGetEvent$1709^(0+128)
  7021  0E67  01A3               	clrf	(_fsmGetEvent$1709+1)^(0+128)
  7022  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  7023  0E69  1CD5               	btfss	_t0Mem+3,1
  7024  0E6A  2E76               	goto	l30005960
  7025  0E6B  0855               	movf	_t0Mem+3,w
  7026  0E6C  39FD               	andlw	-3
  7027  0E6D  00D5               	movwf	_t0Mem+3
  7028  0E6E  0C55               	rrf	_t0Mem+3,w
  7029  0E6F  3901               	andlw	1
  7030  0E70  3000               	movlw	0
  7031  0E71  1903               	skipnz
  7032  0E72  3001               	movlw	1
  7033  0E73  1683               	bsf	3,5	;RP0=1, select bank1
  7034  0E74  00A2               	movwf	_fsmGetEvent$1709^(0+128)
  7035  0E75  01A3               	clrf	(_fsmGetEvent$1709+1)^(0+128)
  7036  0E76                     l30005960:
  7037  0E76  1683               	bsf	3,5	;RP0=1, select bank1
  7038  0E77  0823               	movf	(_fsmGetEvent$1709+1)^(0+128),w
  7039  0E78  0422               	iorwf	_fsmGetEvent$1709^(0+128),w
  7040  0E79  1D03               	btfss	3,2
  7041  0E7A  2D24               	goto	l30005871
  7042                           ;fsm_events.h: 86: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  7043  0E7B  01A0               	clrf	_fsmGetEvent$1710^(0+128)
  7044  0E7C  01A1               	clrf	(_fsmGetEvent$1710+1)^(0+128)
  7045  0E7D  1AFA               	btfsc	_kPinBuffer,5
  7046  0E7E  1B7A               	btfsc	_kPinBuffer,6
  7047  0E7F  2E90               	goto	l30005967
  7048  0E80  087A               	movf	_kPinBuffer,w
  7049  0E81  391F               	andlw	31
  7050  0E82  1D03               	skipz
  7051  0E83  2E90               	goto	l30005967
  7052  0E84  087A               	movf	_kPinBuffer,w
  7053  0E85  39DF               	andlw	-33
  7054  0E86  00FA               	movwf	_kPinBuffer
  7055  0E87  0E7A               	swapf	_kPinBuffer,w
  7056  0E88  00F1               	movwf	??_fsmGetEvent
  7057  0E89  0C71               	rrf	??_fsmGetEvent,w
  7058  0E8A  3901               	andlw	1
  7059  0E8B  3000               	movlw	0
  7060  0E8C  1903               	skipnz
  7061  0E8D  3001               	movlw	1
  7062  0E8E  00A0               	movwf	_fsmGetEvent$1710^(0+128)
  7063  0E8F  01A1               	clrf	(_fsmGetEvent$1710+1)^(0+128)
  7064  0E90                     l30005967:
  7065  0E90  0821               	movf	(_fsmGetEvent$1710+1)^(0+128),w
  7066  0E91  0420               	iorwf	_fsmGetEvent$1710^(0+128),w
  7067  0E92  1D03               	btfss	3,2
  7068  0E93  2C67               	goto	l30005825
  7069                           ;fsm_events.h: 87: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  7070  0E94  01A6               	clrf	_fsmGetEvent$1711^(0+128)
  7071  0E95  01A7               	clrf	(_fsmGetEvent$1711+1)^(0+128)
  7072  0E96  1AFA               	btfsc	_kPinBuffer,5
  7073  0E97  1B7A               	btfsc	_kPinBuffer,6
  7074  0E98  2EAA               	goto	l30005974
  7075  0E99  087A               	movf	_kPinBuffer,w
  7076  0E9A  391F               	andlw	31
  7077  0E9B  3A02               	xorlw	2
  7078  0E9C  1D03               	skipz
  7079  0E9D  2EAA               	goto	l30005974
  7080  0E9E  087A               	movf	_kPinBuffer,w
  7081  0E9F  39DF               	andlw	-33
  7082  0EA0  00FA               	movwf	_kPinBuffer
  7083  0EA1  0E7A               	swapf	_kPinBuffer,w
  7084  0EA2  00F1               	movwf	??_fsmGetEvent
  7085  0EA3  0C71               	rrf	??_fsmGetEvent,w
  7086  0EA4  3901               	andlw	1
  7087  0EA5  3000               	movlw	0
  7088  0EA6  1903               	skipnz
  7089  0EA7  3001               	movlw	1
  7090  0EA8  00A6               	movwf	_fsmGetEvent$1711^(0+128)
  7091  0EA9  01A7               	clrf	(_fsmGetEvent$1711+1)^(0+128)
  7092  0EAA                     l30005974:
  7093  0EAA  0827               	movf	(_fsmGetEvent$1711+1)^(0+128),w
  7094  0EAB  0426               	iorwf	_fsmGetEvent$1711^(0+128),w
  7095  0EAC  2D57               	goto	L28
  7096  0EAD                     l30005976:
  7097                           ;fsm_events.h: 91: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  7098  0EAD  01A4               	clrf	_fsmGetEvent$1712^(0+128)
  7099  0EAE  01A5               	clrf	(_fsmGetEvent$1712+1)^(0+128)
  7100  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  7101  0EB0  1CD5               	btfss	_t0Mem+3,1
  7102  0EB1  2EBD               	goto	l30005979
  7103  0EB2  0855               	movf	_t0Mem+3,w
  7104  0EB3  39FD               	andlw	-3
  7105  0EB4  00D5               	movwf	_t0Mem+3
  7106  0EB5  0C55               	rrf	_t0Mem+3,w
  7107  0EB6  3901               	andlw	1
  7108  0EB7  3000               	movlw	0
  7109  0EB8  1903               	skipnz
  7110  0EB9  3001               	movlw	1
  7111  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  7112  0EBB  00A4               	movwf	_fsmGetEvent$1712^(0+128)
  7113  0EBC  01A5               	clrf	(_fsmGetEvent$1712+1)^(0+128)
  7114  0EBD                     l30005979:
  7115  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  7116  0EBE  0825               	movf	(_fsmGetEvent$1712+1)^(0+128),w
  7117  0EBF  0424               	iorwf	_fsmGetEvent$1712^(0+128),w
  7118  0EC0  1D03               	btfss	3,2
  7119  0EC1  2D24               	goto	l30005871
  7120                           ;fsm_events.h: 92: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P1_SET?!(kPinBuffer.flag=0):0)) event = EV_K_SET;
  7121  0EC2  01B2               	clrf	_fsmGetEvent$1713^(0+128)
  7122  0EC3  01B3               	clrf	(_fsmGetEvent$1713+1)^(0+128)
  7123  0EC4  1AFA               	btfsc	_kPinBuffer,5
  7124  0EC5  1B7A               	btfsc	_kPinBuffer,6
  7125  0EC6  2ED8               	goto	l30005986
  7126  0EC7  087A               	movf	_kPinBuffer,w
  7127  0EC8  391F               	andlw	31
  7128  0EC9  3A01               	xorlw	1
  7129  0ECA  1D03               	skipz
  7130  0ECB  2ED8               	goto	l30005986
  7131  0ECC  087A               	movf	_kPinBuffer,w
  7132  0ECD  39DF               	andlw	-33
  7133  0ECE  00FA               	movwf	_kPinBuffer
  7134  0ECF  0E7A               	swapf	_kPinBuffer,w
  7135  0ED0  00F1               	movwf	??_fsmGetEvent
  7136  0ED1  0C71               	rrf	??_fsmGetEvent,w
  7137  0ED2  3901               	andlw	1
  7138  0ED3  3000               	movlw	0
  7139  0ED4  1903               	skipnz
  7140  0ED5  3001               	movlw	1
  7141  0ED6  00B2               	movwf	_fsmGetEvent$1713^(0+128)
  7142  0ED7  01B3               	clrf	(_fsmGetEvent$1713+1)^(0+128)
  7143  0ED8                     l30005986:
  7144  0ED8  0833               	movf	(_fsmGetEvent$1713+1)^(0+128),w
  7145  0ED9  0432               	iorwf	_fsmGetEvent$1713^(0+128),w
  7146  0EDA  1D03               	btfss	3,2
  7147  0EDB  2D8A               	goto	l30005897
  7148                           ;fsm_events.h: 93: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  7149  0EDC  01C0               	clrf	_fsmGetEvent$1714^(0+128)
  7150  0EDD  01C1               	clrf	(_fsmGetEvent$1714+1)^(0+128)
  7151  0EDE  1AFA               	btfsc	_kPinBuffer,5
  7152  0EDF  1B7A               	btfsc	_kPinBuffer,6
  7153  0EE0  2EF1               	goto	l30005993
  7154  0EE1  087A               	movf	_kPinBuffer,w
  7155  0EE2  391F               	andlw	31
  7156  0EE3  1D03               	skipz
  7157  0EE4  2EF1               	goto	l30005993
  7158  0EE5  087A               	movf	_kPinBuffer,w
  7159  0EE6  39DF               	andlw	-33
  7160  0EE7  00FA               	movwf	_kPinBuffer
  7161  0EE8  0E7A               	swapf	_kPinBuffer,w
  7162  0EE9  00F1               	movwf	??_fsmGetEvent
  7163  0EEA  0C71               	rrf	??_fsmGetEvent,w
  7164  0EEB  3901               	andlw	1
  7165  0EEC  3000               	movlw	0
  7166  0EED  1903               	skipnz
  7167  0EEE  3001               	movlw	1
  7168  0EEF  00C0               	movwf	_fsmGetEvent$1714^(0+128)
  7169  0EF0  01C1               	clrf	(_fsmGetEvent$1714+1)^(0+128)
  7170  0EF1                     l30005993:
  7171  0EF1  0841               	movf	(_fsmGetEvent$1714+1)^(0+128),w
  7172  0EF2  0440               	iorwf	_fsmGetEvent$1714^(0+128),w
  7173  0EF3  1D03               	btfss	3,2
  7174  0EF4  2C67               	goto	l30005825
  7175                           ;fsm_events.h: 94: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  7176  0EF5  01BE               	clrf	_fsmGetEvent$1715^(0+128)
  7177  0EF6  01BF               	clrf	(_fsmGetEvent$1715+1)^(0+128)
  7178  0EF7  1AFA               	btfsc	_kPinBuffer,5
  7179  0EF8  1B7A               	btfsc	_kPinBuffer,6
  7180  0EF9  2F0B               	goto	l30006000
  7181  0EFA  087A               	movf	_kPinBuffer,w
  7182  0EFB  391F               	andlw	31
  7183  0EFC  3A02               	xorlw	2
  7184  0EFD  1D03               	skipz
  7185  0EFE  2F0B               	goto	l30006000
  7186  0EFF  087A               	movf	_kPinBuffer,w
  7187  0F00  39DF               	andlw	-33
  7188  0F01  00FA               	movwf	_kPinBuffer
  7189  0F02  0E7A               	swapf	_kPinBuffer,w
  7190  0F03  00F1               	movwf	??_fsmGetEvent
  7191  0F04  0C71               	rrf	??_fsmGetEvent,w
  7192  0F05  3901               	andlw	1
  7193  0F06  3000               	movlw	0
  7194  0F07  1903               	skipnz
  7195  0F08  3001               	movlw	1
  7196  0F09  00BE               	movwf	_fsmGetEvent$1715^(0+128)
  7197  0F0A  01BF               	clrf	(_fsmGetEvent$1715+1)^(0+128)
  7198  0F0B                     l30006000:
  7199  0F0B  083F               	movf	(_fsmGetEvent$1715+1)^(0+128),w
  7200  0F0C  043E               	iorwf	_fsmGetEvent$1715^(0+128),w
  7201  0F0D  2D57               	goto	L28
  7202  0F0E                     l30006002:
  7203                           ;fsm_events.h: 98: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) ev
      +                          ent = EV_MENU_RETURN_TIMEOUT;
  7204  0F0E  01C4               	clrf	_fsmGetEvent$1716^(0+128)
  7205  0F0F  01C5               	clrf	(_fsmGetEvent$1716+1)^(0+128)
  7206  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  7207  0F11  1CD5               	btfss	_t0Mem+3,1
  7208  0F12  2F1E               	goto	l30006005
  7209  0F13  0855               	movf	_t0Mem+3,w
  7210  0F14  39FD               	andlw	-3
  7211  0F15  00D5               	movwf	_t0Mem+3
  7212  0F16  0C55               	rrf	_t0Mem+3,w
  7213  0F17  3901               	andlw	1
  7214  0F18  3000               	movlw	0
  7215  0F19  1903               	skipnz
  7216  0F1A  3001               	movlw	1
  7217  0F1B  1683               	bsf	3,5	;RP0=1, select bank1
  7218  0F1C  00C4               	movwf	_fsmGetEvent$1716^(0+128)
  7219  0F1D  01C5               	clrf	(_fsmGetEvent$1716+1)^(0+128)
  7220  0F1E                     l30006005:
  7221  0F1E  1683               	bsf	3,5	;RP0=1, select bank1
  7222  0F1F  0845               	movf	(_fsmGetEvent$1716+1)^(0+128),w
  7223  0F20  0444               	iorwf	_fsmGetEvent$1716^(0+128),w
  7224  0F21  1D03               	btfss	3,2
  7225  0F22  2D24               	goto	l30005871
  7226                           ;fsm_events.h: 99: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffer
      +                          .kId==P0_MENU?!(kPinBuffer.flag=0):0))
  7227  0F23  01C2               	clrf	_fsmGetEvent$1717^(0+128)
  7228  0F24  01C3               	clrf	(_fsmGetEvent$1717+1)^(0+128)
  7229  0F25  1AFA               	btfsc	_kPinBuffer,5
  7230  0F26  1B7A               	btfsc	_kPinBuffer,6
  7231  0F27  2F38               	goto	l30006012
  7232  0F28  087A               	movf	_kPinBuffer,w
  7233  0F29  391F               	andlw	31
  7234  0F2A  1D03               	skipz
  7235  0F2B  2F38               	goto	l30006012
  7236  0F2C  087A               	movf	_kPinBuffer,w
  7237  0F2D  39DF               	andlw	-33
  7238  0F2E  00FA               	movwf	_kPinBuffer
  7239  0F2F  0E7A               	swapf	_kPinBuffer,w
  7240  0F30  00F1               	movwf	??_fsmGetEvent
  7241  0F31  0C71               	rrf	??_fsmGetEvent,w
  7242  0F32  3901               	andlw	1
  7243  0F33  3000               	movlw	0
  7244  0F34  1903               	skipnz
  7245  0F35  3001               	movlw	1
  7246  0F36  00C2               	movwf	_fsmGetEvent$1717^(0+128)
  7247  0F37  01C3               	clrf	(_fsmGetEvent$1717+1)^(0+128)
  7248  0F38                     l30006012:
  7249  0F38  0843               	movf	(_fsmGetEvent$1717+1)^(0+128),w
  7250  0F39  0442               	iorwf	_fsmGetEvent$1717^(0+128),w
  7251  0F3A  1903               	skipnz
  7252  0F3B  2F4D               	goto	l30006016
  7253                           ;fsm_events.h: 100: {
  7254                           ;fsm_events.h: 101: if(tmp_11.mainMenuState==tmp_11.mem_cantMemorias-1)
  7255  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  7256  0F3D  0846               	movf	_tmp_11+2,w
  7257  0F3E  3EFF               	addlw	255
  7258  0F3F  00F1               	movwf	??_fsmGetEvent
  7259  0F40  30FF               	movlw	255
  7260  0F41  1803               	skipnc
  7261  0F42  3000               	movlw	256
  7262  0F43  00F2               	movwf	??_fsmGetEvent+1
  7263  0F44  0847               	movf	_tmp_11+3,w
  7264  0F45  0671               	xorwf	??_fsmGetEvent,w
  7265  0F46  0472               	iorwf	??_fsmGetEvent+1,w
  7266  0F47  1D03               	skipz
  7267  0F48  2C67               	goto	l30005825
  7268                           ;fsm_events.h: 102: event = EV_KM_TON_OFF_EXIT;
  7269  0F49  3006               	movlw	6
  7270  0F4A                     L29:
  7271  0F4A  1683               	bsf	3,5	;RP0=1, select bank1
  7272  0F4B                     L27:
  7273  0F4B  00EC               	movwf	fsmGetEvent@event^(0+128)
  7274  0F4C  2FFD               	goto	l30006051
  7275  0F4D                     l30006016:
  7276                           ;fsm_events.h: 105: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffe
      +                          r.kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  7277  0F4D  01BC               	clrf	_fsmGetEvent$1718^(0+128)
  7278  0F4E  01BD               	clrf	(_fsmGetEvent$1718+1)^(0+128)
  7279  0F4F  1AFA               	btfsc	_kPinBuffer,5
  7280  0F50  1B7A               	btfsc	_kPinBuffer,6
  7281  0F51  2F63               	goto	l30006021
  7282  0F52  087A               	movf	_kPinBuffer,w
  7283  0F53  391F               	andlw	31
  7284  0F54  3A02               	xorlw	2
  7285  0F55  1D03               	skipz
  7286  0F56  2F63               	goto	l30006021
  7287  0F57  087A               	movf	_kPinBuffer,w
  7288  0F58  39DF               	andlw	-33
  7289  0F59  00FA               	movwf	_kPinBuffer
  7290  0F5A  0E7A               	swapf	_kPinBuffer,w
  7291  0F5B  00F1               	movwf	??_fsmGetEvent
  7292  0F5C  0C71               	rrf	??_fsmGetEvent,w
  7293  0F5D  3901               	andlw	1
  7294  0F5E  3000               	movlw	0
  7295  0F5F  1903               	skipnz
  7296  0F60  3001               	movlw	1
  7297  0F61  00BC               	movwf	_fsmGetEvent$1718^(0+128)
  7298  0F62  01BD               	clrf	(_fsmGetEvent$1718+1)^(0+128)
  7299  0F63                     l30006021:
  7300  0F63  083D               	movf	(_fsmGetEvent$1718+1)^(0+128),w
  7301  0F64  043C               	iorwf	_fsmGetEvent$1718^(0+128),w
  7302  0F65  2D57               	goto	L28
  7303  0F66                     l30006023:
  7304                           ;fsm_events.h: 109: case S__M0__TON_OFF__SET_HH_1:
  7305                           ;fsm_events.h: 110: case S__M0__TON_OFF__SET_MM_0:
  7306                           ;fsm_events.h: 111: case S__M0__TON_OFF__SET_MM_1:
  7307                           ;fsm_events.h: 112: case S__M0__TON_OFF__SET_SS_0:
  7308                           ;fsm_events.h: 113: case S__M0__TON_OFF__SET_SS_1:
  7309                           ;fsm_events.h: 114: if((t0Mem[T0_MENU_RETURN].flag?!(t0Mem[T0_MENU_RETURN].flag=0):0)) e
      +                          vent = EV_MENU_RETURN_TIMEOUT;
  7310  0F66  01B6               	clrf	_fsmGetEvent$1719^(0+128)
  7311  0F67  01B7               	clrf	(_fsmGetEvent$1719+1)^(0+128)
  7312  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  7313  0F69  1CD5               	btfss	_t0Mem+3,1
  7314  0F6A  2F76               	goto	l30006026
  7315  0F6B  0855               	movf	_t0Mem+3,w
  7316  0F6C  39FD               	andlw	-3
  7317  0F6D  00D5               	movwf	_t0Mem+3
  7318  0F6E  0C55               	rrf	_t0Mem+3,w
  7319  0F6F  3901               	andlw	1
  7320  0F70  3000               	movlw	0
  7321  0F71  1903               	skipnz
  7322  0F72  3001               	movlw	1
  7323  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  7324  0F74  00B6               	movwf	_fsmGetEvent$1719^(0+128)
  7325  0F75  01B7               	clrf	(_fsmGetEvent$1719+1)^(0+128)
  7326  0F76                     l30006026:
  7327  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  7328  0F77  0837               	movf	(_fsmGetEvent$1719+1)^(0+128),w
  7329  0F78  0436               	iorwf	_fsmGetEvent$1719^(0+128),w
  7330  0F79  1D03               	btfss	3,2
  7331  0F7A  2D24               	goto	l30005871
  7332                           ;fsm_events.h: 115: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffe
      +                          r.kId==P0_MENU?!(kPinBuffer.flag=0):0)) event = EV_KM;
  7333  0F7B  01B4               	clrf	_fsmGetEvent$1720^(0+128)
  7334  0F7C  01B5               	clrf	(_fsmGetEvent$1720+1)^(0+128)
  7335  0F7D  1AFA               	btfsc	_kPinBuffer,5
  7336  0F7E  1B7A               	btfsc	_kPinBuffer,6
  7337  0F7F  2F90               	goto	l30006033
  7338  0F80  087A               	movf	_kPinBuffer,w
  7339  0F81  391F               	andlw	31
  7340  0F82  1D03               	skipz
  7341  0F83  2F90               	goto	l30006033
  7342  0F84  087A               	movf	_kPinBuffer,w
  7343  0F85  39DF               	andlw	-33
  7344  0F86  00FA               	movwf	_kPinBuffer
  7345  0F87  0E7A               	swapf	_kPinBuffer,w
  7346  0F88  00F1               	movwf	??_fsmGetEvent
  7347  0F89  0C71               	rrf	??_fsmGetEvent,w
  7348  0F8A  3901               	andlw	1
  7349  0F8B  3000               	movlw	0
  7350  0F8C  1903               	skipnz
  7351  0F8D  3001               	movlw	1
  7352  0F8E  00B4               	movwf	_fsmGetEvent$1720^(0+128)
  7353  0F8F  01B5               	clrf	(_fsmGetEvent$1720+1)^(0+128)
  7354  0F90                     l30006033:
  7355  0F90  0835               	movf	(_fsmGetEvent$1720+1)^(0+128),w
  7356  0F91  0434               	iorwf	_fsmGetEvent$1720^(0+128),w
  7357  0F92  1D03               	btfss	3,2
  7358  0F93  2C67               	goto	l30005825
  7359                           ;fsm_events.h: 116: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffe
      +                          r.kId==P2_ACCEPT?!(kPinBuffer.flag=0):0)) event = EV_K_ACCEPT;
  7360  0F94  01BA               	clrf	_fsmGetEvent$1721^(0+128)
  7361  0F95  01BB               	clrf	(_fsmGetEvent$1721+1)^(0+128)
  7362  0F96  1AFA               	btfsc	_kPinBuffer,5
  7363  0F97  1B7A               	btfsc	_kPinBuffer,6
  7364  0F98  2FAA               	goto	l30006040
  7365  0F99  087A               	movf	_kPinBuffer,w
  7366  0F9A  391F               	andlw	31
  7367  0F9B  3A02               	xorlw	2
  7368  0F9C  1D03               	skipz
  7369  0F9D  2FAA               	goto	l30006040
  7370  0F9E  087A               	movf	_kPinBuffer,w
  7371  0F9F  39DF               	andlw	-33
  7372  0FA0  00FA               	movwf	_kPinBuffer
  7373  0FA1  0E7A               	swapf	_kPinBuffer,w
  7374  0FA2  00F1               	movwf	??_fsmGetEvent
  7375  0FA3  0C71               	rrf	??_fsmGetEvent,w
  7376  0FA4  3901               	andlw	1
  7377  0FA5  3000               	movlw	0
  7378  0FA6  1903               	skipnz
  7379  0FA7  3001               	movlw	1
  7380  0FA8  00BA               	movwf	_fsmGetEvent$1721^(0+128)
  7381  0FA9  01BB               	clrf	(_fsmGetEvent$1721+1)^(0+128)
  7382  0FAA                     l30006040:
  7383  0FAA  083B               	movf	(_fsmGetEvent$1721+1)^(0+128),w
  7384  0FAB  043A               	iorwf	_fsmGetEvent$1721^(0+128),w
  7385  0FAC  1D03               	btfss	3,2
  7386  0FAD  2D59               	goto	l30005885
  7387                           ;fsm_events.h: 117: else if((kPinBuffer.flag && kPinBuffer.flanco==FLANCO_N && kPinBuffe
      +                          r.kId==P1_SET?!(kPinBuffer.flag=0):0)) event = EV_K_SET;
  7388  0FAE  01B8               	clrf	_fsmGetEvent$1722^(0+128)
  7389  0FAF  01B9               	clrf	(_fsmGetEvent$1722+1)^(0+128)
  7390  0FB0  1AFA               	btfsc	_kPinBuffer,5
  7391  0FB1  1B7A               	btfsc	_kPinBuffer,6
  7392  0FB2  2FC4               	goto	l30006047
  7393  0FB3  087A               	movf	_kPinBuffer,w
  7394  0FB4  391F               	andlw	31
  7395  0FB5  3A01               	xorlw	1
  7396  0FB6  1D03               	skipz
  7397  0FB7  2FC4               	goto	l30006047
  7398  0FB8  087A               	movf	_kPinBuffer,w
  7399  0FB9  39DF               	andlw	-33
  7400  0FBA  00FA               	movwf	_kPinBuffer
  7401  0FBB  0E7A               	swapf	_kPinBuffer,w
  7402  0FBC  00F1               	movwf	??_fsmGetEvent
  7403  0FBD  0C71               	rrf	??_fsmGetEvent,w
  7404  0FBE  3901               	andlw	1
  7405  0FBF  3000               	movlw	0
  7406  0FC0  1903               	skipnz
  7407  0FC1  3001               	movlw	1
  7408  0FC2  00B8               	movwf	_fsmGetEvent$1722^(0+128)
  7409  0FC3  01B9               	clrf	(_fsmGetEvent$1722+1)^(0+128)
  7410  0FC4                     l30006047:
  7411  0FC4  0839               	movf	(_fsmGetEvent$1722+1)^(0+128),w
  7412  0FC5  0438               	iorwf	_fsmGetEvent$1722^(0+128),w
  7413  0FC6  1D03               	btfss	3,2
  7414  0FC7  2D8A               	goto	l30005897
  7415  0FC8  2FFD               	goto	l30006051
  7416  0FC9                     l30006050:
  7417  0FC9  0879               	movf	_estadoFsm,w
  7418  0FCA  3A00               	xorlw	0
  7419  0FCB  1903               	skipnz
  7420  0FCC  2FFD               	goto	l30006051
  7421  0FCD  3A01               	xorlw	1
  7422  0FCE  1903               	skipnz
  7423  0FCF  2BFA               	goto	l30005798
  7424  0FD0  3A03               	xorlw	3
  7425  0FD1  1903               	skipnz
  7426  0FD2  2C11               	goto	l30005803
  7427  0FD3  3A01               	xorlw	1
  7428  0FD4  1903               	skipnz
  7429  0FD5  2CF3               	goto	l30005860
  7430  0FD6  3A07               	xorlw	7
  7431  0FD7  1903               	skipnz
  7432  0FD8  2D0F               	goto	l30005867
  7433  0FD9  3A01               	xorlw	1
  7434  0FDA  1903               	skipnz
  7435  0FDB  2D5B               	goto	l30005886
  7436  0FDC  3A03               	xorlw	3
  7437  0FDD  1903               	skipnz
  7438  0FDE  2DBE               	goto	l30005912
  7439  0FDF  3A01               	xorlw	1
  7440  0FE0  1903               	skipnz
  7441  0FE1  2E05               	goto	l30005931
  7442  0FE2  3A0F               	xorlw	15
  7443  0FE3  1903               	skipnz
  7444  0FE4  2E66               	goto	l30005957
  7445  0FE5  3A01               	xorlw	1
  7446  0FE6  1903               	skipnz
  7447  0FE7  2EAD               	goto	l30005976
  7448  0FE8  3A03               	xorlw	3
  7449  0FE9  1903               	skipnz
  7450  0FEA  2F0E               	goto	l30006002
  7451  0FEB  3A01               	xorlw	1
  7452  0FEC  1903               	skipnz
  7453  0FED  2F66               	goto	l30006023
  7454  0FEE  3A07               	xorlw	7
  7455  0FEF  1903               	skipnz
  7456  0FF0  2F66               	goto	l30006023
  7457  0FF1  3A01               	xorlw	1
  7458  0FF2  1903               	skipnz
  7459  0FF3  2F66               	goto	l30006023
  7460  0FF4  3A03               	xorlw	3
  7461  0FF5  1903               	skipnz
  7462  0FF6  2F66               	goto	l30006023
  7463  0FF7  3A01               	xorlw	1
  7464  0FF8  1903               	skipnz
  7465  0FF9  2F66               	goto	l30006023
  7466  0FFA  3A1F               	xorlw	31
  7467  0FFB  1903               	skipnz
  7468  0FFC  2F66               	goto	l30006023
  7469  0FFD                     l30006051:
  7470                           ;fsm_events.h: 121: return event;
  7471  0FFD  1683               	bsf	3,5	;RP0=1, select bank1
  7472  0FFE  086C               	movf	fsmGetEvent@event^(0+128),w
  7473  0FFF  0008               	return
  7474  1000                     __end_of_fsmGetEvent:
  7475                           
  7476                           	psect	text1233
  7477  1135                     __ptext1233:	; =============== function _fsmGetEvent ends ============
  7478                           ; *************** function _driver_ledSet *****************
  7479                           ; Defined at:
  7480                           ;		line 30 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\main.c"
  7481                           ; Parameters:    Size  Location     Type
  7482                           ;		None
  7483                           ; Auto vars:     Size  Location     Type
  7484                           ;		None
  7485                           ; Return value:  Size  Location     Type
  7486                           ;		None               void
  7487                           ; Registers used:
  7488                           ;		None
  7489                           ; Tracked objects:
  7490                           ;		On entry : 0/0
  7491                           ;		On exit  : 60/0
  7492                           ;		Unchanged: FFE00/0
  7493                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7494                           ;      Locals:         0       0       0       0       0
  7495                           ;      Temp:     0
  7496                           ;      Total:    0
  7497                           ; This function calls:
  7498                           ;		Nothing
  7499                           ; This function is called by:
  7500                           ;		_main
  7501                           ; This function uses a non-reentrant model
  7502                           ; 
  7503  1135                     _driver_ledSet:	;main.c: 29: void driver_ledSet(void)
  7504                           ;main.c: 30: {
  7505                           ;main.c: 32: if(tmp_11.flag_inputSettingLedBlink) RB4 = bitTitila;
  7506                           ; Regs used in _driver_ledSet: []
  7507  1135  1283               	bcf	3,5	;RP0=0, select bank0
  7508  1136  1303               	bcf	3,6	;RP1=0, select bank0
  7509  1137  1DC4               	btfss	_tmp_11,3
  7510  1138  2942               	goto	l304
  7511  1139  1C78               	btfss	_bitTitila,0
  7512  113A  293E               	goto	u8300
  7513  113B  1303               	bcf	3,6	;RP1=0, select bank0
  7514  113C  1606               	bsf	6,4
  7515  113D  0008               	return
  7516  113E                     u8300:
  7517  113E  1283               	bcf	3,5	;RP0=0, select bank0
  7518  113F  1303               	bcf	3,6	;RP1=0, select bank0
  7519  1140  1206               	bcf	6,4
  7520  1141  0008               	return
  7521  1142                     l304:
  7522                           ;main.c: 33: else RB4 = 0;
  7523  1142  1206               	bcf	6,4
  7524  1143  0008               	return
  7525  1144                     __end_of_driver_ledSet:
  7526                           
  7527                           	psect	text1248
  7528  15C7                     __ptext1248:	; =============== function ___lbmod ends ============
  7529                           ; *************** function _isr *****************
  7530                           ; Defined at:
  7531                           ;		line 25 in file "F:\fgr\16gb\0000 interior\deTmp11\sw\cic\0000 cic\interrupts.c"
  7532                           ; Parameters:    Size  Location     Type
  7533                           ;		None
  7534                           ; Auto vars:     Size  Location     Type
  7535                           ;		None
  7536                           ; Return value:  Size  Location     Type
  7537                           ;		None               void
  7538                           ; Registers used:
  7539                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7540                           ; Tracked objects:
  7541                           ;		On entry : 0/0
  7542                           ;		On exit  : 60/60
  7543                           ;		Unchanged: FFE00/0
  7544                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7545                           ;      Locals:         0       0       0      11       0
  7546                           ;      Temp:     9
  7547                           ;      Total:   11
  7548                           ; This function calls:
  7549                           ;		_d7sm_char2pins
  7550                           ;		_kPin_driverDc
  7551                           ;		_t0Driver
  7552                           ;		_t1Driver
  7553                           ; This function is called by:
  7554                           ;		Interrupt level 1
  7555                           ; This function uses a non-reentrant model
  7556                           ; 
  7557  15C7                     _isr:	;interrupts.c: 24: void interrupt isr(void)
  7558                           ;interrupts.c: 25: {
  7559  15C7  27FA               	call	PL6	;select bank 0
  7560                           ;interrupts.c: 26: if(T0IE&&T0IF)
  7561  15C8  1A8B               	btfsc	11,5
  7562  15C9  1D0B               	btfss	11,2
  7563  15CA  2EB6               	goto	i1l30006153
  7564                           ;interrupts.c: 27: {
  7565                           ;interrupts.c: 28: { TMR0=248UL; };
  7566  15CB  30F8               	movlw	248
  7567  15CC  0081               	movwf	1	;volatile
  7568                           ;interrupts.c: 30: { { RC1=0;; RA4=0;; RC0=0;; RC7=0;; {}; {}; }; if(disp.mux_state == (
      +                          4+12)) disp.mux_state=0; if(disp.mux_state < 4) { if ( disp.strOffs + disp.mux_state<4 |
      +                          | disp.strOffs+disp.mux_state > disp.strLen+4-1 ) d7sm_char2pins(' '); else d7sm_char2pi
      +                          ns(*(
  7569  15CD  1087               	bcf	7,1
  7570  15CE  1205               	bcf	5,4
  7571  15CF  1007               	bcf	7,0
  7572  15D0  1387               	bcf	7,7
  7573  15D1  0842               	movf	_disp+4,w
  7574  15D2  3A10               	xorlw	16
  7575  15D3  1903               	btfsc	3,2
  7576  15D4  01C2               	clrf	_disp+4
  7577  15D5  3004               	movlw	4
  7578  15D6  0242               	subwf	_disp+4,w
  7579  15D7  1803               	skipnc
  7580  15D8  2E81               	goto	i1l30006146
  7581  15D9  0840               	movf	_disp+2,w
  7582  15DA  0742               	addwf	_disp+4,w
  7583  15DB  27FD               	call	PL7	;select bank 3
  7584  15DC  00A0               	movwf	??_isr^(0+384)
  7585  15DD  01A1               	clrf	(??_isr^(0+384)+1)
  7586  15DE  0DA1               	rlf	(??_isr+1)^(0+384),f
  7587  15DF  0821               	movf	(??_isr+1)^(0+384),w
  7588  15E0  3A80               	xorlw	128
  7589  15E1  00A2               	movwf	(??_isr+2)^(0+384)
  7590  15E2  3080               	movlw	128
  7591  15E3  0222               	subwf	(??_isr+2)^(0+384),w
  7592  15E4  1D03               	skipz
  7593  15E5  2DE8               	goto	u842_25
  7594  15E6  3004               	movlw	4
  7595  15E7  0220               	subwf	??_isr^(0+384),w
  7596  15E8                     u842_25:
  7597  15E8  1C03               	skipc
  7598  15E9  2E06               	goto	i1l30006138
  7599  15EA  27FA               	call	PL6	;select bank 0
  7600  15EB  0842               	movf	_disp+4,w
  7601  15EC  0740               	addwf	_disp+2,w
  7602  15ED  27FD               	call	PL7	;select bank 3
  7603  15EE  00A0               	movwf	??_isr^(0+384)
  7604  15EF  01A1               	clrf	(??_isr^(0+384)+1)
  7605  15F0  0DA1               	rlf	(??_isr+1)^(0+384),f
  7606  15F1  27FA               	call	PL6	;select bank 0
  7607  15F2  0841               	movf	_disp+3,w
  7608  15F3  3E03               	addlw	3
  7609  15F4  27FD               	call	PL7	;select bank 3
  7610  15F5  00A2               	movwf	(??_isr+2)^(0+384)
  7611  15F6  3000               	movlw	0
  7612  15F7  1803               	skipnc
  7613  15F8  3001               	movlw	1
  7614  15F9  00A3               	movwf	((??_isr+2)^(0+384)+1)
  7615  15FA  0823               	movf	(??_isr+3)^(0+384),w
  7616  15FB  3A80               	xorlw	128
  7617  15FC  00A4               	movwf	(??_isr+4)^(0+384)
  7618  15FD  0821               	movf	(??_isr+1)^(0+384),w
  7619  15FE  3A80               	xorlw	128
  7620  15FF  0224               	subwf	(??_isr+4)^(0+384),w
  7621  1600  1D03               	skipz
  7622  1601  2E04               	goto	u843_25
  7623  1602  0820               	movf	??_isr^(0+384),w
  7624  1603  0222               	subwf	(??_isr+2)^(0+384),w
  7625  1604                     u843_25:
  7626  1604  1803               	skipnc
  7627  1605  2E0D               	goto	i1l30006139
  7628  1606                     i1l30006138:
  7629  1606  3020               	movlw	32
  7630  1607  160A  118A  23B9   	fcall	_d7sm_char2pins
      +       160A  118A         
  7631  160C  2E65               	goto	i1l30006145
  7632  160D                     i1l30006139:
  7633  160D  27FA               	call	PL6	;select bank 0
  7634  160E  0842               	movf	_disp+4,w
  7635  160F  073E               	addwf	_disp,w
  7636  1610  27FD               	call	PL7	;select bank 3
  7637  1611  00A0               	movwf	??_isr^(0+384)
  7638  1612  27FA               	call	PL6	;select bank 0
  7639  1613  083F               	movf	_disp+1,w
  7640  1614  1803               	skipnc
  7641  1615  3E01               	addlw	1
  7642  1616  27FD               	call	PL7	;select bank 3
  7643  1617  00A1               	movwf	(??_isr^(0+384)+1)
  7644  1618  27FA               	call	PL6	;select bank 0
  7645  1619  0840               	movf	_disp+2,w
  7646  161A  27FD               	call	PL7	;select bank 3
  7647  161B  0720               	addwf	??_isr^(0+384),w
  7648  161C  00A2               	movwf	(??_isr+2)^(0+384)
  7649  161D  0821               	movf	(??_isr+1)^(0+384),w
  7650  161E  1803               	skipnc
  7651  161F  3E01               	addlw	1
  7652  1620  00A3               	movwf	((??_isr+2)^(0+384)+1)
  7653  1621  30FC               	movlw	252
  7654  1622  0722               	addwf	(??_isr+2)^(0+384),w
  7655  1623  0084               	movwf	4
  7656  1624  30FF               	movlw	255
  7657  1625  1803               	skipnc
  7658  1626  3000               	movlw	256
  7659  1627  0723               	addwf	(??_isr+3)^(0+384),w
  7660  1628  160A  118A  2000   	fcall	stringtab
  7661  162B  160A  118A  23B9   	fcall	_d7sm_char2pins
      +       160A  118A         
  7662  1630  2E65               	goto	i1l30006145
  7663  1631                     i1l17:
  7664  1631  27FA               	call	PL6	;select bank 0
  7665  1632  1C43               	btfss	_disp+5,0
  7666  1633  2E37               	goto	i1l600000795
  7667  1634  08F8               	movf	_bitTitila,f
  7668  1635  1D03               	skipz
  7669  1636  2E81               	goto	i1l30006146
  7670  1637                     i1l600000795:
  7671  1637  1A43               	btfsc	_disp+5,4
  7672  1638  2E3B               	goto	u846_20
  7673  1639  1507               	bsf	7,2
  7674  163A  2E3C               	goto	u847_24
  7675  163B                     u846_20:
  7676  163B  1107               	bcf	7,2
  7677  163C                     u847_24:
  7678  163C  1487               	bsf	7,1
  7679  163D  2E81               	goto	i1l30006146
  7680  163E                     i1l19:
  7681  163E  27FA               	call	PL6	;select bank 0
  7682  163F  1CC3               	btfss	_disp+5,1
  7683  1640  2E44               	goto	i1l600000796
  7684  1641  08F8               	movf	_bitTitila,f
  7685  1642  1D03               	skipz
  7686  1643  2E81               	goto	i1l30006146
  7687  1644                     i1l600000796:
  7688  1644  1AC3               	btfsc	_disp+5,5
  7689  1645  2E48               	goto	u850_20
  7690  1646  1507               	bsf	7,2
  7691  1647  2E49               	goto	u851_24
  7692  1648                     u850_20:
  7693  1648  1107               	bcf	7,2
  7694  1649                     u851_24:
  7695  1649  1605               	bsf	5,4
  7696  164A  2E81               	goto	i1l30006146
  7697  164B                     i1l21:
  7698  164B  27FA               	call	PL6	;select bank 0
  7699  164C  1D43               	btfss	_disp+5,2
  7700  164D  2E51               	goto	i1l600000797
  7701  164E  08F8               	movf	_bitTitila,f
  7702  164F  1D03               	skipz
  7703  1650  2E81               	goto	i1l30006146
  7704  1651                     i1l600000797:
  7705  1651  1B43               	btfsc	_disp+5,6
  7706  1652  2E55               	goto	u854_20
  7707  1653  1507               	bsf	7,2
  7708  1654  2E56               	goto	u855_24
  7709  1655                     u854_20:
  7710  1655  1107               	bcf	7,2
  7711  1656                     u855_24:
  7712  1656  1407               	bsf	7,0
  7713  1657  2E81               	goto	i1l30006146
  7714  1658                     i1l23:
  7715  1658  27FA               	call	PL6	;select bank 0
  7716  1659  1DC3               	btfss	_disp+5,3
  7717  165A  2E5E               	goto	i1l600000798
  7718  165B  08F8               	movf	_bitTitila,f
  7719  165C  1D03               	skipz
  7720  165D  2E81               	goto	i1l30006146
  7721  165E                     i1l600000798:
  7722  165E  1BC3               	btfsc	_disp+5,7
  7723  165F  2E62               	goto	u858_20
  7724  1660  1507               	bsf	7,2
  7725  1661  2E63               	goto	u859_24
  7726  1662                     u858_20:
  7727  1662  1107               	bcf	7,2
  7728  1663                     u859_24:
  7729  1663  1787               	bsf	7,7
  7730  1664  2E81               	goto	i1l30006146
  7731  1665                     i1l30006145:
  7732  1665  27FD               	call	PL7	;select bank 3
  7733  1666  01A1               	clrf	(??_isr+1)^(0+384)
  7734  1667  27FA               	call	PL6	;select bank 0
  7735  1668  0842               	movf	_disp+4,w
  7736  1669  3C03               	sublw	3
  7737  166A  27FD               	call	PL7	;select bank 3
  7738  166B  00A0               	movwf	??_isr^(0+384)
  7739  166C  1C03               	skipc
  7740  166D  03A1               	decf	(??_isr+1)^(0+384),f
  7741  166E  2E7D               	goto	i1l30141
  7742  166F                     i1l30142:
  7743  166F  0820               	movf	??_isr^(0+384),w
  7744  1670  3A00               	xorlw	0
  7745  1671  1903               	skipnz
  7746  1672  2E31               	goto	i1l17
  7747  1673  3A01               	xorlw	1
  7748  1674  1903               	skipnz
  7749  1675  2E3E               	goto	i1l19
  7750  1676  3A03               	xorlw	3
  7751  1677  1903               	skipnz
  7752  1678  2E4B               	goto	i1l21
  7753  1679  3A01               	xorlw	1
  7754  167A  1903               	skipnz
  7755  167B  2E58               	goto	i1l23
  7756  167C  2E81               	goto	i1l30006146
  7757  167D                     i1l30141:
  7758  167D  0821               	movf	(??_isr+1)^(0+384),w
  7759  167E  3A00               	xorlw	0
  7760  167F  1903               	skipnz
  7761  1680  2E6F               	goto	i1l30142
  7762  1681                     i1l30006146:
  7763  1681  27FA               	call	PL6	;select bank 0
  7764  1682  0AC2               	incf	_disp+4,f
  7765                           ;interrupts.c: 32: kPin_driverDc(P0_MENU, KEY_0);
  7766  1683  3000               	movlw	0
  7767  1684  1805               	btfsc	5,0
  7768  1685  3001               	movlw	1
  7769  1686  27FD               	call	PL7	;select bank 3
  7770  1687  0095               	movwf	?_kPin_driverDc^(0+384)
  7771  1688  3000               	movlw	0
  7772  1689  26F0  160A  118A   	fcall	_kPin_driverDc
  7773                           ;interrupts.c: 33: kPin_driverDc(P1_SET, KEY_1);
  7774  168C  3000               	movlw	0
  7775  168D  27FA               	call	PL6	;select bank 0
  7776  168E  1905               	btfsc	5,2
  7777  168F  3001               	movlw	1
  7778  1690  27FD               	call	PL7	;select bank 3
  7779  1691  0095               	movwf	?_kPin_driverDc^(0+384)
  7780  1692  3001               	movlw	1
  7781  1693  26F0  160A  118A   	fcall	_kPin_driverDc
  7782                           ;interrupts.c: 34: kPin_driverDc(P2_ACCEPT, KEY_2);
  7783  1696  3000               	movlw	0
  7784  1697  27FA               	call	PL6	;select bank 0
  7785  1698  1989               	btfsc	9,3
  7786  1699  3001               	movlw	1
  7787  169A  27FD               	call	PL7	;select bank 3
  7788  169B  0095               	movwf	?_kPin_driverDc^(0+384)
  7789  169C  3002               	movlw	2
  7790  169D  26F0  160A  118A   	fcall	_kPin_driverDc
  7791                           ;interrupts.c: 35: kPin_driverDc(IN1_FORCE, KEY_3);
  7792  16A0  3000               	movlw	0
  7793  16A1  27FA               	call	PL6	;select bank 0
  7794  16A2  1806               	btfsc	6,0
  7795  16A3  3001               	movlw	1
  7796  16A4  27FD               	call	PL7	;select bank 3
  7797  16A5  0095               	movwf	?_kPin_driverDc^(0+384)
  7798  16A6  3003               	movlw	3
  7799  16A7  26F0  160A  118A   	fcall	_kPin_driverDc
  7800                           ;interrupts.c: 36: kPin_driverDc(IN2_RST, KEY_4);
  7801  16AA  3000               	movlw	0
  7802  16AB  27FA               	call	PL6	;select bank 0
  7803  16AC  1906               	btfsc	6,2
  7804  16AD  3001               	movlw	1
  7805  16AE  27FD               	call	PL7	;select bank 3
  7806  16AF  0095               	movwf	?_kPin_driverDc^(0+384)
  7807  16B0  3004               	movlw	4
  7808  16B1  26F0  160A  118A   	fcall	_kPin_driverDc
  7809  16B4  27FA               	call	PL6	;select bank 0
  7810                           ;interrupts.c: 38: {T0IF=0;};
  7811  16B5  110B               	bcf	11,2
  7812  16B6                     i1l30006153:
  7813                           ;interrupts.c: 39: }
  7814                           ;interrupts.c: 41: if(TMR1IE&&TMR1IF)
  7815  16B6  1683               	bsf	3,5	;RP0=1, select bank1
  7816  16B7  1C0C               	btfss	12,0
  7817  16B8  2EE4               	goto	i1l9
  7818  16B9  1283               	bcf	3,5	;RP0=0, select bank0
  7819  16BA  1C0C               	btfss	12,0
  7820  16BB  2EE4               	goto	i1l9
  7821                           ;interrupts.c: 42: {
  7822                           ;interrupts.c: 43: { TMR1L=((unsigned char)((3036UL>>(8*0))&0xFF)); TMR1H=((unsigned cha
      +                          r)((3036UL>>(8*1))&0xFF)); };
  7823  16BC  30DC               	movlw	220
  7824  16BD  008E               	movwf	14	;volatile
  7825  16BE  300B               	movlw	11
  7826  16BF  008F               	movwf	15	;volatile
  7827                           ;interrupts.c: 45: t0Driver(T0_TESTDISPLAY);
  7828  16C0  3000               	movlw	0
  7829  16C1  273B  160A  118A   	fcall	_t0Driver
  7830                           ;interrupts.c: 47: t0Driver(T0_MENU_RETURN);
  7831  16C4  3001               	movlw	1
  7832  16C5  273B  160A  118A   	fcall	_t0Driver
  7833                           ;interrupts.c: 48: t0Driver(T0_PULSADO_LARGO_HOLD);
  7834  16C8  3002               	movlw	2
  7835  16C9  273B  160A  118A   	fcall	_t0Driver
  7836                           ;interrupts.c: 49: t0Driver(T0_PULSADO_LARGO_SILENT);
  7837  16CC  3003               	movlw	3
  7838  16CD  273B  160A  118A   	fcall	_t0Driver
  7839                           ;interrupts.c: 50: t0Driver(T0_D7SM_SCROLL);
  7840  16D0  3004               	movlw	4
  7841  16D1  273B  160A  118A   	fcall	_t0Driver
  7842                           ;interrupts.c: 52: t1Driver(T1_TIME);
  7843  16D4  3000               	movlw	0
  7844  16D5  2777  160A  118A   	fcall	_t1Driver
  7845                           ;interrupts.c: 54: bitTitila=bitTitila?0:1;
  7846  16D8  01A9               	clrf	_isr$883^(0+384)
  7847  16D9  0AA9               	incf	_isr$883^(0+384),f
  7848  16DA  01AA               	clrf	(_isr$883+1)^(0+384)
  7849  16DB  0878               	movf	_bitTitila,w
  7850  16DC  1903               	btfsc	3,2
  7851  16DD  2EE0               	goto	i1l30006165
  7852  16DE  01A9               	clrf	_isr$883^(0+384)
  7853  16DF  01AA               	clrf	(_isr$883+1)^(0+384)
  7854  16E0                     i1l30006165:
  7855  16E0  0829               	movf	_isr$883^(0+384),w
  7856  16E1  00F8               	movwf	_bitTitila
  7857  16E2  27FA               	call	PL6	;select bank 0
  7858                           ;interrupts.c: 56: {TMR1IF=0;};
  7859  16E3  100C               	bcf	12,0
  7860  16E4                     i1l9:
  7861  16E4  27FD               	call	PL7	;select bank 3
  7862  16E5  0828               	movf	(??_isr+8)^(0+384),w
  7863  16E6  00FE               	movwf	126
  7864  16E7  0827               	movf	(??_isr+7)^(0+384),w
  7865  16E8  008A               	movwf	10
  7866  16E9  0826               	movf	(??_isr+6)^(0+384),w
  7867  16EA  0084               	movwf	4
  7868  16EB  0825               	movf	(??_isr+5)^(0+384),w
  7869  16EC  0083               	movwf	3
  7870  16ED  0EFF               	swapf	127,f
  7871  16EE  0E7F               	swapf	127,w
  7872  16EF  0009               	retfie
  7873  16F0                     __end_of_isr:
  7874  16F0                     __ptext1252:	; =============== function _d7sm_char2pins ends ============
  7875                           ; *************** function _kPin_driverDc *****************
  7876                           ; Defined at:
  7877                           ;		line 37 in file "F:\fgr\16gb\libSwPic\libSwPic\keyPin\20240613 1311\kPin.c"
  7878                           ; Parameters:    Size  Location     Type
  7879                           ;  pi              1    wreg     unsigned char 
  7880                           ;  kCurrLogStat    1    5[BANK3 ] unsigned char 
  7881                           ; Auto vars:     Size  Location     Type
  7882                           ;  pi              1    4[BANK3 ] unsigned char 
  7883                           ; Return value:  Size  Location     Type
  7884                           ;		None               void
  7885                           ; Registers used:
  7886                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  7887                           ; Tracked objects:
  7888                           ;		On entry : 60/60
  7889                           ;		On exit  : 100/100
  7890                           ;		Unchanged: FFE00/0
  7891                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7892                           ;      Locals:         0       0       0       2       0
  7893                           ;      Temp:     0
  7894                           ;      Total:    2
  7895                           ; This function calls:
  7896                           ;		Nothing
  7897                           ; This function is called by:
  7898                           ;		_isr
  7899                           ; This function uses a non-reentrant model
  7900                           ; 
  7901  16F0                     _kPin_driverDc:	;kPin.c: 36: void kPin_driverDc(char pi, char kCurrLogState)
  7902                           ;kPin.c: 37: {
  7903                           ; Regs used in _kPin_driverDc: [wreg-fsr0h+status,2+status,0]
  7904                           ;kPin_driverDc@pi stored from wreg
  7905  16F0  0094               	movwf	kPin_driverDc@pi^(0+384)
  7906                           ;kPin.c: 38: if(kPin[pi].timer) kPin[pi].timer--;
  7907  16F1  1003               	clrc
  7908  16F2  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7909  16F3  3EAC               	addlw	(_kPin+1)& (0+255)
  7910  16F4  0084               	movwf	4
  7911  16F5  1783               	bsf	3,7	;select IRP bank3
  7912  16F6  0800               	movf	0,w
  7913  16F7  3A00               	xorlw	0
  7914  16F8  1003               	clrc
  7915  16F9  1903               	skipnz
  7916  16FA  2F00               	goto	L43
  7917  16FB  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7918  16FC  3EAC               	addlw	(_kPin+1)& (0+255)
  7919  16FD  0084               	movwf	4
  7920  16FE  0380               	decf	0,f
  7921  16FF  0008               	return
  7922  1700                     L43:	;kPin.c: 39: else
  7923                           ;kPin.c: 40: {
  7924                           ;kPin.c: 41: kPin[pi].state = kCurrLogState;
  7925  1700  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7926  1701  3EAB               	addlw	_kPin& (0+255)
  7927  1702  0084               	movwf	4
  7928  1703  0800               	movf	0,w
  7929  1704  0615               	xorwf	kPin_driverDc@kCurrLogState^(0+384),w
  7930  1705  39FE               	andlw	-2
  7931  1706  0615               	xorwf	kPin_driverDc@kCurrLogState^(0+384),w
  7932  1707  0080               	movwf	0
  7933                           ;kPin.c: 43: if(kPin[pi].state==FLANCO_P && kPin[pi].prevState==!FLANCO_P)
  7934  1708  1003               	clrc
  7935  1709  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7936  170A  3EAB               	addlw	_kPin& (0+255)
  7937  170B  0084               	movwf	4
  7938  170C  1003               	clrc
  7939  170D  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7940  170E  3EAB               	addlw	_kPin& (0+255)
  7941  170F  1C00               	btfss	0,0
  7942  1710  2F1A               	goto	L44
  7943  1711  0084               	movwf	4
  7944  1712  1880               	btfsc	0,1
  7945  1713  2F17               	goto	i1l30006182
  7946                           ;kPin.c: 44: {
  7947                           ;kPin.c: 45: kPinBuffer.flag = 1;
  7948  1714  16FA               	bsf	_kPinBuffer,5
  7949                           ;kPin.c: 46: kPinBuffer.flanco = FLANCO_P;
  7950  1715  177A               	bsf	_kPinBuffer,6
  7951  1716  2F25               	goto	i1l30006180
  7952  1717                     i1l30006182:
  7953                           ;kPin.c: 55: else if(kPin[pi].state==FLANCO_N && kPin[pi].prevState==!FLANCO_N)
  7954  1717  1003               	clrc
  7955  1718  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7956  1719  3EAB               	addlw	_kPin& (0+255)
  7957  171A                     L44:
  7958  171A  0084               	movwf	4
  7959  171B  1003               	clrc
  7960  171C  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7961  171D  3EAB               	addlw	_kPin& (0+255)
  7962  171E  1800               	btfsc	0,0
  7963  171F  2F33               	goto	L45
  7964  1720  0084               	movwf	4
  7965  1721  1C80               	btfss	0,1
  7966  1722  2F30               	goto	i1l30006187
  7967                           ;kPin.c: 56: {
  7968                           ;kPin.c: 57: kPinBuffer.flag = 1;
  7969  1723  16FA               	bsf	_kPinBuffer,5
  7970                           ;kPin.c: 58: kPinBuffer.flanco = FLANCO_N;
  7971  1724  137A               	bcf	_kPinBuffer,6
  7972  1725                     i1l30006180:
  7973                           ;kPin.c: 47: kPin[pi].timer = 25;
  7974  1725  1003               	clrc
  7975  1726  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7976  1727  3EAC               	addlw	(_kPin+1)& (0+255)
  7977  1728  0084               	movwf	4
  7978  1729  3019               	movlw	25
  7979  172A  0080               	movwf	0
  7980                           ;kPin.c: 53: kPinBuffer.kId = pi;
  7981  172B  087A               	movf	_kPinBuffer,w
  7982  172C  0614               	xorwf	kPin_driverDc@pi^(0+384),w
  7983  172D  39E0               	andlw	-32
  7984  172E  0614               	xorwf	kPin_driverDc@pi^(0+384),w
  7985  172F  00FA               	movwf	_kPinBuffer
  7986  1730                     i1l30006187:
  7987                           ;kPin.c: 61: }
  7988                           ;kPin.c: 63: kPin[pi].prevState = kPin[pi].state;
  7989  1730  1003               	clrc
  7990  1731  0D14               	rlf	kPin_driverDc@pi^(0+384),w
  7991  1732  3EAB               	addlw	_kPin& (0+255)
  7992  1733                     L45:
  7993  1733  0084               	movwf	4
  7994  1734  1783               	bsf	3,7	;select IRP bank3
  7995  1735  1C00               	btfss	0,0
  7996  1736  2F39               	goto	L46
  7997  1737  1480               	bsf	0,1
  7998  1738  0008               	return
  7999  1739                     L46:
  8000  1739  1080               	bcf	0,1
  8001  173A  0008               	return
  8002  173B                     __end_of_kPin_driverDc:
  8003  173B                     __ptext1249:	; =============== function _isr ends ============
  8004                           ; *************** function _t0Driver *****************
  8005                           ; Defined at:
  8006                           ;		line 31 in file "F:\fgr\16gb\libSwPic\libSwPic\timer0\20220922 2300\t0.c"
  8007                           ; Parameters:    Size  Location     Type
  8008                           ;  i               1    wreg     unsigned char 
  8009                           ; Auto vars:     Size  Location     Type
  8010                           ;  i               1    5[BANK3 ] unsigned char 
  8011                           ; Return value:  Size  Location     Type
  8012                           ;		None               void
  8013                           ; Registers used:
  8014                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8015                           ; Tracked objects:
  8016                           ;		On entry : 0/0
  8017                           ;		On exit  : 160/60
  8018                           ;		Unchanged: FFE9F/0
  8019                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8020                           ;      Locals:         0       0       0       2       0
  8021                           ;      Temp:     1
  8022                           ;      Total:    2
  8023                           ; This function calls:
  8024                           ;		Nothing
  8025                           ; This function is called by:
  8026                           ;		_isr
  8027                           ; This function uses a non-reentrant model
  8028                           ; 
  8029  173B                     _t0Driver:	;t0.c: 30: void t0Driver(char i)
  8030                           ;t0.c: 31: {
  8031  173B  27FD               	call	PL7	;select bank 3
  8032                           ; Regs used in _t0Driver: [wreg-fsr0h+status,2+status,0+pclath]
  8033                           ;t0Driver@i stored from wreg
  8034  173C  0095               	movwf	t0Driver@i^(0+384)
  8035                           ;t0.c: 33: if(!t0Mem[i].pause && t0Mem[i].prescaler>0)
  8036  173D  1003               	clrc
  8037  173E  0D15               	rlf	t0Driver@i^(0+384),w
  8038  173F  3E53               	addlw	(_t0Mem+1)& (0+255)
  8039  1740  0084               	movwf	4
  8040  1741  1383               	bcf	3,7	;select IRP bank0
  8041  1742  1900               	btfsc	0,2
  8042  1743  0008               	return
  8043  1744  1003               	clrc
  8044  1745  0D15               	rlf	t0Driver@i^(0+384),w
  8045  1746  3E52               	addlw	_t0Mem& (0+255)
  8046  1747  0084               	movwf	4
  8047  1748  0800               	movf	0,w
  8048  1749  3A00               	xorlw	0
  8049  174A  1903               	skipnz
  8050  174B  0008               	return
  8051                           ;t0.c: 34: {
  8052                           ;t0.c: 35: t0Mem[i].prescaler--;
  8053  174C  1003               	clrc
  8054  174D  0D15               	rlf	t0Driver@i^(0+384),w
  8055  174E  3E52               	addlw	_t0Mem& (0+255)
  8056  174F  0084               	movwf	4
  8057  1750  0380               	decf	0,f
  8058                           ;t0.c: 36: if(t0Mem[i].prescaler==0)
  8059  1751  1003               	clrc
  8060  1752  0D15               	rlf	t0Driver@i^(0+384),w
  8061  1753  3E52               	addlw	_t0Mem& (0+255)
  8062  1754  0084               	movwf	4
  8063  1755  0880               	movf	0,f
  8064  1756  1D03               	skipz
  8065  1757  0008               	return
  8066                           ;t0.c: 37: {
  8067                           ;t0.c: 38: t0Mem[i].flag=1;
  8068  1758  1003               	clrc
  8069  1759  0D15               	rlf	t0Driver@i^(0+384),w
  8070  175A  3E53               	addlw	(_t0Mem+1)& (0+255)
  8071  175B  0084               	movwf	4
  8072  175C  1480               	bsf	0,1
  8073                           ;t0.c: 39: if(t0Mem[i].loop) t0Mem[i].prescaler=t0DelayConstant[i];
  8074  175D  1003               	clrc
  8075  175E  0D15               	rlf	t0Driver@i^(0+384),w
  8076  175F  3E53               	addlw	(_t0Mem+1)& (0+255)
  8077  1760  0084               	movwf	4
  8078  1761  1C00               	btfss	0,0
  8079  1762  0008               	return
  8080  1763  0815               	movf	t0Driver@i^(0+384),w
  8081  1764  3EB0               	addlw	low _t0DelayConstant
  8082  1765  0084               	movwf	4
  8083  1766  3010               	movlw	high _t0DelayConstant
  8084  1767  1803               	skipnc
  8085  1768  3E01               	addlw	1
  8086  1769  160A  118A  2000   	fcall	stringtab
      +       160A  118A         
  8087  176E  0094               	movwf	??_t0Driver^(0+384)
  8088  176F  1003               	clrc
  8089  1770  0D15               	rlf	t0Driver@i^(0+384),w
  8090  1771  3E52               	addlw	_t0Mem& (0+255)
  8091  1772  0084               	movwf	4
  8092  1773  0814               	movf	??_t0Driver^(0+384),w
  8093  1774  1383               	bcf	3,7	;select IRP bank0
  8094  1775  0080               	movwf	0
  8095  1776  0008               	return
  8096  1777                     __end_of_t0Driver:
  8097  1777                     __ptext1250:	; =============== function _t0Driver ends ============
  8098                           ; *************** function _t1Driver *****************
  8099                           ; Defined at:
  8100                           ;		line 25 in file "F:\fgr\16gb\libSwPic\libSwPic\timer1\20221129 1236\t1.c"
  8101                           ; Parameters:    Size  Location     Type
  8102                           ;  i               1    wreg     unsigned char 
  8103                           ; Auto vars:     Size  Location     Type
  8104                           ;  i               1   15[BANK3 ] unsigned char 
  8105                           ; Return value:  Size  Location     Type
  8106                           ;		None               void
  8107                           ; Registers used:
  8108                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  8109                           ; Tracked objects:
  8110                           ;		On entry : 160/60
  8111                           ;		On exit  : 160/60
  8112                           ;		Unchanged: FFE9F/0
  8113                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8114                           ;      Locals:         0       0       0       6       0
  8115                           ;      Temp:     5
  8116                           ;      Total:    6
  8117                           ; This function calls:
  8118                           ;		i1___wmul
  8119                           ; This function is called by:
  8120                           ;		_isr
  8121                           ; This function uses a non-reentrant model
  8122                           ; 
  8123  1777                     _t1Driver:	;t1.c: 24: void t1Driver(char i)
  8124                           ;t1.c: 25: {
  8125                           ; Regs used in _t1Driver: [wreg-fsr0h+status,2+status,0]
  8126                           ;t1Driver@i stored from wreg
  8127  1777  009F               	movwf	t1Driver@i^(0+384)
  8128                           ;t1.c: 26: if(!t1Mem[i].pause && t1Mem[i].prescaler>0)
  8129  1778  009A               	movwf	??_t1Driver^(0+384)
  8130  1779  1003               	clrc
  8131  177A  0D9A               	rlf	??_t1Driver^(0+384),f
  8132  177B  1003               	clrc
  8133  177C  0D1A               	rlf	??_t1Driver^(0+384),w
  8134  177D  3E5F               	addlw	(_t1Mem+3)& (0+255)
  8135  177E  0084               	movwf	4
  8136  177F  1900               	btfsc	0,2
  8137  1780  0008               	return
  8138  1781  081F               	movf	t1Driver@i^(0+384),w
  8139  1782  009A               	movwf	??_t1Driver^(0+384)
  8140  1783  1003               	clrc
  8141  1784  0D9A               	rlf	??_t1Driver^(0+384),f
  8142  1785  1003               	clrc
  8143  1786  0D1A               	rlf	??_t1Driver^(0+384),w
  8144  1787  3E5C               	addlw	_t1Mem& (0+255)
  8145  1788  0084               	movwf	4
  8146  1789  0800               	movf	0,w
  8147  178A  009B               	movwf	(??_t1Driver+1)^(0+384)
  8148  178B  0A84               	incf	4,f
  8149  178C  0800               	movf	0,w
  8150  178D  009C               	movwf	(??_t1Driver+2)^(0+384)
  8151  178E  0A84               	incf	4,f
  8152  178F  0800               	movf	0,w
  8153  1790  009D               	movwf	(??_t1Driver+3)^(0+384)
  8154  1791  3A80               	xorlw	128
  8155  1792  009E               	movwf	(??_t1Driver+4)^(0+384)
  8156  1793  3080               	movlw	128
  8157  1794  021E               	subwf	(??_t1Driver+4)^(0+384),w
  8158  1795  1D03               	skipz
  8159  1796  2F9D               	goto	u835_24
  8160  1797  3000               	movlw	0
  8161  1798  021C               	subwf	(??_t1Driver+2)^(0+384),w
  8162  1799  1D03               	skipz
  8163  179A  2F9D               	goto	u835_24
  8164  179B  3001               	movlw	1
  8165  179C  021B               	subwf	(??_t1Driver+1)^(0+384),w
  8166  179D                     u835_24:
  8167  179D  1C03               	skipc
  8168  179E  0008               	return
  8169                           ;t1.c: 27: {
  8170                           ;t1.c: 28: t1Mem[i].prescaler--;
  8171  179F  081F               	movf	t1Driver@i^(0+384),w
  8172  17A0  009A               	movwf	??_t1Driver^(0+384)
  8173  17A1  1003               	clrc
  8174  17A2  0D9A               	rlf	??_t1Driver^(0+384),f
  8175  17A3  1003               	clrc
  8176  17A4  0D1A               	rlf	??_t1Driver^(0+384),w
  8177  17A5  3E5C               	addlw	_t1Mem& (0+255)
  8178  17A6  0084               	movwf	4
  8179  17A7  30FF               	movlw	255
  8180  17A8  0780               	addwf	0,f
  8181  17A9  0A84               	incf	4,f
  8182  17AA  1803               	skipnc
  8183  17AB  3E01               	addlw	1
  8184  17AC  1D03               	skipz
  8185  17AD  0780               	addwf	0,f
  8186  17AE  0A84               	incf	4,f
  8187  17AF  30FF               	movlw	255
  8188  17B0  1803               	skipnc
  8189  17B1  3E01               	addlw	1
  8190  17B2  0780               	addwf	0,f
  8191                           ;t1.c: 29: if(t1Mem[i].prescaler==0)
  8192  17B3  081F               	movf	t1Driver@i^(0+384),w
  8193  17B4  009A               	movwf	??_t1Driver^(0+384)
  8194  17B5  1003               	clrc
  8195  17B6  0D9A               	rlf	??_t1Driver^(0+384),f
  8196  17B7  1003               	clrc
  8197  17B8  0D1A               	rlf	??_t1Driver^(0+384),w
  8198  17B9  3E5C               	addlw	_t1Mem& (0+255)
  8199  17BA  0084               	movwf	4
  8200  17BB  0800               	movf	0,w
  8201  17BC  009B               	movwf	(??_t1Driver+1)^(0+384)
  8202  17BD  0A84               	incf	4,f
  8203  17BE  0800               	movf	0,w
  8204  17BF  009C               	movwf	(??_t1Driver+2)^(0+384)
  8205  17C0  0A84               	incf	4,f
  8206  17C1  0800               	movf	0,w
  8207  17C2  009D               	movwf	(??_t1Driver+3)^(0+384)
  8208  17C3  041C               	iorwf	(??_t1Driver+2)^(0+384),w
  8209  17C4  041B               	iorwf	(??_t1Driver+1)^(0+384),w
  8210  17C5  1D03               	skipz
  8211  17C6  0008               	return
  8212                           ;t1.c: 30: {
  8213                           ;t1.c: 31: t1Mem[i].flag=1;
  8214  17C7  081F               	movf	t1Driver@i^(0+384),w
  8215  17C8  009A               	movwf	??_t1Driver^(0+384)
  8216  17C9  1003               	clrc
  8217  17CA  0D9A               	rlf	??_t1Driver^(0+384),f
  8218  17CB  1003               	clrc
  8219  17CC  0D1A               	rlf	??_t1Driver^(0+384),w
  8220  17CD  3E5F               	addlw	(_t1Mem+3)& (0+255)
  8221  17CE  0084               	movwf	4
  8222  17CF  1480               	bsf	0,1
  8223                           ;t1.c: 32: if(t1Mem[i].loop) t1Mem[i].prescaler=t1DelayConstant[i];
  8224  17D0  081F               	movf	t1Driver@i^(0+384),w
  8225  17D1  009A               	movwf	??_t1Driver^(0+384)
  8226  17D2  1003               	clrc
  8227  17D3  0D9A               	rlf	??_t1Driver^(0+384),f
  8228  17D4  1003               	clrc
  8229  17D5  0D1A               	rlf	??_t1Driver^(0+384),w
  8230  17D6  3E5F               	addlw	(_t1Mem+3)& (0+255)
  8231  17D7  0084               	movwf	4
  8232  17D8  1C00               	btfss	0,0
  8233  17D9  0008               	return
  8234  17DA  081F               	movf	t1Driver@i^(0+384),w
  8235  17DB  071F               	addwf	t1Driver@i^(0+384),w
  8236  17DC  071F               	addwf	t1Driver@i^(0+384),w
  8237  17DD  3EC3               	addlw	_t1DelayConstant& (0+255)
  8238  17DE  0084               	movwf	4
  8239  17DF  1783               	bsf	3,7	;select IRP bank3
  8240  17E0  0800               	movf	0,w
  8241  17E1  009A               	movwf	??_t1Driver^(0+384)
  8242  17E2  0A84               	incf	4,f
  8243  17E3  0800               	movf	0,w
  8244  17E4  009B               	movwf	(??_t1Driver+1)^(0+384)
  8245  17E5  0A84               	incf	4,f
  8246  17E6  0800               	movf	0,w
  8247  17E7  009C               	movwf	(??_t1Driver+2)^(0+384)
  8248  17E8  081F               	movf	t1Driver@i^(0+384),w
  8249  17E9  009D               	movwf	(??_t1Driver+3)^(0+384)
  8250  17EA  1003               	clrc
  8251  17EB  0D9D               	rlf	(??_t1Driver+3)^(0+384),f
  8252  17EC  1003               	clrc
  8253  17ED  0D1D               	rlf	(??_t1Driver+3)^(0+384),w
  8254  17EE  3E5C               	addlw	_t1Mem& (0+255)
  8255  17EF  0084               	movwf	4
  8256  17F0  081A               	movf	??_t1Driver^(0+384),w
  8257  17F1  1383               	bcf	3,7	;select IRP bank0
  8258  17F2  0080               	movwf	0
  8259  17F3  0A84               	incf	4,f
  8260  17F4  081B               	movf	(??_t1Driver+1)^(0+384),w
  8261  17F5  0080               	movwf	0
  8262  17F6  0A84               	incf	4,f
  8263  17F7  081C               	movf	(??_t1Driver+2)^(0+384),w
  8264  17F8  0080               	movwf	0
  8265  17F9  0008               	return
  8266  17FA                     __end_of_t1Driver:
  8267  17FA                     PL6:
  8268  17FA  1283               	bcf	3,5	;RP0=0, select bank0
  8269  17FB  1303               	bcf	3,6	;RP1=0, select bank0
  8270  17FC  0008               	return
  8271  17FD                     PL7:
  8272  17FD  1683               	bsf	3,5	;RP0=1, select bank3
  8273  17FE  1703               	bsf	3,6	;RP1=1, select bank3
  8274  17FF  0008               	return
  8275                           
  8276                           	psect	intentry
  8277  0004                     __pintentry:	; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8278  0004                     interrupt_function:
  8279  007F                     saved_w	set	btemp+1
  8280  0004  00FF               	movwf	btemp+1
  8281  0005  0803               	movf	3,w
  8282  0006  1683               	bsf	3,5	;RP0=1, select bank3
  8283  0007  1703               	bsf	3,6	;RP1=1, select bank3
  8284  0008  00A5               	movwf	(??_isr+5)^(0+384)
  8285  0009  0804               	movf	4,w
  8286  000A  00A6               	movwf	(??_isr+6)^(0+384)
  8287  000B  080A               	movf	10,w
  8288  000C  00A7               	movwf	(??_isr+7)^(0+384)
  8289  000D  087E               	movf	btemp,w
  8290  000E  00A8               	movwf	(??_isr+8)^(0+384)
  8291  000F  160A  118A  2DC7   	ljmp	_isr
  8292                           
  8293                           	psect	text1251
  8294  13B9                     __ptext1251:	; =============== function _t1Driver ends ============
  8295                           ; *************** function _d7sm_char2pins *****************
  8296                           ; Defined at:
  8297                           ;		line 76 in file "F:\fgr\16gb\libSwPic\libSwPic\disp7segMux\20220922\d7sm.c"
  8298                           ; Parameters:    Size  Location     Type
  8299                           ;  c               1    wreg     unsigned char 
  8300                           ; Auto vars:     Size  Location     Type
  8301                           ;  c               1    4[BANK3 ] unsigned char 
  8302                           ; Return value:  Size  Location     Type
  8303                           ;		None               void
  8304                           ; Registers used:
  8305                           ;		wreg, fsr0l, fsr0h, status,2, status,0
  8306                           ; Tracked objects:
  8307                           ;		On entry : 0/0
  8308                           ;		On exit  : 60/0
  8309                           ;		Unchanged: FFF9F/0
  8310                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8311                           ;      Locals:         0       0       0       1       0
  8312                           ;      Temp:     0
  8313                           ;      Total:    1
  8314                           ; This function calls:
  8315                           ;		Nothing
  8316                           ; This function is called by:
  8317                           ;		_isr
  8318                           ; This function uses a non-reentrant model
  8319                           ; 
  8320  13B9                     _d7sm_char2pins:	;d7sm.c: 45: t_d7sm disp=
  8321                           ;d7sm.c: 46: {
  8322                           ;d7sm.c: 47: d7sm_buffer,
  8323                           ;d7sm.c: 48: 4,
  8324                           ;d7sm.c: 49: 4,
  8325                           ;d7sm.c: 50: 0,
  8326                           ;d7sm.c: 51: 0,
  8327                           ;d7sm.c: 52: 0,
  8328                           ;d7sm.c: 53: 0,
  8329                           ;d7sm.c: 54: 0,
  8330                           ;d7sm.c: 55: 1,
  8331                           ;d7sm.c: 56: 1,
  8332                           ;d7sm.c: 57: 1,
  8333                           ;d7sm.c: 58: 1
  8334                           ;d7sm.c: 59: };
  8335                           ;d7sm.c: 67: char d7sm_buffer[8]={'8','8','8','8'};
  8336                           ;d7sm.c: 75: void d7sm_char2pins(char c)
  8337                           ;d7sm.c: 76: {
  8338                           ; Regs used in _d7sm_char2pins: [wreg-fsr0h+status,2+status,0]
  8339                           ;d7sm_char2pins@c stored from wreg
  8340  13B9  1683               	bsf	3,5	;RP0=1, select bank3
  8341  13BA  1703               	bsf	3,6	;RP1=1, select bank3
  8342  13BB  0094               	movwf	d7sm_char2pins@c^(0+384)
  8343  13BC  25C4               	call	PL8	;select bank 0
  8344                           ;d7sm.c: 77: RC2=1;
  8345  13BD  1507               	bsf	7,2
  8346  13BE  2D1E               	goto	i1l30006174
  8347  13BF                     i1l326:
  8348  13BF  25C4               	call	PL8	;select bank 0
  8349  13C0  1685               	bsf	5,5
  8350  13C1  1785               	bsf	5,7
  8351  13C2  1587               	bsf	7,3
  8352  13C3  1705               	bsf	5,6
  8353  13C4  1607               	bsf	7,4
  8354  13C5  1707               	bsf	7,6
  8355  13C6  1287               	bcf	7,5
  8356  13C7  0008               	return
  8357  13C8                     i1l327:
  8358  13C8  25C4               	call	PL8	;select bank 0
  8359  13C9  1685               	bsf	5,5
  8360  13CA  1785               	bsf	5,7
  8361  13CB  1587               	bsf	7,3
  8362  13CC  1305               	bcf	5,6
  8363  13CD  1607               	bsf	7,4
  8364  13CE  1707               	bsf	7,6
  8365  13CF  1687               	bsf	7,5
  8366  13D0  0008               	return
  8367  13D1                     i1l329:
  8368  13D1  25C4               	call	PL8	;select bank 0
  8369                           ;d7sm.c: 85: case '0': { RA5=0; RA7=0; RC3=0; RA6=0; RC4=0; RC6=0; RC5=1; }; break;
  8370  13D2  1285               	bcf	5,5
  8371  13D3  1385               	bcf	5,7
  8372  13D4  1187               	bcf	7,3
  8373  13D5  1305               	bcf	5,6
  8374  13D6  1207               	bcf	7,4
  8375  13D7  1307               	bcf	7,6
  8376  13D8  1687               	bsf	7,5
  8377  13D9  0008               	return
  8378  13DA                     i1l332:
  8379  13DA  25C4               	call	PL8	;select bank 0
  8380                           ;d7sm.c: 88: case 'I':
  8381                           ;d7sm.c: 89: case '1': { RA5=1; RA7=0; RC3=0; RA6=1; RC4=1; RC6=1; RC5=1; }; break;
  8382  13DB  1685               	bsf	5,5
  8383  13DC  1385               	bcf	5,7
  8384  13DD  1187               	bcf	7,3
  8385  13DE  1705               	bsf	5,6
  8386  13DF  1607               	bsf	7,4
  8387  13E0  1707               	bsf	7,6
  8388  13E1  1687               	bsf	7,5
  8389  13E2  0008               	return
  8390  13E3                     i1l333:
  8391  13E3  25C4               	call	PL8	;select bank 0
  8392  13E4  1285               	bcf	5,5
  8393  13E5  1385               	bcf	5,7
  8394  13E6  1587               	bsf	7,3
  8395  13E7  1305               	bcf	5,6
  8396  13E8  1207               	bcf	7,4
  8397  13E9  1707               	bsf	7,6
  8398  13EA  1287               	bcf	7,5
  8399  13EB  0008               	return
  8400  13EC                     i1l334:
  8401  13EC  25C4               	call	PL8	;select bank 0
  8402  13ED  1285               	bcf	5,5
  8403  13EE  1385               	bcf	5,7
  8404  13EF  1187               	bcf	7,3
  8405  13F0  1305               	bcf	5,6
  8406  13F1  1607               	bsf	7,4
  8407  13F2  1707               	bsf	7,6
  8408  13F3  1287               	bcf	7,5
  8409  13F4  0008               	return
  8410  13F5                     i1l335:
  8411  13F5  25C4               	call	PL8	;select bank 0
  8412  13F6  1685               	bsf	5,5
  8413  13F7  1385               	bcf	5,7
  8414  13F8  1187               	bcf	7,3
  8415  13F9  1705               	bsf	5,6
  8416  13FA  1607               	bsf	7,4
  8417  13FB  1307               	bcf	7,6
  8418  13FC  1287               	bcf	7,5
  8419  13FD  0008               	return
  8420  13FE                     i1l336:
  8421  13FE  25C4               	call	PL8	;select bank 0
  8422  13FF  1285               	bcf	5,5
  8423  1400  1785               	bsf	5,7
  8424  1401  1187               	bcf	7,3
  8425  1402  1305               	bcf	5,6
  8426  1403  1607               	bsf	7,4
  8427  1404  1307               	bcf	7,6
  8428  1405  1287               	bcf	7,5
  8429  1406  0008               	return
  8430  1407                     i1l338:
  8431  1407  25C4               	call	PL8	;select bank 0
  8432                           ;d7sm.c: 100: case '6': { RA5=0; RA7=1; RC3=0; RA6=0; RC4=0; RC6=0; RC5=0; }; break;
  8433  1408  1285               	bcf	5,5
  8434  1409  1785               	bsf	5,7
  8435  140A  1187               	bcf	7,3
  8436  140B  1305               	bcf	5,6
  8437  140C  1207               	bcf	7,4
  8438  140D  1307               	bcf	7,6
  8439  140E  1287               	bcf	7,5
  8440  140F  0008               	return
  8441  1410                     i1l339:
  8442  1410  25C4               	call	PL8	;select bank 0
  8443  1411  1285               	bcf	5,5
  8444  1412  1385               	bcf	5,7
  8445  1413  1187               	bcf	7,3
  8446  1414  1705               	bsf	5,6
  8447  1415  1607               	bsf	7,4
  8448  1416  1307               	bcf	7,6
  8449  1417  1687               	bsf	7,5
  8450  1418  0008               	return
  8451  1419                     i1l340:
  8452  1419  25C4               	call	PL8	;select bank 0
  8453  141A  1285               	bcf	5,5
  8454  141B  1385               	bcf	5,7
  8455  141C  1187               	bcf	7,3
  8456  141D  1305               	bcf	5,6
  8457  141E  1207               	bcf	7,4
  8458  141F  1307               	bcf	7,6
  8459  1420  1287               	bcf	7,5
  8460  1421  0008               	return
  8461  1422                     i1l342:
  8462  1422  25C4               	call	PL8	;select bank 0
  8463                           ;d7sm.c: 107: case '9': { RA5=0; RA7=0; RC3=0; RA6=0; RC4=1; RC6=0; RC5=0; }; break;
  8464  1423  1285               	bcf	5,5
  8465  1424  1385               	bcf	5,7
  8466  1425  1187               	bcf	7,3
  8467  1426  1305               	bcf	5,6
  8468  1427  1607               	bsf	7,4
  8469  1428  1307               	bcf	7,6
  8470  1429  1287               	bcf	7,5
  8471  142A  0008               	return
  8472  142B                     i1l343:
  8473  142B  25C4               	call	PL8	;select bank 0
  8474  142C  1285               	bcf	5,5
  8475  142D  1385               	bcf	5,7
  8476  142E  1187               	bcf	7,3
  8477  142F  1305               	bcf	5,6
  8478  1430  1207               	bcf	7,4
  8479  1431  1707               	bsf	7,6
  8480  1432  1287               	bcf	7,5
  8481  1433  0008               	return
  8482  1434                     i1l344:
  8483  1434  25C4               	call	PL8	;select bank 0
  8484  1435  1285               	bcf	5,5
  8485  1436  1385               	bcf	5,7
  8486  1437  1187               	bcf	7,3
  8487  1438  1705               	bsf	5,6
  8488  1439  1207               	bcf	7,4
  8489  143A  1307               	bcf	7,6
  8490  143B  1287               	bcf	7,5
  8491  143C  0008               	return
  8492  143D                     i1l345:
  8493  143D  25C4               	call	PL8	;select bank 0
  8494  143E  1685               	bsf	5,5
  8495  143F  1785               	bsf	5,7
  8496  1440  1187               	bcf	7,3
  8497  1441  1305               	bcf	5,6
  8498  1442  1207               	bcf	7,4
  8499  1443  1307               	bcf	7,6
  8500  1444  1287               	bcf	7,5
  8501  1445  0008               	return
  8502  1446                     i1l346:
  8503  1446  25C4               	call	PL8	;select bank 0
  8504  1447  1685               	bsf	5,5
  8505  1448  1785               	bsf	5,7
  8506  1449  1587               	bsf	7,3
  8507  144A  1305               	bcf	5,6
  8508  144B  1207               	bcf	7,4
  8509  144C  1707               	bsf	7,6
  8510  144D  1287               	bcf	7,5
  8511  144E  0008               	return
  8512  144F                     i1l347:
  8513  144F  25C4               	call	PL8	;select bank 0
  8514  1450  1285               	bcf	5,5
  8515  1451  1785               	bsf	5,7
  8516  1452  1587               	bsf	7,3
  8517  1453  1305               	bcf	5,6
  8518  1454  1207               	bcf	7,4
  8519  1455  1307               	bcf	7,6
  8520  1456  1687               	bsf	7,5
  8521  1457  0008               	return
  8522  1458                     i1l349:
  8523  1458  25C4               	call	PL8	;select bank 0
  8524                           ;d7sm.c: 120: case 'd': { RA5=1; RA7=0; RC3=0; RA6=0; RC4=0; RC6=1; RC5=0; }; break;
  8525  1459  1685               	bsf	5,5
  8526  145A  1385               	bcf	5,7
  8527  145B  1187               	bcf	7,3
  8528  145C  1305               	bcf	5,6
  8529  145D  1207               	bcf	7,4
  8530  145E  1707               	bsf	7,6
  8531  145F  1287               	bcf	7,5
  8532  1460  0008               	return
  8533  1461                     i1l350:
  8534  1461  25C4               	call	PL8	;select bank 0
  8535  1462  1685               	bsf	5,5
  8536  1463  1785               	bsf	5,7
  8537  1464  1187               	bcf	7,3
  8538  1465  1305               	bcf	5,6
  8539  1466  1207               	bcf	7,4
  8540  1467  1707               	bsf	7,6
  8541  1468  1287               	bcf	7,5
  8542  1469  0008               	return
  8543  146A                     i1l351:
  8544  146A  25C4               	call	PL8	;select bank 0
  8545  146B  1285               	bcf	5,5
  8546  146C  1385               	bcf	5,7
  8547  146D  1587               	bsf	7,3
  8548  146E  1305               	bcf	5,6
  8549  146F  1207               	bcf	7,4
  8550  1470  1307               	bcf	7,6
  8551  1471  1287               	bcf	7,5
  8552  1472  0008               	return
  8553  1473                     i1l352:
  8554  1473  25C4               	call	PL8	;select bank 0
  8555  1474  1285               	bcf	5,5
  8556  1475  1785               	bsf	5,7
  8557  1476  1587               	bsf	7,3
  8558  1477  1305               	bcf	5,6
  8559  1478  1207               	bcf	7,4
  8560  1479  1307               	bcf	7,6
  8561  147A  1287               	bcf	7,5
  8562  147B  0008               	return
  8563  147C                     i1l354:
  8564  147C  25C4               	call	PL8	;select bank 0
  8565                           ;d7sm.c: 129: case 'F': { RA5=0; RA7=1; RC3=1; RA6=1; RC4=0; RC6=0; RC5=0; }; break;
  8566  147D  1285               	bcf	5,5
  8567  147E  1785               	bsf	5,7
  8568  147F  1587               	bsf	7,3
  8569  1480  1705               	bsf	5,6
  8570  1481  1207               	bcf	7,4
  8571  1482  1307               	bcf	7,6
  8572  1483  1287               	bcf	7,5
  8573  1484  0008               	return
  8574  1485                     i1l355:
  8575  1485  25C4               	call	PL8	;select bank 0
  8576  1486  1685               	bsf	5,5
  8577  1487  1385               	bcf	5,7
  8578  1488  1187               	bcf	7,3
  8579  1489  1705               	bsf	5,6
  8580  148A  1207               	bcf	7,4
  8581  148B  1307               	bcf	7,6
  8582  148C  1287               	bcf	7,5
  8583  148D  0008               	return
  8584  148E                     i1l356:
  8585  148E  25C4               	call	PL8	;select bank 0
  8586  148F  1685               	bsf	5,5
  8587  1490  1785               	bsf	5,7
  8588  1491  1187               	bcf	7,3
  8589  1492  1705               	bsf	5,6
  8590  1493  1207               	bcf	7,4
  8591  1494  1307               	bcf	7,6
  8592  1495  1287               	bcf	7,5
  8593  1496  0008               	return
  8594  1497                     i1l357:
  8595  1497  25C4               	call	PL8	;select bank 0
  8596  1498  1685               	bsf	5,5
  8597  1499  1785               	bsf	5,7
  8598  149A  1187               	bcf	7,3
  8599  149B  1705               	bsf	5,6
  8600  149C  1607               	bsf	7,4
  8601  149D  1707               	bsf	7,6
  8602  149E  1687               	bsf	7,5
  8603  149F  0008               	return
  8604  14A0                     i1l358:
  8605  14A0  25C4               	call	PL8	;select bank 0
  8606  14A1  1685               	bsf	5,5
  8607  14A2  1385               	bcf	5,7
  8608  14A3  1187               	bcf	7,3
  8609  14A4  1305               	bcf	5,6
  8610  14A5  1207               	bcf	7,4
  8611  14A6  1707               	bsf	7,6
  8612  14A7  1687               	bsf	7,5
  8613  14A8  0008               	return
  8614  14A9                     i1l359:
  8615  14A9  25C4               	call	PL8	;select bank 0
  8616  14AA  1685               	bsf	5,5
  8617  14AB  1785               	bsf	5,7
  8618  14AC  1587               	bsf	7,3
  8619  14AD  1305               	bcf	5,6
  8620  14AE  1207               	bcf	7,4
  8621  14AF  1307               	bcf	7,6
  8622  14B0  1687               	bsf	7,5
  8623  14B1  0008               	return
  8624  14B2                     i1l361:
  8625  14B2  25C4               	call	PL8	;select bank 0
  8626                           ;d7sm.c: 142: case 'n': { RA5=1; RA7=1; RC3=0; RA6=1; RC4=0; RC6=1; RC5=0; }; break;
  8627  14B3  1685               	bsf	5,5
  8628  14B4  1785               	bsf	5,7
  8629  14B5  1187               	bcf	7,3
  8630  14B6  1705               	bsf	5,6
  8631  14B7  1207               	bcf	7,4
  8632  14B8  1707               	bsf	7,6
  8633  14B9  1287               	bcf	7,5
  8634  14BA  0008               	return
  8635  14BB                     i1l363:
  8636  14BB  25C4               	call	PL8	;select bank 0
  8637                           ;d7sm.c: 145: case 'N': { RA5=0; RA7=0; RC3=0; RA6=1; RC4=0; RC6=0; RC5=1; }; break;
  8638  14BC  1285               	bcf	5,5
  8639  14BD  1385               	bcf	5,7
  8640  14BE  1187               	bcf	7,3
  8641  14BF  1705               	bsf	5,6
  8642  14C0  1207               	bcf	7,4
  8643  14C1  1307               	bcf	7,6
  8644  14C2  1687               	bsf	7,5
  8645  14C3  0008               	return
  8646  14C4                     i1l365:
  8647  14C4  25C4               	call	PL8	;select bank 0
  8648                           ;d7sm.c: 148: case 'p': { RA5=0; RA7=0; RC3=1; RA6=1; RC4=0; RC6=0; RC5=0; }; break;
  8649  14C5  1285               	bcf	5,5
  8650  14C6  1385               	bcf	5,7
  8651  14C7  1587               	bsf	7,3
  8652  14C8  1705               	bsf	5,6
  8653  14C9  1207               	bcf	7,4
  8654  14CA  1307               	bcf	7,6
  8655  14CB  1287               	bcf	7,5
  8656  14CC  0008               	return
  8657  14CD                     i1l366:
  8658  14CD  25C4               	call	PL8	;select bank 0
  8659  14CE  1285               	bcf	5,5
  8660  14CF  1385               	bcf	5,7
  8661  14D0  1187               	bcf	7,3
  8662  14D1  1705               	bsf	5,6
  8663  14D2  1607               	bsf	7,4
  8664  14D3  1307               	bcf	7,6
  8665  14D4  1287               	bcf	7,5
  8666  14D5  0008               	return
  8667  14D6                     i1l367:
  8668  14D6  25C4               	call	PL8	;select bank 0
  8669  14D7  1685               	bsf	5,5
  8670  14D8  1785               	bsf	5,7
  8671  14D9  1587               	bsf	7,3
  8672  14DA  1705               	bsf	5,6
  8673  14DB  1207               	bcf	7,4
  8674  14DC  1707               	bsf	7,6
  8675  14DD  1287               	bcf	7,5
  8676  14DE  0008               	return
  8677  14DF                     i1l368:
  8678  14DF  25C4               	call	PL8	;select bank 0
  8679  14E0  1285               	bcf	5,5
  8680  14E1  1785               	bsf	5,7
  8681  14E2  1587               	bsf	7,3
  8682  14E3  1705               	bsf	5,6
  8683  14E4  1207               	bcf	7,4
  8684  14E5  1307               	bcf	7,6
  8685  14E6  1687               	bsf	7,5
  8686  14E7  0008               	return
  8687  14E8                     i1l372:
  8688  14E8  25C4               	call	PL8	;select bank 0
  8689                           ;d7sm.c: 160: case 't': { RA5=1; RA7=1; RC3=1; RA6=0; RC4=0; RC6=0; RC5=0; }; break;
  8690  14E9  1685               	bsf	5,5
  8691  14EA  1785               	bsf	5,7
  8692  14EB  1587               	bsf	7,3
  8693  14EC  1305               	bcf	5,6
  8694  14ED  1207               	bcf	7,4
  8695  14EE  1307               	bcf	7,6
  8696  14EF  1287               	bcf	7,5
  8697  14F0  0008               	return
  8698  14F1                     i1l374:
  8699  14F1  25C4               	call	PL8	;select bank 0
  8700                           ;d7sm.c: 163: case 'u': { RA5=1; RA7=1; RC3=0; RA6=0; RC4=0; RC6=1; RC5=1; }; break;
  8701  14F2  1685               	bsf	5,5
  8702  14F3  1785               	bsf	5,7
  8703  14F4  1187               	bcf	7,3
  8704  14F5  1305               	bcf	5,6
  8705  14F6  1207               	bcf	7,4
  8706  14F7  1707               	bsf	7,6
  8707  14F8  1687               	bsf	7,5
  8708  14F9  0008               	return
  8709  14FA                     i1l375:
  8710  14FA  25C4               	call	PL8	;select bank 0
  8711  14FB  1685               	bsf	5,5
  8712  14FC  1385               	bcf	5,7
  8713  14FD  1187               	bcf	7,3
  8714  14FE  1305               	bcf	5,6
  8715  14FF  1207               	bcf	7,4
  8716  1500  1307               	bcf	7,6
  8717  1501  1687               	bsf	7,5
  8718  1502  0008               	return
  8719  1503                     i1l377:
  8720  1503  25C4               	call	PL8	;select bank 0
  8721                           ;d7sm.c: 168: case 'Y': { RA5=1; RA7=0; RC3=0; RA6=0; RC4=1; RC6=0; RC5=0; }; break;
  8722  1504  1685               	bsf	5,5
  8723  1505  1385               	bcf	5,7
  8724  1506  1187               	bcf	7,3
  8725  1507  1305               	bcf	5,6
  8726  1508  1607               	bsf	7,4
  8727  1509  1307               	bcf	7,6
  8728  150A  1287               	bcf	7,5
  8729  150B  0008               	return
  8730  150C                     i1l379:
  8731  150C  25C4               	call	PL8	;select bank 0
  8732  150D  1285               	bcf	5,5
  8733  150E  1785               	bsf	5,7
  8734  150F  1587               	bsf	7,3
  8735  1510  1305               	bcf	5,6
  8736  1511  1607               	bsf	7,4
  8737  1512  1707               	bsf	7,6
  8738  1513  1287               	bcf	7,5
  8739  1514  0008               	return
  8740  1515                     i1l380:
  8741  1515  25C4               	call	PL8	;select bank 0
  8742  1516  1685               	bsf	5,5
  8743  1517  1785               	bsf	5,7
  8744  1518  1587               	bsf	7,3
  8745  1519  1705               	bsf	5,6
  8746  151A  1607               	bsf	7,4
  8747  151B  1707               	bsf	7,6
  8748  151C  1687               	bsf	7,5
  8749  151D  0008               	return
  8750  151E                     i1l30006174:
  8751  151E  1683               	bsf	3,5	;RP0=1, select bank3
  8752  151F  1703               	bsf	3,6	;RP1=1, select bank3
  8753  1520  0814               	movf	d7sm_char2pins@c^(0+384),w
  8754  1521  3A23               	xorlw	35
  8755  1522  1903               	skipnz
  8756  1523  2D0C               	goto	i1l379
  8757  1524  3A0E               	xorlw	14
  8758  1525  1903               	skipnz
  8759  1526  2BBF               	goto	i1l326
  8760  1527  3A1D               	xorlw	29
  8761  1528  1903               	skipnz
  8762  1529  2BD1               	goto	i1l329
  8763  152A  3A01               	xorlw	1
  8764  152B  1903               	skipnz
  8765  152C  2BDA               	goto	i1l332
  8766  152D  3A03               	xorlw	3
  8767  152E  1903               	skipnz
  8768  152F  2BE3               	goto	i1l333
  8769  1530  3A01               	xorlw	1
  8770  1531  1903               	skipnz
  8771  1532  2BEC               	goto	i1l334
  8772  1533  3A07               	xorlw	7
  8773  1534  1903               	skipnz
  8774  1535  2BF5               	goto	i1l335
  8775  1536  3A01               	xorlw	1
  8776  1537  1903               	skipnz
  8777  1538  2BFE               	goto	i1l336
  8778  1539  3A03               	xorlw	3
  8779  153A  1903               	skipnz
  8780  153B  2C07               	goto	i1l338
  8781  153C  3A01               	xorlw	1
  8782  153D  1903               	skipnz
  8783  153E  2C10               	goto	i1l339
  8784  153F  3A0F               	xorlw	15
  8785  1540  1903               	skipnz
  8786  1541  2C19               	goto	i1l340
  8787  1542  3A01               	xorlw	1
  8788  1543  1903               	skipnz
  8789  1544  2C22               	goto	i1l342
  8790  1545  3A78               	xorlw	120
  8791  1546  1903               	skipnz
  8792  1547  2C34               	goto	i1l344
  8793  1548  3A02               	xorlw	2
  8794  1549  1903               	skipnz
  8795  154A  2C4F               	goto	i1l347
  8796  154B  3A07               	xorlw	7
  8797  154C  1903               	skipnz
  8798  154D  2C58               	goto	i1l349
  8799  154E  3A01               	xorlw	1
  8800  154F  1903               	skipnz
  8801  1550  2C73               	goto	i1l352
  8802  1551  3A03               	xorlw	3
  8803  1552  1903               	skipnz
  8804  1553  2C7C               	goto	i1l354
  8805  1554  3A01               	xorlw	1
  8806  1555  1903               	skipnz
  8807  1556  2C07               	goto	i1l338
  8808  1557  3A0F               	xorlw	15
  8809  1558  1903               	skipnz
  8810  1559  2C85               	goto	i1l355
  8811  155A  3A01               	xorlw	1
  8812  155B  1903               	skipnz
  8813  155C  2BDA               	goto	i1l332
  8814  155D  3A03               	xorlw	3
  8815  155E  1903               	skipnz
  8816  155F  2CA0               	goto	i1l358
  8817  1560  3A06               	xorlw	6
  8818  1561  1903               	skipnz
  8819  1562  2CA9               	goto	i1l359
  8820  1563  3A01               	xorlw	1
  8821  1564  1903               	skipnz
  8822  1565  2CBB               	goto	i1l363
  8823  1566  3A03               	xorlw	3
  8824  1567  1903               	skipnz
  8825  1568  2CBB               	goto	i1l363
  8826  1569  3A01               	xorlw	1
  8827  156A  1903               	skipnz
  8828  156B  2BD1               	goto	i1l329
  8829  156C  3A1F               	xorlw	31
  8830  156D  1903               	skipnz
  8831  156E  2CC4               	goto	i1l365
  8832  156F  3A02               	xorlw	2
  8833  1570  1903               	skipnz
  8834  1571  2CDF               	goto	i1l368
  8835  1572  3A01               	xorlw	1
  8836  1573  1903               	skipnz
  8837  1574  2BFE               	goto	i1l336
  8838  1575  3A07               	xorlw	7
  8839  1576  1903               	skipnz
  8840  1577  2CE8               	goto	i1l372
  8841  1578  3A01               	xorlw	1
  8842  1579  1903               	skipnz
  8843  157A  2CFA               	goto	i1l375
  8844  157B  3A0C               	xorlw	12
  8845  157C  1903               	skipnz
  8846  157D  2D03               	goto	i1l377
  8847  157E  3A03               	xorlw	3
  8848  157F  1903               	skipnz
  8849  1580  2BE3               	goto	i1l333
  8850  1581  3A05               	xorlw	5
  8851  1582  1903               	skipnz
  8852  1583  2BC8               	goto	i1l327
  8853  1584  3A3E               	xorlw	62
  8854  1585  1903               	skipnz
  8855  1586  2C2B               	goto	i1l343
  8856  1587  3A03               	xorlw	3
  8857  1588  1903               	skipnz
  8858  1589  2C3D               	goto	i1l345
  8859  158A  3A01               	xorlw	1
  8860  158B  1903               	skipnz
  8861  158C  2C46               	goto	i1l346
  8862  158D  3A07               	xorlw	7
  8863  158E  1903               	skipnz
  8864  158F  2C58               	goto	i1l349
  8865  1590  3A01               	xorlw	1
  8866  1591  1903               	skipnz
  8867  1592  2C6A               	goto	i1l351
  8868  1593  3A03               	xorlw	3
  8869  1594  1903               	skipnz
  8870  1595  2C7C               	goto	i1l354
  8871  1596  3A01               	xorlw	1
  8872  1597  1903               	skipnz
  8873  1598  2C22               	goto	i1l342
  8874  1599  3A0F               	xorlw	15
  8875  159A  1903               	skipnz
  8876  159B  2C8E               	goto	i1l356
  8877  159C  3A01               	xorlw	1
  8878  159D  1903               	skipnz
  8879  159E  2C97               	goto	i1l357
  8880  159F  3A05               	xorlw	5
  8881  15A0  1903               	skipnz
  8882  15A1  2BDA               	goto	i1l332
  8883  15A2  3A01               	xorlw	1
  8884  15A3  1903               	skipnz
  8885  15A4  2CB2               	goto	i1l361
  8886  15A5  3A03               	xorlw	3
  8887  15A6  1903               	skipnz
  8888  15A7  2CB2               	goto	i1l361
  8889  15A8  3A01               	xorlw	1
  8890  15A9  1903               	skipnz
  8891  15AA  2C61               	goto	i1l350
  8892  15AB  3A1F               	xorlw	31
  8893  15AC  1903               	skipnz
  8894  15AD  2CC4               	goto	i1l365
  8895  15AE  3A01               	xorlw	1
  8896  15AF  1903               	skipnz
  8897  15B0  2CCD               	goto	i1l366
  8898  15B1  3A03               	xorlw	3
  8899  15B2  1903               	skipnz
  8900  15B3  2CD6               	goto	i1l367
  8901  15B4  3A01               	xorlw	1
  8902  15B5  1903               	skipnz
  8903  15B6  2BFE               	goto	i1l336
  8904  15B7  3A07               	xorlw	7
  8905  15B8  1903               	skipnz
  8906  15B9  2CE8               	goto	i1l372
  8907  15BA  3A01               	xorlw	1
  8908  15BB  1903               	skipnz
  8909  15BC  2CF1               	goto	i1l374
  8910  15BD  3A03               	xorlw	3
  8911  15BE  1903               	skipnz
  8912  15BF  2CF1               	goto	i1l374
  8913  15C0  3A0F               	xorlw	15
  8914  15C1  1903               	skipnz
  8915  15C2  2D03               	goto	i1l377
  8916  15C3  2D15               	goto	i1l380
  8917  15C4                     __end_of_d7sm_char2pins:
  8918  15C4                     PL8:
  8919  15C4  1283               	bcf	3,5	;RP0=0, select bank0
  8920  15C5  1303               	bcf	3,6	;RP1=0, select bank0
  8921  15C6  0008               	return
  8922                           
  8923                           	psect	text1253
  8924  124A                     __ptext1253:	; =============== function _kPin_driverDc ends ============
  8925                           ; *************** function i1___wmul *****************
  8926                           ; Defined at:
  8927                           ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.70\sources\wmul.c"
  8928                           ; Parameters:    Size  Location     Type
  8929                           ;  __wmul          2    6[BANK3 ] unsigned int 
  8930                           ;  __wmul          2    8[BANK3 ] unsigned int 
  8931                           ; Auto vars:     Size  Location     Type
  8932                           ;  __wmul          2    4[BANK3 ] unsigned int 
  8933                           ; Return value:  Size  Location     Type
  8934                           ;                  2    6[BANK3 ] unsigned int 
  8935                           ; Registers used:
  8936                           ;		wreg, status,2, status,0
  8937                           ; Tracked objects:
  8938                           ;		On entry : 0/0
  8939                           ;		On exit  : 60/60
  8940                           ;		Unchanged: FFF9F/0
  8941                           ; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8942                           ;      Locals:         0       0       0       6       0
  8943                           ;      Temp:     0
  8944                           ;      Total:    6
  8945                           ; This function calls:
  8946                           ;		Nothing
  8947                           ; This function is called by:
  8948                           ;		_t1Driver
  8949                           ; This function uses a non-reentrant model
  8950                           ; 
  8951  124A                     i1___wmul:
  8952                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  8953  124A  1683               	bsf	3,5	;RP0=1, select bank3
  8954  124B  1703               	bsf	3,6	;RP1=1, select bank3
  8955  124C  0194               	clrf	i1___wmul@product^(0+384)
  8956  124D  0195               	clrf	(i1___wmul@product+1)^(0+384)
  8957  124E                     i1l30006115:
  8958  124E  1C16               	btfss	i1___wmul@multiplier^(0+384),0
  8959  124F  2A56               	goto	i1l30006117
  8960  1250  0818               	movf	i1___wmul@multiplicand^(0+384),w
  8961  1251  0794               	addwf	i1___wmul@product^(0+384),f
  8962  1252  1803               	skipnc
  8963  1253  0A95               	incf	(i1___wmul@product+1)^(0+384),f
  8964  1254  0819               	movf	(i1___wmul@multiplicand+1)^(0+384),w
  8965  1255  0795               	addwf	(i1___wmul@product+1)^(0+384),f
  8966  1256                     i1l30006117:
  8967  1256  1003               	clrc
  8968  1257  0D98               	rlf	i1___wmul@multiplicand^(0+384),f
  8969  1258  0D99               	rlf	(i1___wmul@multiplicand+1)^(0+384),f
  8970  1259  1003               	clrc
  8971  125A  0C97               	rrf	(i1___wmul@multiplier+1)^(0+384),f
  8972  125B  0C96               	rrf	i1___wmul@multiplier^(0+384),f
  8973  125C  0817               	movf	(i1___wmul@multiplier+1)^(0+384),w
  8974  125D  0416               	iorwf	i1___wmul@multiplier^(0+384),w
  8975  125E  1D03               	skipz
  8976  125F  2A4E               	goto	i1l30006115
  8977  1260  0815               	movf	(i1___wmul@product+1)^(0+384),w
  8978  1261  0097               	movwf	(?i1___wmul+1)^(0+384)
  8979  1262  0814               	movf	i1___wmul@product^(0+384),w
  8980  1263  0096               	movwf	?i1___wmul^(0+384)
  8981  1264  0008               	return
  8982  1265                     __end_ofi1___wmul:
  8983                           
  8984                           	psect	text1254
  8985  0015                     __ptext1254:	; =============== function i1___wmul ends ============
  8986                           
  8987                           	psect	functab
  8988  0800                     __pfunctab:
  8989  0800                     fptable:
  8990  0800  00FE               	movwf	btemp& (0+127)
  8991  0801  3008               	movlw	high fptable
  8992  0802  008A               	movwf	10
  8993  0803  087E               	movf	btemp& (0+127),w
  8994  0804  0782               	addwf	2,f
  8995  0805                     fpbase:
  8996  0805  0000               	nop
  8997  0806                     fp__a_m0_tOnOff_showString_next:
  8998  0806  120A  118A  2ABB   	ljmp	_a_m0_tOnOff_showString_next
  8999  0809                     fp__a_m0_tOnOff_save:
  9000  0809  120A  118A  29F8   	ljmp	_a_m0_tOnOff_save
  9001  080C                     fp__a_m0_tOnOff_set:
  9002  080C  120A  158A  2994   	ljmp	_a_m0_tOnOff_set
  9003  080F                     fp__a_m0_tOnOff_inc:
  9004  080F  120A  118A  2DA3   	ljmp	_a_m0_tOnOff_inc
  9005  0812                     fp__a_m0_tOnOff_entrance:
  9006  0812  120A  118A  2926   	ljmp	_a_m0_tOnOff_entrance
  9007  0815                     fp__a_m0_input_inc:
  9008  0815  120A  118A  2A76   	ljmp	_a_m0_input_inc
  9009  0818                     fp__a_m0_nMem_set:
  9010  0818  120A  118A  2976   	ljmp	_a_m0_nMem_set
  9011  081B                     fp__a_m0_input_save:
  9012  081B  160A  118A  2B2B   	ljmp	_a_m0_input_save
  9013  081E                     fp__a_m0_nMem_save:
  9014  081E  120A  118A  29BE   	ljmp	_a_m0_nMem_save
  9015  0821                     fp__a_m0_nMem_dec:
  9016  0821  120A  118A  296C   	ljmp	_a_m0_nMem_dec
  9017  0824                     fp__a_m0_nMem_inc:
  9018  0824  120A  118A  2971   	ljmp	_a_m0_nMem_inc
  9019  0827                     fp__a_m0_return:
  9020  0827  160A  118A  28D1   	ljmp	_a_m0_return
  9021  082A                     fp__a_m0_first_set:
  9022  082A  160A  118A  2AAA   	ljmp	_a_m0_first_set
  9023  082D                     fp__a_m0_first_save:
  9024  082D  120A  118A  2933   	ljmp	_a_m0_first_save
  9025  0830                     fp__a_m0_first_inc:
  9026  0830  160A  118A  2AA3   	ljmp	_a_m0_first_inc
  9027  0833                     fp__a_input2ActionFp:
  9028  0833  160A  118A  28AC   	ljmp	_a_input2ActionFp
  9029  0836                     fp__a_m0_input:
  9030  0836  160A  118A  2B43   	ljmp	_a_m0_input
  9031  0839                     fp__a_m0_input_set:
  9032  0839  120A  118A  2A7E   	ljmp	_a_m0_input_set
  9033  083C                     fp__a_m0_nMem:
  9034  083C  120A  118A  29D4   	ljmp	_a_m0_nMem
  9035  083F                     fp__a_inputActionFn:
  9036  083F  160A  118A  2ACF   	ljmp	_a_inputActionFn
  9037  0842                     fp__a_input2ActionFn:
  9038  0842  160A  118A  2A65   	ljmp	_a_input2ActionFn
  9039  0845                     fp__a_showTimerIdOff:
  9040  0845  160A  118A  28B5   	ljmp	_a_showTimerIdOff
  9041  0848                     fp__a_showTimerIdOn:
  9042  0848  120A  118A  2B83   	ljmp	_a_showTimerIdOn
  9043  084B                     fp__a_showTime:
  9044  084B  120A  118A  2C67   	ljmp	_a_showTime
  9045  084E                     fp__a_inputActionFp:
  9046  084E  160A  118A  2A83   	ljmp	_a_inputActionFp
  9047  0851                     fp__a_doNothing:
  9048  0851  120A  118A  2815   	ljmp	_a_doNothing
  9049  0854                     fp__a_showHyphensOn:
  9050  0854  160A  118A  2944   	ljmp	_a_showHyphensOn
  9051  0857                     fp__a_showHyphensOff:
  9052  0857  160A  118A  28A1   	ljmp	_a_showHyphensOff
  9053  085A                     fp__a_initializeDevice:
  9054  085A  120A  158A  2B35   	ljmp	_a_initializeDevice
  9055  085D                     fp__a_m0_first:
  9056  085D  120A  118A  294F   	ljmp	_a_m0_first
  9057  0860                     fp__a_testDisplaySetup:
  9058  0860  160A  118A  2929   	ljmp	_a_testDisplaySetup
  9059  0863                     fp__a_temporizar:
  9060  0863  120A  158A  2889   	ljmp	_a_temporizar
  9061  007E                     btemp	set	126	;btemp


HI-TECH Software PICC Macro Assembler V9.70 build 5239 
Symbol Table                                                                                   Fri Nov 15 12:42:02 2024

                           ?_t0Driver 0196                             ?_t1Driver 01A0  
               fp__a_testDisplaySetup 0860                      ___awdiv@dividend 0024  
            __end_of_a_showTimerIdOff 10BA                                     l1 0000  
                        _s_m0_tonToff 11BC                                     pc 0002  
                       ??_a_doNothing 0071                                    _DA 04A5  
                                  _BF 04A0                                    _DC 0019  
                                  l33 0000                            _ucharToStr 0582  
                                  _PD 001B                                    _RD 0C60  
                                  _UA 04A1                            ??_t0Driver 0194  
                                  _TO 001C                                    _RW 04A2  
                                  _WR 0C61                            ??_t1Driver 019A  
                                  fsr 0004                    __end_of_ucharToStr 05A3  
      __end_of_a_m0_tOnOff_showString 0354                __size_of_d7sm_set_88xx 0064  
                 __size_of_a_showTime 011B                           __pbssCOMMON 0078  
                     __size_of___tmul 0027                       __size_of___wmul 0019  
                 __size_of_systemInit 005A              __end_of_a_m0_tOnOff_save 0253  
      fp__a_m0_tOnOff_showString_next 0806               __size_of_a_m0_first_inc 0007  
       ??_a_m0_tOnOff_showString_next 0074                             _a_m0_nMem 01D4  
                     _a_showTime$4234 0034               __size_of_a_m0_first_set 0025  
                                 _C1R 083A                                   l210 0000  
                                 _C2R 0842                                   l132 091B  
                                 l204 0000                                   l220 0000  
                                 l221 0000                                   l125 0000  
                                 l126 0000                                   l127 0000  
                                 l215 0000                                   l207 0000  
                                 l304 1142                                   l152 1285  
                                 l144 12D1                                   l208 0000  
                                 l232 0000                                   l217 0000  
                                 l154 1287                                   l234 0000  
                                 l171 0000                                   l155 0000  
                                 l219 0000                                   l243 09F6  
                                 l172 0000                                   l173 0000  
                                 l157 0000                                   l253 0000  
                                 l237 09A1                                   l502 0000  
                                 l158 0000                                   l511 0000  
                                 l175 0478                                   l184 0576  
                                 l192 0000                                   l193 0000  
                                 l178 047F                                   l194 0000  
                                 l186 0000                                   l290 0000  
                                 l187 0000                                   l381 0000  
                                 l437 0000                                   l509 07C7  
                                 l461 0000                                   l462 0B7A  
                                 l278 06C2                                   l623 0000  
                                 l391 0BE4                                   l703 0000  
                                 l392 0BE9                                   l803 0000  
                                 l468 0000                                   l469 0254  
                                 l806 07D9                     __end_of_a_m0_nMem 01F8  
                                 l479 0000                                   l761 0000  
                                 l762 0A98                                   l773 0000  
                                 l774 0AF5                                   _CKE 04A6  
                                 _CKP 00A4                                   _GIE 005F  
                                 _BOR 0470                                   _RA0 0028  
                                 _RA1 0029                                   _RB0 0030  
                                 _RA2 002A                                   _RB1 0031  
                                 _RA3 002B                                   _RC0 0038  
                                 _RB2 0032                                   _RA4 002C  
                                 _RC1 0039                                   _RB3 0033  
                                 _RA5 002D                                   _RC2 003A  
                                 _RB4 0034                                   _RA6 002E  
                                 _RC3 003B                                   _RB5 0035  
                                 _RA7 002F                                   _RC4 003C  
                                 _RB6 0036                                   _RC5 003D  
                                 _RB7 0037                                   _RC6 003E  
                                 _RE3 004B                                   _RC7 003F  
                                 _FSR 0004                                   _PCL 0002  
                                 _PS0 0408                                   _PR2 0092  
                                 _PS1 0409                                   _PS2 040A  
                                 _PEN 048A                                   _RP0 001D  
                                 _IRP 001F                                   _RP1 001E  
                                 _HTS 047A                                   _SR0 0C2E  
                                 _SR1 0C2F                                   _SEN 0488  
                                 i1l9 16E4                                   _SCS 0478  
                                 _PSA 040B                                   _LTS 0479  
                                 _VR0 04B8                                   _VR1 04B9  
                                 _VR2 04BA                                   _VR3 04BB  
                                 _POR 0471                                   _RX9 00C6  
                                 _SMP 04A7                                   _TX9 04C6  
                                 _WUE 0C39                                   _VRR 04BD  
     __size_of_a_m0_tOnOff_showString 0088                                   _isr 15C7  
                                 fsr0 0004                                   indf 0000  
                     fp__a_temporizar 0863                           ?_ucharToStr 002A  
                   a_showTimerIdOn@id 002E                      __size_of___atdiv 005D  
                    __size_of___awdiv 0045                      __size_of___atmod 004D  
                    __size_of___lbdiv 001C               fp__a_m0_tOnOff_entrance 0812  
                    __size_of___awmod 0039                      __size_of___lbmod 001D  
                       ?_eeprom_write 0021                        _menu_text_main 01B5  
                     _t1DelayConstant 01C3                       ___lbmod@divisor 0023  
                     ___atdiv@divisor 002E                       ___lbmod@counter 0021  
                     ___atdiv@counter 0026                     __size_of_t0Driver 003C  
                        ___atdiv@sign 0027                     __size_of_t1Driver 0083  
                     _a_showHyphensOn 1144                        ?_driver_ledSet 0071  
                        a_showTime@hh 0039                          a_showTime@mm 0038  
                        a_showTime@ss 0037                    fp__a_m0_input_save 081B  
            __size_of_a_m0_first_save 001C                                  _C1IE 046D  
                                _C1IF 006D                                  _C2IE 046E  
                                _C2IF 006E               __size_of_a_m0_input_inc 0008  
                                _C1OE 083D                                  _C2OE 0845  
                                _C1ON 083F                                  _C2ON 0847  
              d7sm_puts_scroll@string 0023               __size_of_a_m0_input_set 003D  
                                _ADIE 0466                                  _ADIF 0066  
                                _ADFM 04FF                                  ?_isr 01AB  
                                _ADON 00F8                                  _P1M0 00BE  
                                _CHS0 00FA                                  _P1M1 00BF  
                                _CHS1 00FB                                  _CHS2 00FC  
                                _CHS3 00FD                                  _EEIE 046C  
                                _EEIF 006C                                  _ANS0 0C40  
                                _BRG0 04C8                                  _ANS1 0C41  
                                _BRG1 04C9                                  _ANS2 0C42  
                                _BRG2 04CA                                  _ANS3 0C43  
                                _BRG3 04CB                                  STR_4 10CB  
                                _ANS4 0C44                                  _BRG4 04CC  
                                _BRG5 04CD                                  _GCEN 048F  
                                _BRG6 04CE                                  STR_7 10EC  
                                _BRG7 04CF                                  STR_8 10F5  
                                _ANS8 0C48                                  _BRG8 04D0  
                                STR_9 10BA                                  _ANS9 0C49  
                                _BRG9 04D1                       ??_driver_ledSet 0071  
                                _BRGH 04C2                            _a_m0_first 014F  
                                _T0IE 005D                                  _T0IF 005A  
                                _CREN 00C4                                  _T0CS 040D  
                                _FERR 00C2                                  _PDC0 04D8  
                                _PDC1 04D9                                  _PDC2 04DA  
                                _PDC3 04DB                                  _PDC4 04DC  
                                _T0SE 040C                                  _PDC5 04DD  
                                _CSRC 04C7                                  _PDC6 04DE  
                                _IOCB 0096                                  _INDF 0000  
           __size_of_a_showHyphensOff 0002                                  _PIE1 008C  
                                u6000 0000                                  _PIE2 008D  
                                u6010 0000                                  u6020 0000  
                                u6005 0214                                  u6015 022B  
                                u6025 0234                                  _PEIE 005E  
                                u6140 047D                                  i1l21 164B  
                                _INTE 005C                                  _INTF 0059  
                                i1l23 1658                                  _RBIE 005B  
                                _RBIF 0058                                  i1l17 1631  
                                i1l19 163E                                  _RCIE 0465  
                                _RCEN 048B                                  _RCIF 0065  
                                u3845 0978                                  _PCON 008E  
                                _PIR1 000C                                  _PIR2 000D  
                  _a_testDisplaySetup 1129                                  u6435 0B17  
                                u8300 113E                                  u5904 1290  
                                u6545 044C                                  _OERR 00C1  
                          _a_m0_input 1343                                  u6660 0B46  
                                u6750 0937                      ___awdiv@quotient 0022  
                         ??_a_m0_nMem 0071                                  u5890 128D  
                                _SCKP 0C3C                                  u6915 011C  
                                u6845 0AC3                                  _RBPU 040F  
                                u5990 0000                                  u5995 020B  
                        __pidataBANK0 121E                                  _RX9D 00C0  
                        __pidataBANK3 1232                                  _TMR0 0001  
                                _TMR2 0011                                  _WCOL 00A7  
                                _SPEN 00C7                                  _RSEN 0489  
                                _TX9D 04C0                                  _SREN 00C5  
                                _OSTS 047B                                  _TUN0 0480  
                                _TUN1 0481                                  _TUN2 0482  
                                _TUN3 0483                                  _TUN4 0484  
                                _STRA 04E8                                  _STRB 04E9  
                                _STRC 04EA                    __end_of_a_m0_first 016C  
                                _VREN 04BF                                  _STRD 04EB  
                                _TRMT 04C1                                  _STOP 04A4  
                                _TXIE 0464                                  _ZERO 001A  
                                _WREN 0C62                                  _TXEN 04C5  
                                _TXIF 0064                                  _VROE 04BE  
                                _SYNC 04C4                                  _WPUB 0095  
                                _VRSS 04BC                    __end_of_a_m0_input 135F  
                     _a_showTimerIdOn 0383                     d7sm_puts_scroll@s 0021  
                        main@ix2Trans 0193                          ___awdiv@sign 0021  
                                _kPin 01AB                    fp__a_inputActionFn 083F  
                  fp__a_inputActionFp 084E                                  _disp 003E  
                                _main 0034         __size_of_a_m0_tOnOff_entrance 000D  
                        ___atmod@sign 0071                 __size_of_eeprom_write 0023  
                                btemp 007E                       _a_m0_tOnOff_inc 05A3  
                     _a_m0_tOnOff_set 0994                      ___atmod@dividend 0020  
                      ?_kPin_driverDc 0195                _a_m0_tOnOff_showString 02CC  
                       fp__a_m0_first 085D                         fp__a_m0_input 0836  
          __end_of_a_initializeDevice 0B79                                  start 0012  
                     ??_kPin_driverDc 0194                          ??_ucharToStr 0072  
                    ___lbmod@dividend 0020  __size_of_a_m0_tOnOff_showString_next 0011  
                   interrupt_function 0004             __size_of_a_showTimerIdOff 0005  
                   ??_a_showHyphensOn 0071                   start_initialization 12FC  
               __size_of_a_temporizar 00B3                      ___atdiv@dividend 002B  
                       _a_m0_nMem_dec 016C                          ___awmod@sign 0071  
                    ucharToStr@strLen 002B                         _a_m0_nMem_inc 0171  
                       _a_m0_nMem_set 0176                              clear_ram 10DE  
            __end_of_a_input2ActionFn 1283              __end_of_a_input2ActionFp 10B0  
                    ___lbdiv@dividend 0071                               ?___tmul 0020  
                   ??_a_showTimerIdOn 0072                               ?___wmul 0020  
                   a_m0_tOnOff_inc@hh 00A7                     a_m0_tOnOff_inc@mm 00A8  
                     __end_of___atdiv 0AE8                     a_m0_tOnOff_inc@ss 00A9  
                           _main$2360 0191                       __end_of___awdiv 0467  
                            ??___tmul 0071                       __end_of___atmod 0B35  
                     __end_of___lbdiv 07D6                                 ??_isr 01A0  
                            ??___wmul 0071                       __end_of___awmod 098E  
                     __end_of___lbmod 07BA              __end_of_d7sm_puts_scroll 0383  
         __size_of_a_testDisplaySetup 000C                             stringcode 1008  
           __size_of_a_m0_tOnOff_save 005B                             _bitTitila 0078  
                    eeprom_write@addr 0020               ?_a_m0_tOnOff_showString 002E  
                    _a_showHyphensOff 10A1                               _CM1CON0 0107  
                             _CM2CON0 0108                               _CCP1CON 0017  
                             _CM2CON1 0109                               _CCP2CON 001D  
                   ??_a_m0_tOnOff_inc 0031                     ??_a_m0_tOnOff_set 0031  
                           __pfunctab 0800                               _ACKSTAT 048E  
                             _BAUDCTL 0187                        ___wmul@product 0071  
                             _ECCPAS0 04E4                               _ECCPAS1 04E5  
                             _ECCPAS2 04E6                               _ECCPASE 04E7  
                               _C1CH0 0838                                 _C1CH1 0839  
                               _C2CH0 0840                                 _C2CH1 0841  
                               l30140 0343                                 l30137 0419  
                               l30138 0411                                 l30139 034B  
                   fp__a_m0_nMem_save 081E                                 _DC1B0 00BC  
                               _DC1B1 00BD                                 _C1SEN 0C2D  
                               _C2REN 0C2C                                 _C1POL 083C  
                               _C2POL 0844                                 _C1OUT 083E  
                               _C2OUT 0846                                 _ABDEN 0C38  
                               _ADCS0 00FE                                 _ADCS1 00FF  
                               _ADDEN 00C3                                 ?_main 003E  
            __size_of_a_m0_input_save 0018                                 _ACKEN 048C  
                               _ACKDT 048D                                 _BCLIE 046B  
                               _BCLIF 006B                                 _CCP2X 00ED  
                               _CCP2Y 00EC                                 _EEADR 010D  
                               STR_10 10E6                                 _ANS10 0C4A  
                               _EEDAT 010C                                 _BRG10 04D2  
                               STR_11 10EF                                 _ANS11 0C4B  
                               _BRG11 04D3                                 STR_12 111D  
                               _ANS12 0C4C                                 _BRG12 04D4  
                               STR_13 10D7                                 _ANS13 0C4D  
                               _BRG13 04D5                                 STR_14 10A9  
                               _BRG14 04D6                                 STR_15 10A3  
                               _BRG15 04D7                                 STR_16 10A6  
                               STR_24 11E9                                 _BRG16 0C3B  
                               STR_17 10A9                                 STR_18 10A3  
                               STR_26 10CB                                 STR_19 10A6  
                               STR_27 11E9                                 STR_28 120D  
                               _CARRY 0018                                 _EEPGD 0C67  
                               _ANSEL 0188                 __end_of_a_m0_nMem_dec 0171  
                               _T1CON 0010                                 _IOCB0 04B0  
                               _T2CON 0012                                 _IOCB1 04B1  
                               _IOCB2 04B2                                 _IOCB3 04B3  
                               _IOCB4 04B4                                 _IOCB5 04B5  
                               _IOCB6 04B6                __size_of_driver_ledSet 000F  
                               _IOCB7 04B7                 __end_of_a_m0_nMem_inc 0176  
                               _T1GSS 0849                               _T1CKPS0 0084  
                             _T1CKPS1 0085                                 _IRCF0 047C  
                               _IRCF1 047D                                 _IRCF2 047E  
                             _T2CKPS0 0090                               _T2CKPS1 0091  
               __end_of_a_m0_nMem_set 01BE                                 _RABIE 005B  
                               _RABIF 0058                                 i1l340 1419  
                               i1l332 13DA                                 i1l333 13E3  
                               i1l350 1461                                 i1l342 1422  
                               i1l334 13EC                                 i1l326 13BF  
                               i1l351 146A                                 i1l343 142B  
                               i1l335 13F5                                 i1l327 13C8  
                               i1l352 1473                                 i1l344 1434  
                               i1l336 13FE                                 i1l361 14B2  
                               i1l345 143D                                 i1l329 13D1  
                               i1l354 147C                                 i1l346 1446  
                               i1l338 1407                                 i1l363 14BB  
                               i1l355 1485                                 i1l347 144F  
                               i1l339 1410                                 i1l380 1515  
                               i1l372 14E8                                 i1l356 148E  
                               i1l365 14C4                                 i1l357 1497  
                               i1l349 1458                                 i1l374 14F1  
                               i1l366 14CD                                 i1l358 14A0  
                               i1l375 14FA                                 i1l367 14D6  
                               i1l359 14A9                                 i1l368 14DF  
                               i1l377 1503                                 i1l379 150C  
                               _RABPU 040F                                 i1l479 0000  
                               _KEY_0 0028                                 _KEY_1 002A  
                               _KEY_2 004B                                 _KEY_3 0030  
                               _KEY_4 0032                                 _RCIDL 0C3E  
                               _FVREN 0C28                                 _VCFG0 04FC  
                               _VCFG1 04FD                                 _RCREG 001A  
                               _SENDB 04C3                                 _RCSTA 0018  
                               _OSFIE 046F                                 _OSFIF 006F  
                               _TMR1H 000F                                 _TMR1L 000E  
                               _SPBRG 0099                                 _PORTA 0005  
                               _PORTB 0006                               _T1OSCEN 0083  
                               _PORTC 0007                                 _PORTE 0009  
                               _PRSEN 04DF                                 _SRCON 0185  
                               _START 04A3                                 _PULSR 0C2A  
                               _PULSS 0C2B                                 _SSPM0 00A0  
                               _SSPM1 00A1                                 _SSPM2 00A2  
                               _SSPM3 00A3                      __end_ofi1___wmul 1265  
                               _TRISA 0085                                 _TRISB 0086  
                               _TRISC 0087                                 _SSPIE 0463  
                               _TRISE 0089                                 _SSPIF 0063  
                               _SSPEN 00A5                                 _VRCON 0097  
                             i1l30141 167D                               i1l30142 166F  
                               _WPUB0 04A8                                 _WPUB1 04A9  
                               _WPUB2 04AA                                 _WPUB3 04AB  
                               _WPUB4 04AC                                 _SSPOV 00A6  
                               _WPUB5 04AD                                 _WPUB6 04AE  
                               _WPUB7 04AF                                 _WRERR 0C63  
                               _TXREG 0019                           _a_m0_return 10D1  
                        ??_a_m0_first 0071                                 _TXSTA 0098  
                       _s_testDisplay 10C5                         _d7sm_set_88xx 0B92  
            __size_of_a_inputActionFn 002D                          ??_a_m0_input 0071  
            __size_of_a_inputActionFp 0020                             _s_m0_nMem 1105  
                           __pstrings 1000                    __size_of_a_m0_nMem 0024  
             a_m0_tOnOff_showString@i 002B               a_m0_tOnOff_showString@n 002C  
             a_m0_tOnOff_showString@s 0028                      _a_showTimerIdOff 10B5  
                               _t0Mem 0052                                 _t1Mem 005C  
                 __end_of_a_m0_return 10D7                       eeprom_read@addr 0020  
                     _a_m0_first_save 0133                        __pcstackCOMMON 0071  
                             _OSCTUNE 0090                               _PWM1CON 009B  
                   ___tmul@multiplier 0020                __size_of_kPin_driverDc 004B  
                    ___atdiv@quotient 0028                         ucharToStr@num 0029  
                             _PSTRCON 009D                                 _s_rst 10BF  
                             _SSPCON2 0091             _s_m0_tonToff_setSegundos0 118F  
           _s_m0_tonToff_setSegundos1 1180                            _kPinBuffer 007A  
                               fpbase 0805                               _ULPWUIE 046A  
                             _ULPWUIF 006A          a_m0_tOnOff_showString@i_1776 002D  
                             _SSPSTAT 0094                               _TOUTPS0 0093  
                             _TOUTPS1 0094                               _TOUTPS2 0095  
                             _TOUTPS3 0096                           _eeprom_read 0B79  
                    fsmGetEvent@event 00EC                      _a_m0_tOnOff_save 01F8  
                             _STRSYNC 04EC          a_m0_tOnOff_showString@n_1777 002A  
                 ?_a_testDisplaySetup 0071                                 pclath 000A  
                    ___lbdiv@quotient 0073                             _estadoFsm 0079  
        a_m0_tOnOff_showString@s_1778 0029                  ??_a_initializeDevice 0073  
                 __end_of_eeprom_read 0B92                 __end_of_d7sm_set_88xx 0BF6  
                            intlevel1 0004                                 status 0003  
            ??_a_m0_tOnOff_showString 0072                        fp__a_m0_return 0827  
                   ___wmul@multiplier 0020                            _a_showTime 0467  
             __end_of_a_showHyphensOn 1153                        _d7sm_char2pins 13B9  
                   ??_a_m0_first_save 0071                            _systemInit 135F  
                  __end_of_a_showTime 0582                        a_m0_nMem_set@i 002B  
                      a_m0_nMem_set@n 002A                        a_m0_nMem_set@s 0029  
           __size_of_a_input2ActionFn 001E             __size_of_a_input2ActionFp 0004  
                  __end_of_systemInit 13B9                       ?_d7sm_char2pins 0195  
                  ??_a_showHyphensOff 0071                     fp__a_m0_first_inc 0830  
                         _fsmGetEvent 0BF6                     fp__a_m0_first_set 082A  
                    __end_of_t0Driver 1777                      __end_of_t1Driver 17FA  
             __end_of_a_showTimerIdOn 0422                   fp__a_showHyphensOff 0857  
           __size_of_d7sm_puts_scroll 002F                   __end_of_fsmGetEvent 1000  
                     ___awdiv@divisor 0026                        _a_m0_nMem_save 01BE  
               fp__a_initializeDevice 085A                         __size_of_main 00EC  
                          __pbssBANK0 0052                            __pbssBANK3 01C3  
                    ??_d7sm_char2pins 0194                       ___awdiv@counter 0020  
                       fp__a_showTime 084B                              l30006000 0F0B  
                            l30006002 0F0E                              l30006003 0000  
                            l30006012 0F38                              l30006100 0000  
                            l30006021 0F63                              l30006005 0F1E  
                            l30006101 0000                              l30006110 0000  
                            l30006102 0000                              l30006023 0F66  
                            l30006111 0000                              l30006103 0000  
                            l30006112 0000                              l30006040 0FAA  
                            l30006024 0000                              l30006016 0F4D  
                            l30006008 0000                              l30006104 0000  
                            l30006033 0F90                              l30006017 0000  
                            l30006105 0000                              l30006026 0F76  
                            l30006050 0FC9                              l30006106 0000  
                            l30005410 0000                              l30005402 046F  
                            l30005250 0000                              l30006043 0000  
                            l30006051 0FFD                              l30006107 0000  
                            l30005411 0532                              l30005251 0000  
                            l30006036 0000                              l30006108 0000  
                            l30005260 0000                              l30005252 0000  
                            l30005244 0000                              l30005500 0000  
                            l30005340 0000                              l30006053 0000  
                            l30006029 0000                              l30006109 0000  
                            l30006061 0000                              l30005261 0000  
                            l30005413 0000                              l30005405 0000  
                            l30005253 0000                              l30005245 0000  
                            l30005501 12C8                              l30005341 0000  
                            l30005430 0000                              l30006054 093E  
                            l30006070 0000                              l30006062 0000  
                            l30005262 0000                              l30005414 0000  
                            l30005254 0000                              l30005246 0000  
                            l30005502 0000                              l30005270 0000  
                            l30005510 0000                              l30005350 0621  
                            l30005342 0000                              l30005431 0000  
                            l30006047 0FC4                              l30006071 0000  
                            l30006063 0000                              l30005415 0000  
                            l30005423 056F                              l30005263 0000  
                            l30005255 0000                              l30005503 0000  
                            l30005271 0000                              l30005511 0000  
                            l30005351 0625                              l30005343 0000  
                            l30005440 0000                              l30005432 0000  
                            l30005600 0B0D                              l30004800 0000  
                            l30006056 0946                              l30006080 0000  
                            l30006072 0000                              l30006064 0000  
                            l30005416 0000                              l30005408 0000  
                            l30005264 0000                              l30005256 0000  
                            l30005248 1271                              l30005520 0000  
                            l30005504 1343                              l30005512 0000  
                            l30005360 0658                              l30005344 0000  
                            l30005441 0000                              l30005433 0000  
                            l30004801 095F                              l30006057 0000  
                            l30006081 0000                              l30006073 0000  
                            l30006065 0000                              l30005257 0000  
                            l30005425 057A                              l30005417 0000  
                            l30005409 0000                              l30005265 0000  
                            l30005249 0000                              l30005505 0000  
                            l30005513 0000                              l30005353 0632  
                            l30005345 0602                              l30005442 0000  
                            l30004810 0000                              l30006058 0000  
                            l30006090 0000                              l30006082 0000  
                            l30006074 0000                              l30006066 0000  
                            l30005258 0000                              l30005426 0000  
                            l30005418 055B                              l30005450 039C  
                            l30005266 0000                              l30005282 0000  
                            l30005522 02A2                              l30005506 0000  
                            l30005514 0000                              l30005370 0000  
                            l30005362 0667                              l30005354 0635  
                            l30005610 0000                              l30005443 0000  
                            l30005435 0367                              l30005427 0354  
                            l30005603 0000                              l30004811 0985  
                            l30004803 0966                              l30006091 0000  
                            l30006083 0000                              l30006075 0000  
                            l30006067 0000                              l30005259 0000  
                            l30005451 0000                              l30005283 12D3  
                            l30005523 02A7                              l30005507 0000  
                            l30005267 0000                              l30005515 0000  
                            l30005531 027C                              l30005371 070C  
                            l30005347 060F                              l30005339 0000  
                            l30005611 0000                              l30005444 0000  
                            l30005436 0376                              l30005428 0000  
                            l30005604 0B29                              l30005700 0000  
                            l30004812 0000                              l30006092 0000  
                            l30006084 0000                              l30006076 0000  
                            l30006068 0000                              l30005460 0000  
                            l30005452 0000                              l30005284 12DE  
                            l30005540 0000                              l30005524 02AC  
                            l30005516 027E                              l30005508 0000  
                            l30005268 0000                              l30005532 027D  
                            l30005372 0000                              l30005356 0644  
                            l30005348 0612                              l30005364 066B  
                            l30005620 0000                              l30005612 09F4  
                            l30005380 0000                              l30005445 0000  
                            l30005437 0000                              l30005429 0000  
                            l30005605 0000                              l30005701 0000  
                            l30006093 0000                              l30006085 0000  
                            l30006077 0000                              l30006069 0000  
                            l30005461 0000                              l30005453 0000  
                            l30005285 12EB                              l30005533 01D4  
                            l30005525 02B1                              l30005517 0000  
                            l30005269 0000                              l30005509 0000  
                            l30005373 0749                              l30005357 0648  
                            l30005365 067E                              l30005381 0000  
                            l30005438 0000                              l30005710 0000  
                            l30005702 0000                              l30005630 0000  
                            l30006094 0000                              l30006086 0000  
                            l30006078 0000                              l30005286 0000  
                            l30005470 03EE                              l30005462 03CD  
                            l30005454 0000                              l30005446 0000  
                            l30005542 01EB                              l30005534 0000  
                            l30005526 02B6                              l30005518 0000  
                            l30005550 0000                              l30005374 0000  
                            l30005366 06C6                              l30005622 0A6D  
                            l30005614 09F9                              l30005606 0000  
                            l30005382 0000                              l30005439 0000  
                            l30005711 0000                              l30005703 0000  
                            l30005391 0000                              l30005631 0000  
                            l30004807 0972                              l30005551 02CC  
                            l30006095 0000                              l30006087 0000  
                            l30006079 0000                              l30005471 0000  
                            l30005463 0000                              l30005455 0000  
                            l30005447 0000                              l30005543 0000  
                            l30005535 0000                              l30005519 0000  
                            l30005359 0655                              l30005623 0A83  
                            l30005615 0A10                              l30005607 0000  
                            l30005383 0000                              l30005720 0000  
                            l30005640 0586                              l30005712 0000  
                            l30005704 0000                              l30005632 0000  
                            l30005560 0000                              l30005552 02CD  
                            l30006096 0000                              l30006088 0000  
                            l30005480 0000                              l30005288 1292  
                            l30005472 0000                              l30005464 0000  
                            l30005536 0000                              l30005528 0291  
                            l30005544 0000                              l30005376 0779  
                            l30005368 06C9                              l30005616 0000  
                            l30005608 0000                              l30005384 0000  
                            l30005721 0000                              l30005641 0000  
                            l30005705 0000                              l30005393 0000  
                            l30005625 0000                              l30005561 0000  
                            l30005553 0000                              l30005801 0C0A  
                            l30006097 0000                              l30006089 0000  
                            l30005481 0000                              l30005473 0000  
                            l30005465 0000                              l30005457 03AF  
                            l30005449 038A                              l30005537 0000  
                            l30005289 0000                              l30005545 0000  
                            l30005529 0000                              l30005377 078C  
                            l30005369 06DD                              l30005617 0A2A  
                            l30005609 0000                              l30005385 0000  
                            l30005642 0000                              l30005634 0000  
                            l30005714 0000                              l30005386 0000  
                            l30005626 0000                              l30005562 0000  
                            l30005554 0000                              l30005810 0C2D  
                            l30006098 0000                              l30005482 0000  
                            l30005730 0000                              l30005474 0000  
                            l30005466 0000                              l30005458 0000  
                            l30005538 0000                              l30005490 0000  
                            l30005546 0000                              l30005618 0000  
                            l30005378 0000                              l30005723 07B6  
                            l30005635 0000                              l30005395 0000  
                            l30005387 0000                              l30005627 0000  
                            l30005563 0000                              l30005555 0000  
                            l30005811 0000                              l30005803 0C11  
                            l30006099 0000                              l30005483 0000  
                            l30005731 0B49                              l30005467 0000  
                            l30005459 0000                              l30005539 0000  
                            l30005491 0000                              l30005547 0000  
                            l30005619 0A52                              l30005379 0000  
                            l30005724 0000                              l30005660 0000  
                            l30005644 0000                              l30005716 0BEE  
                            l30005708 0BA2                              l30005388 0000  
                            l30005396 07D4                              l30005572 031F  
                            l30005564 02FE                              l30005556 0000  
                            l30005804 0000                              l30005740 0000  
                            l30005484 0000                              l30005732 0000  
                            l30005476 040C                              l30005492 0000  
                            l30005548 0000                              l30005580 0000  
                            l30005717 0000                              l30005661 0462  
                            l30005653 0443                              l30005645 042C  
                            l30005637 0000                              l30005709 0000  
                            l30005389 07C1                              l30005629 0000  
                            l30005573 0000                              l30005565 0000  
                            l30005557 0000                              l30005485 0000  
                            l30005733 0000                              l30003869 0000  
                            l30005477 041D                              l30005493 0000  
                            l30005549 0000                              l30005581 0000  
                            l30005718 0000                              l30005654 0000  
                            l30005638 0000                              l30005574 0000  
                            l30005566 0000                              l30005726 0000  
                            l30005910 0DBB                              l30005822 0C5E  
                            l30005750 0000                              l30005742 0000  
                            l30005478 014F                              l30005734 0000  
                            l30005398 0000                              l30005486 0000  
                            l30005494 0000                              l30005670 0000  
                            l30005582 0000                              l30005719 07A2  
                            l30005647 0000                              l30005639 0000  
                            l30005575 0000                              l30005567 0000  
                            l30005559 02E0                              l30005903 0DA1  
                            l30005831 0C7E                              l30005815 0C43  
                            l30005751 0000                              l30005479 0000  
                            l30005735 0000                              l30005487 0000  
                            l30005495 0000                              l30005671 0000  
                            l30005663 0000                              l30005583 0000  
                            l30005656 0000                              l30005648 0435  
                            l30005592 0000                              l30005760 0000  
                            l30005576 0000                              l30005568 0000  
                            l30005912 0DBE                              l30005840 0000  
                            l30005808 0C27                              l30005752 0000  
                            l30005744 08EC                              l30005488 0000  
                            l30005496 0000                              l30005680 0198  
                            l30005672 0000                              l30005664 0000  
                            l30005584 0000                              l30005649 0000  
                            l30005593 0000                              l30005761 0000  
                            l30005569 0000                              l30005913 0000  
                            l30005825 0C67                              l30005817 0C49  
                            l30005737 0B77                              l30005729 0000  
                            l30005489 0000                              l30005497 0000  
                            l30005681 0000                              l30005673 0000  
                            l30005665 0000                              l30005585 0000  
                            l30005658 0000                              l30005770 0AB5  
                            l30005578 033D                              l30005754 0000  
                            l30005922 0DE8                              l30005906 0000  
                            l30005834 0C87                              l30005826 0C69  
                            l30005818 0000                              l30005746 0901  
                            l30005738 0000                              l30005690 0000  
                            l30005682 0000                              l30005674 0000  
                            l30005666 0000                              l30005586 0000  
                            l30005659 045A                              l30005771 0000  
                            l30005579 034F                              l30005931 0E05  
                            l30005915 0DCE                              l30005851 0CD1  
                            l30005835 0000                              l30005827 0000  
                            l30005747 0903                              l30005739 0000  
                            l30005499 12BE                              l30005683 0000  
                            l30005675 0000                              l30005667 0000  
                            l30005587 0000                              l30005596 0AFF  
                            l30005764 0000                              l30005756 07E9  
                            l30005932 0000                              l30005860 0CF3  
                            l30005844 0CB5                              l30005684 0000  
                            l30005676 0000                              l30005588 0000  
                            l30005780 0000                              l30005773 0000  
                            l30005765 0AA4                              l30004797 0000  
                            l30005757 0000                              l30005941 0E30  
                            l30005925 0000                              l30005861 0000  
                            l30005853 0CD7                              l30005837 0C97  
                            l30005693 0000                              l30005677 0000  
                            l30005669 0189                              l30005589 0000  
                            l30005781 0000                              l30005766 0000  
                            l30004798 0000                              l30005934 0E15  
                            l30005918 0000                              l30005870 0D1F  
                            l30005854 0000                              l30005846 0CBB  
                            l30005686 0000                              l30005678 0000  
                            l30005790 0000                              l30005782 0038  
                            l30005775 0000                              l30005951 0000  
                            l30005871 0D24                              l30005847 0000  
                            l30005839 0C9F                              l30005687 0000  
                            l30005791 0000                              l30005783 0000  
                            l30005696 0000                              l30005776 0AD6  
                            l30005960 0E76                              l30005944 0000  
                            l30005880 0000                              l30005872 0D26  
                            l30005688 0000                              l30005784 0000  
                            l30005697 0000                              l30005777 0000  
                            l30005937 0000                              l30005929 0E02  
                            l30005873 0000                              l30005865 0D09  
                            l30005689 0000                              l30005793 0106  
                            l30005698 0000                              l30005778 0AE1  
                            l30005970 0000                              l30005858 0CED  
                            l30005786 0071                              l30005699 0000  
                            l30005963 0000                              l30005955 0E63  
                            l30005867 0D0F                              l30005795 0000  
                            l30005787 0047                              l30005948 0E49  
                            l30005892 0000                              l30005884 0D55  
                            l30005868 0000                              l30005788 009A  
                            l30005957 0E66                              l30005885 0D59  
                            l30005877 0D3B                              l30005797 0000  
                            l30005789 0000                              l30005982 0000  
                            l30005974 0EAA                              l30005958 0000  
                            l30005886 0D5B                              l30005798 0BFA  
                            l30005967 0E90                              l30005887 0000  
                            l30005799 0000                              l30005976 0EAD  
                            l30005896 0D86                              l30005993 0EF1  
                            l30005977 0000                              l30005897 0D8A  
                            l30005889 0D6B                              l30005986 0ED8  
                            l30005898 0D8C                              l30005979 0EBD  
                            l30005899 0000                              l30005996 0000  
                            l30005989 0000                           __stringbase 100B  
                __size_of_a_m0_return 0006              _s_m0_tonToff_setMinutos0 11DA  
            _s_m0_tonToff_setMinutos1 1162               __end_of_a_m0_tOnOff_inc 079D  
             __end_of_a_m0_tOnOff_set 0A8B                               ___atdiv 0A8B  
                             ___awdiv 0422                               ___atmod 0AE8  
                             ___lbdiv 07BA                               ___awmod 0955  
                             ___lbmod 079D                           ?_systemInit 0071  
                            ?___atdiv 002B                              ?___awdiv 0024  
                            ?___atmod 0020                              ?___lbdiv 0020  
                            ?___awmod 0020                              ?___lbmod 0023  
                        ?_eeprom_read 0073                       _a_m0_input_save 132B  
                    a_showTimerIdOn@i 002D                      a_showTimerIdOn@n 002C  
                    a_showTimerIdOn@s 0028                             ??___atdiv 0071  
                           ??___awdiv 0071                             ??___atmod 0071  
                           ??___lbdiv 0071                             ??___awmod 0071  
                           ??___lbmod 0071                    ??_a_showTimerIdOff 0071  
                    ??_a_m0_nMem_save 0071                    a_m0_tOnOff_inc@p2s 00A5  
          kPin_driverDc@kCurrLogState 0195                               _isr$883 01A9  
                     kPin_driverDc@pi 0194                    a_m0_tOnOff_inc@num 00A0  
                   fp__a_m0_input_inc 0815                                ??_main 003A  
                       _fsmStateTable 0867                     fp__a_m0_input_set 0839  
 __end_of_a_m0_tOnOff_showString_next 02CC           _a_m0_tOnOff_showString_next 02BB  
                 fp__a_showTimerIdOff 0845                       _a_inputActionFn 12CF  
                     _a_inputActionFp 1283                  __size_of_eeprom_read 0019  
                     ucharToStr@p2str 002A                   ___tmul@multiplicand 0023  
                          __pmaintext 0034                          fp__a_m0_nMem 083C  
                  a_m0_tOnOff_set@p2s 0035                       _t0DelayConstant 10B0  
               a_m0_tOnOff_inc@titila 00A4                       ___atmod@divisor 0023  
                  a_m0_tOnOff_set@num 0037                     eeprom_write@value 0021  
                  ??_a_m0_tOnOff_save 0074                      d7sm_set_88xx@str 0029  
                  _s_testDisplaySetup 120A                      _a_input2ActionFn 1265  
                    _a_input2ActionFp 10AC                       ___atmod@counter 0072  
                        ?_fsmGetEvent 0073                        ??_eeprom_write 0071  
              _s_m0_tonToff_setHoras0 1153                _s_m0_tonToff_setHoras1 1171  
                 __size_of_ucharToStr 0021                           ___lbmod@rem 0022  
                 fp__a_m0_tOnOff_save 0809                            __pintentry 0004  
              __end_of_d7sm_char2pins 15C4                         _driver_ledSet 1135  
                     ___lbdiv@divisor 0020                                _C1RSEL 084D  
                    _d7sm_puts_scroll 0354                                _C2RSEL 084C  
                            stringdir 100A                     ??_a_m0_input_save 0071  
                              _C2SYNC 0848                              stringtab 1000  
                         _a_doNothing 0015                 i1___wmul@multiplicand 0198  
                              _ADCON0 001F                                _ADCON1 009F  
                              _ABDOVF 0C3F                            __ptext1200 01F8  
                          __ptext1201 0994                            __ptext1210 10D1  
                          __ptext1202 05A3                            __ptext1211 12AA  
                          __ptext1203 0126                            __ptext1220 10B5  
                          __ptext1212 0133                            __ptext1204 0276  
                          __ptext1221 0383                            __ptext1213 12A3  
                          __ptext1205 0176                            __ptext1230 0889  
                          __ptext1222 0467                            __ptext1214 10AC  
                          __ptext1206 132B                            __ptext1231 135F  
                          __ptext1223 1283                            __ptext1215 1343  
                          __ptext1207 01BE                            __ptext1240 0A8B  
                          __ptext1232 0BF6                            __ptext1224 0015  
                          __ptext1216 027E                            __ptext1208 016C  
                          __ptext1241 07BA                            __ptext1233 1135  
                          __ptext1225 1144                            __ptext1217 01D4  
                          __ptext1209 0171                            __ptext1250 1777  
                          __ptext1242 0B92                            __ptext1234 0B79  
                          __ptext1226 10A1                            __ptext1218 12CF  
                              _CCP1M0 00B8                            __ptext1251 13B9  
                          __ptext1243 0AE8                            __ptext1235 093C  
                          __ptext1227 0B35                            __ptext1219 1265  
                              _CCP1M1 00B9                            __ptext1252 16F0  
                          __ptext1244 0582                            __ptext1236 07D6  
                          __ptext1228 014F                                _CCP1M2 00BA  
                          __ptext1253 124A                            __ptext1245 0354  
                          __ptext1237 02CC                            __ptext1229 1129  
                              _CCP1M3 00BB                            __ptext1254 0015  
                          __ptext1246 0422                            __ptext1238 0955  
                              _CCP2M0 00E8                            __ptext1247 079D  
                          __ptext1239 0253                       ___lbdiv@counter 0072  
                              _CCP2M1 00E9                            __ptext1248 15C7  
                              _CCP2M2 00EA                            __ptext1249 173B  
                              _CCP2M3 00EB                            __ptext1199 02BB  
                              _CCP1IE 0462                                _CCP1IF 0062  
                              _CCP2IE 0468                                _CCP2IF 0068  
                      __end_of___tmul 07FD                        __end_of___wmul 0955  
                    fp__a_m0_nMem_dec 0821                                _ADRESH 001E  
                              _EEADRH 010F                                _ADRESL 009E  
                              _EEADRL 010D                                _EEDATA 010C  
                              _ECCPAS 009C                                _CCPR1H 0016  
                    fp__a_m0_nMem_inc 0824                                _EEDATH 010E  
                              _CCPR2H 001C                                _CCPR1L 0015  
                              _CCPR2L 001B                                _EECON1 018C  
                              _EECON2 018D                             main@event 0190  
                    fp__a_m0_nMem_set 0818                   i1___wmul@multiplier 0196  
                        ??_a_showTime 0031                                _ANSELH 0189  
                      ??_a_temporizar 0024                                _MC1OUT 084F  
                              _MC2OUT 084E                  __size_of_fsmGetEvent 040A  
                        __end_of_main 0120                           i1l600000795 1637  
                         i1l600000796 1644                           i1l600000797 1651  
                         i1l600000798 165E                   __end_of_a_doNothing 0016  
                        ??_systemInit 0071                                _T1GINV 0087  
                  _a_initializeDevice 0B35                             idloc_word 2000  
                              _GODONE 00F9                  end_of_initialization 1327  
              __end_of_a_m0_nMem_save 01D4                                _T1SYNC 0082  
                              _INTEDG 040E                                _PCLATH 000A  
                              _INTCON 000B                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK3 0190  
                   ??_a_inputActionFn 0071                     ??_a_inputActionFp 0071  
                      _a_m0_first_inc 12A3                                _SBOREN 0474  
                              _OSCCON 008F                        _a_m0_first_set 12AA  
                              u850_20 1648                                u842_25 15E8  
                              u835_24 179D                                u851_24 1649  
                              u843_25 1604                                _TMR1GE 0086  
                              _TMR1IE 0460                                _TMR1IF 0060  
                              _TMR1CS 0081                 a_showTimerIdOn@i_1736 002A  
                              _TMR2IE 0461                                u854_20 1655  
                              u846_20 163B                                _TMR2IF 0061  
                              _PSSAC0 04E2                                _PSSAC1 04E3  
                              _PSSBD0 04E0                                _PSSBD1 04E1  
                              u855_24 1656                                u847_24 163C  
                              _SPBRGH 009A                                _OPTION 0081  
                              _TMR1ON 0080                                _TMR2ON 0092  
                              u858_20 1662                                u859_24 1663  
                              _WDTCON 0105                                _WDTPS0 0829  
                              _WDTPS1 082A                                _WDTPS2 082B  
                              _WDTPS3 082C                                _SSPADD 0093  
                              _TRISA0 0428                                _TRISA1 0429  
                              _TRISB0 0430                                _TRISA2 042A  
                              _TRISB1 0431                                _TRISA3 042B  
                              _TRISC0 0438                                _TRISB2 0432  
                              _TRISA4 042C                                _TRISC1 0439  
                              _TRISB3 0433                                _TRISA5 042D  
                              _TRISC2 043A                                _TRISB4 0434  
                              _TRISA6 042E                                _TRISC3 043B  
                              _TRISB5 0435                                _TRISA7 042F  
                              _TRISC4 043C                                _TRISB6 0436  
                              _TRISC5 043D                                _TRISB7 0437  
                              _TRISC6 043E                                _TRISE3 044B  
                              _TRISC7 043F                                _STATUS 0003  
                              _SSPCON 0014                                _SSPBUF 0013  
                             init_ram 11FD               __end_of_a_m0_first_save 014F  
                              _SWDTEN 0828                 a_showTimerIdOn@n_1737 002B  
                   ?_d7sm_puts_scroll 0023                                _ULPWUE 0475  
                              _SSPMSK 0093                         _kPin_driverDc 16F0  
                    i1___wmul@product 0194                 a_showTimerIdOn@s_1738 0029  
               __end_of_driver_ledSet 1144                  _a_m0_tOnOff_entrance 0126  
          __end_of_a_testDisplaySetup 1135                      _fsmGetEvent$1700 00DA  
                    _fsmGetEvent$1701 00E0                      _fsmGetEvent$1702 00DE  
                    _fsmGetEvent$1710 00A0                      _fsmGetEvent$1703 00C6  
                    _fsmGetEvent$1711 00A6                      _fsmGetEvent$1720 00B4  
                    _fsmGetEvent$1704 00AC                      _fsmGetEvent$1712 00A4  
                    _fsmGetEvent$1721 00BA                      _fsmGetEvent$1713 00B2  
                    _fsmGetEvent$1705 00AA                      _fsmGetEvent$1714 00C0  
                    _fsmGetEvent$1722 00B8                      _fsmGetEvent$1706 00B0  
                    _fsmGetEvent$1715 00BE                      _fsmGetEvent$1707 00AE  
                    _fsmGetEvent$1716 00C4                      _fsmGetEvent$1708 00A8  
                    _fsmGetEvent$1717 00C2                      _fsmGetEvent$1709 00A2  
                    _fsmGetEvent$1718 00BC                      _fsmGetEvent$1719 00B6  
                    _fsmGetEvent$1681 00D4                      _fsmGetEvent$1682 00D2  
                    _fsmGetEvent$1690 00CA                      _fsmGetEvent$1683 00D8  
                    _fsmGetEvent$1691 00C8                      _fsmGetEvent$1684 00D6  
                    _fsmGetEvent$1692 00CE                      _fsmGetEvent$1685 00D0  
                    _fsmGetEvent$1693 00CC                      _fsmGetEvent$1694 00E6  
                    _fsmGetEvent$1695 00E4                      _fsmGetEvent$1696 00EA  
                    _fsmGetEvent$1697 00E8                      _fsmGetEvent$1698 00E2  
                    _fsmGetEvent$1699 00DC                      ??_a_m0_first_inc 0071  
                       ??_a_m0_return 0071                      ??_a_m0_first_set 0071  
                          _s_m0_first 1111                            _s_m0_input 10F9  
                      fp__a_doNothing 0851                   __size_of_a_m0_first 001D  
                  fp__a_showHyphensOn 0854                 d7sm_set_88xx@unitText 002E  
                 __size_of_a_m0_input 001C                          __size_of_isr 0129  
                      _a_m0_input_inc 0276                        _a_m0_input_set 027E  
                              ___tmul 07D6                       ??_a_m0_nMem_dec 0072  
                              ___wmul 093C                        __pstringtext10 11DA  
                      __pstringtext11 1162                       ??_a_m0_nMem_inc 0072  
                      __pstringtext20 11E9                        __pstringtext12 118F  
                      __pstringtext21 111D                        __pstringtext13 1180  
                      __pstringtext30 0015                        __pstringtext22 10EF  
                      __pstringtext14 1111                        __pstringtext23 10E6  
                      __pstringtext15 10F9                        __pstringtext24 10D7  
                      __pstringtext16 1105                        __pstringtext25 10CB  
                      __pstringtext17 10BF                        __pstringtext26 10BA  
                      __pstringtext18 10C5                        __pstringtext27 10A9  
                      __pstringtext19 120A                        __pstringtext28 10A3  
                      __pstringtext29 10A6                       ??_a_m0_nMem_set 0072  
              ??_a_m0_tOnOff_entrance 0074                 __end_of_kPin_driverDc 173B  
         __size_of_a_initializeDevice 0044                    fp__a_showTimerIdOn 0848  
                     d7sm_char2pins@c 0194                         ??_eeprom_read 0071  
                d7sm_set_88xx@nTitila 0028                                _s_idle 0016  
                  ??_a_input2ActionFn 0071                    ??_a_input2ActionFp 0071  
                          i1l30006114 0000                            i1l30006122 0000  
                          i1l30006130 0000                            i1l30006115 124E  
                          i1l30006131 0000                            i1l30006132 0000  
                          i1l30006117 1256                            i1l30006133 0000  
                          i1l30006118 0000                            i1l30006150 0000  
                          i1l30006119 0000                            i1l30006151 0000  
                          i1l30006127 0000                            i1l30006160 0000  
                          i1l30006152 0000                            i1l30006161 0000  
                          i1l30006145 1665                            i1l30006153 16B6  
                          i1l30006162 0000                            i1l30006138 1606  
                          i1l30006146 1681                            i1l30006163 0000  
                          i1l30006147 0000                            i1l30006139 160D  
                          i1l30006180 1725                            i1l30006172 0000  
                          i1l30006164 0000                            i1l30006156 0000  
                          i1l30006148 0000                            i1l30006181 0000  
                          i1l30006165 16E0                            i1l30006157 0000  
                          i1l30006149 0000                            i1l30006182 1717  
                          i1l30006174 151E                            i1l30006166 0000  
                          i1l30006158 0000                            i1l30006175 0000  
                          i1l30006167 0000                            i1l30006159 0000  
                          i1l30006187 1730                    fp__a_m0_tOnOff_inc 080F  
                              _tmp_11 0044                    fp__a_m0_tOnOff_set 080C  
                           init_fetch 11F9                      ??_a_m0_input_inc 0071  
                __size_of_a_doNothing 0001                      ??_a_m0_input_set 0071  
                         _d7sm_buffer 01BB                   fp__a_input2ActionFn 0842  
                 fp__a_input2ActionFp 0833                                clrloop 10DF  
                  ??_d7sm_puts_scroll 0071                           __end_of_isr 16F0  
                              fptable 0800                   d7sm_set_88xx@i_2805 002B  
                         ucharToStr@i 0028                              i1___wmul 124A  
              __end_of_a_m0_first_inc 12AA                __end_of_a_m0_first_set 12CF  
                        _eeprom_write 0253               __size_of_d7sm_char2pins 020B  
                       _s_m0_nMem_set 11CB                             ?i1___wmul 0196  
                      ?_d7sm_set_88xx 002D                                saved_w 007F  
             __end_of_a_m0_input_save 1343                         ??_fsmGetEvent 0071  
                 ___wmul@multiplicand 0022                       ??_d7sm_set_88xx 0072  
                       __pstringtext1 0867                         __pstringtext2 10B0  
                       __pstringtext3 0016                         __pstringtext4 119E  
                       __pstringtext5 11AD                         __pstringtext6 11CB  
                       __pstringtext7 11BC                         __pstringtext8 1153  
                       __pstringtext9 1171                            ??i1___wmul 0194  
                __end_of_eeprom_write 0276                        d7sm_set_88xx@n 002C  
                      d7sm_set_88xx@s 002A               __size_of_a_m0_nMem_save 0016  
                        _a_temporizar 0889                             t0Driver@i 0195  
                      _s_m0_first_set 119E               __end_of_a_inputActionFn 12FC  
             __end_of_a_inputActionFp 12A3                 a_m0_tOnOff_set@titila 0034  
                           t1Driver@i 019F              __size_of_a_showHyphensOn 000F  
                      ___tmul@product 0071                   d7sm_set_88xx@number 002D  
        __end_of_a_m0_tOnOff_entrance 0133                __end_of_a_m0_input_inc 027E  
                ??_a_testDisplaySetup 0071                __end_of_a_m0_input_set 02BB  
                __end_of_a_temporizar 093C                      a_m0_nMem_set@str 0028  
              __size_of_a_m0_nMem_dec 0005              __end_of_a_showHyphensOff 10A3  
              __size_of_a_m0_nMem_inc 0005                __size_of_a_m0_nMem_set 0048  
            __size_of_a_showTimerIdOn 009F          d7sm_puts_scroll@stringStrlen 0020  
                    ___awmod@dividend 0020              __size_of_a_m0_tOnOff_inc 01FA  
            __size_of_a_m0_tOnOff_set 00F7                    fp__a_m0_first_save 082D  
                      _s_m0_input_set 11AD                           __pdataBANK0 003E  
                         __pdataBANK3 01AB                       ___awmod@divisor 0022  
                            _t0Driver 173B                     __size_ofi1___wmul 001B  
                            _t1Driver 1777                       ___awmod@counter 0072  
